/* automatically generated by rust-bindgen */

pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const _ERRNO_H: ::std::os::raw::c_uint = 1;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const ENOTBLK: ::std::os::raw::c_uint = 15;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const ETXTBSY: ::std::os::raw::c_uint = 26;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EDEADLK: ::std::os::raw::c_uint = 35;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 36;
pub const ENOLCK: ::std::os::raw::c_uint = 37;
pub const ENOSYS: ::std::os::raw::c_uint = 38;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 39;
pub const ELOOP: ::std::os::raw::c_uint = 40;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 11;
pub const ENOMSG: ::std::os::raw::c_uint = 42;
pub const EIDRM: ::std::os::raw::c_uint = 43;
pub const ECHRNG: ::std::os::raw::c_uint = 44;
pub const EL2NSYNC: ::std::os::raw::c_uint = 45;
pub const EL3HLT: ::std::os::raw::c_uint = 46;
pub const EL3RST: ::std::os::raw::c_uint = 47;
pub const ELNRNG: ::std::os::raw::c_uint = 48;
pub const EUNATCH: ::std::os::raw::c_uint = 49;
pub const ENOCSI: ::std::os::raw::c_uint = 50;
pub const EL2HLT: ::std::os::raw::c_uint = 51;
pub const EBADE: ::std::os::raw::c_uint = 52;
pub const EBADR: ::std::os::raw::c_uint = 53;
pub const EXFULL: ::std::os::raw::c_uint = 54;
pub const ENOANO: ::std::os::raw::c_uint = 55;
pub const EBADRQC: ::std::os::raw::c_uint = 56;
pub const EBADSLT: ::std::os::raw::c_uint = 57;
pub const EDEADLOCK: ::std::os::raw::c_uint = 35;
pub const EBFONT: ::std::os::raw::c_uint = 59;
pub const ENOSTR: ::std::os::raw::c_uint = 60;
pub const ENODATA: ::std::os::raw::c_uint = 61;
pub const ETIME: ::std::os::raw::c_uint = 62;
pub const ENOSR: ::std::os::raw::c_uint = 63;
pub const ENONET: ::std::os::raw::c_uint = 64;
pub const ENOPKG: ::std::os::raw::c_uint = 65;
pub const EREMOTE: ::std::os::raw::c_uint = 66;
pub const ENOLINK: ::std::os::raw::c_uint = 67;
pub const EADV: ::std::os::raw::c_uint = 68;
pub const ESRMNT: ::std::os::raw::c_uint = 69;
pub const ECOMM: ::std::os::raw::c_uint = 70;
pub const EPROTO: ::std::os::raw::c_uint = 71;
pub const EMULTIHOP: ::std::os::raw::c_uint = 72;
pub const EDOTDOT: ::std::os::raw::c_uint = 73;
pub const EBADMSG: ::std::os::raw::c_uint = 74;
pub const EOVERFLOW: ::std::os::raw::c_uint = 75;
pub const ENOTUNIQ: ::std::os::raw::c_uint = 76;
pub const EBADFD: ::std::os::raw::c_uint = 77;
pub const EREMCHG: ::std::os::raw::c_uint = 78;
pub const ELIBACC: ::std::os::raw::c_uint = 79;
pub const ELIBBAD: ::std::os::raw::c_uint = 80;
pub const ELIBSCN: ::std::os::raw::c_uint = 81;
pub const ELIBMAX: ::std::os::raw::c_uint = 82;
pub const ELIBEXEC: ::std::os::raw::c_uint = 83;
pub const EILSEQ: ::std::os::raw::c_uint = 84;
pub const ERESTART: ::std::os::raw::c_uint = 85;
pub const ESTRPIPE: ::std::os::raw::c_uint = 86;
pub const EUSERS: ::std::os::raw::c_uint = 87;
pub const ENOTSOCK: ::std::os::raw::c_uint = 88;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 89;
pub const EMSGSIZE: ::std::os::raw::c_uint = 90;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 91;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 92;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 93;
pub const ESOCKTNOSUPPORT: ::std::os::raw::c_uint = 94;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 95;
pub const EPFNOSUPPORT: ::std::os::raw::c_uint = 96;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 97;
pub const EADDRINUSE: ::std::os::raw::c_uint = 98;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 99;
pub const ENETDOWN: ::std::os::raw::c_uint = 100;
pub const ENETUNREACH: ::std::os::raw::c_uint = 101;
pub const ENETRESET: ::std::os::raw::c_uint = 102;
pub const ECONNABORTED: ::std::os::raw::c_uint = 103;
pub const ECONNRESET: ::std::os::raw::c_uint = 104;
pub const ENOBUFS: ::std::os::raw::c_uint = 105;
pub const EISCONN: ::std::os::raw::c_uint = 106;
pub const ENOTCONN: ::std::os::raw::c_uint = 107;
pub const ESHUTDOWN: ::std::os::raw::c_uint = 108;
pub const ETOOMANYREFS: ::std::os::raw::c_uint = 109;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 110;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 111;
pub const EHOSTDOWN: ::std::os::raw::c_uint = 112;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 113;
pub const EALREADY: ::std::os::raw::c_uint = 114;
pub const EINPROGRESS: ::std::os::raw::c_uint = 115;
pub const ESTALE: ::std::os::raw::c_uint = 116;
pub const EUCLEAN: ::std::os::raw::c_uint = 117;
pub const ENOTNAM: ::std::os::raw::c_uint = 118;
pub const ENAVAIL: ::std::os::raw::c_uint = 119;
pub const EISNAM: ::std::os::raw::c_uint = 120;
pub const EREMOTEIO: ::std::os::raw::c_uint = 121;
pub const EDQUOT: ::std::os::raw::c_uint = 122;
pub const ENOMEDIUM: ::std::os::raw::c_uint = 123;
pub const EMEDIUMTYPE: ::std::os::raw::c_uint = 124;
pub const ECANCELED: ::std::os::raw::c_uint = 125;
pub const ENOKEY: ::std::os::raw::c_uint = 126;
pub const EKEYEXPIRED: ::std::os::raw::c_uint = 127;
pub const EKEYREVOKED: ::std::os::raw::c_uint = 128;
pub const EKEYREJECTED: ::std::os::raw::c_uint = 129;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 130;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 131;
pub const ERFKILL: ::std::os::raw::c_uint = 132;
pub const EHWPOISON: ::std::os::raw::c_uint = 133;
pub const ENOTSUP: ::std::os::raw::c_uint = 95;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const FF_LAMBDA_SHIFT: ::std::os::raw::c_uint = 7;
pub const FF_LAMBDA_SCALE: ::std::os::raw::c_uint = 128;
pub const FF_QP2LAMBDA: ::std::os::raw::c_uint = 118;
pub const FF_LAMBDA_MAX: ::std::os::raw::c_uint = 32767;
pub const FF_QUALITY_SCALE: ::std::os::raw::c_uint = 128;
pub const AV_TIME_BASE: ::std::os::raw::c_uint = 1000000;
pub const _INTTYPES_H: ::std::os::raw::c_uint = 1;
pub const ____gwchar_t_defined: ::std::os::raw::c_uint = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const PRId8: &'static [u8; 2usize] = b"d\x00";
pub const PRId16: &'static [u8; 2usize] = b"d\x00";
pub const PRId32: &'static [u8; 2usize] = b"d\x00";
pub const PRId64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIi8: &'static [u8; 2usize] = b"i\x00";
pub const PRIi16: &'static [u8; 2usize] = b"i\x00";
pub const PRIi32: &'static [u8; 2usize] = b"i\x00";
pub const PRIi64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIo8: &'static [u8; 2usize] = b"o\x00";
pub const PRIo16: &'static [u8; 2usize] = b"o\x00";
pub const PRIo32: &'static [u8; 2usize] = b"o\x00";
pub const PRIo64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIu8: &'static [u8; 2usize] = b"u\x00";
pub const PRIu16: &'static [u8; 2usize] = b"u\x00";
pub const PRIu32: &'static [u8; 2usize] = b"u\x00";
pub const PRIu64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIx8: &'static [u8; 2usize] = b"x\x00";
pub const PRIx16: &'static [u8; 2usize] = b"x\x00";
pub const PRIx32: &'static [u8; 2usize] = b"x\x00";
pub const PRIx64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIX8: &'static [u8; 2usize] = b"X\x00";
pub const PRIX16: &'static [u8; 2usize] = b"X\x00";
pub const PRIX32: &'static [u8; 2usize] = b"X\x00";
pub const PRIX64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\x00";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\x00";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\x00";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNd16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNd32: &'static [u8; 2usize] = b"d\x00";
pub const SCNd64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNi16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNi32: &'static [u8; 2usize] = b"i\x00";
pub const SCNi64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNu16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNu32: &'static [u8; 2usize] = b"u\x00";
pub const SCNu64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNo8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNo16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNo32: &'static [u8; 2usize] = b"o\x00";
pub const SCNo64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNx16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNx32: &'static [u8; 2usize] = b"x\x00";
pub const SCNx64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\x00";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\x00";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uint = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 16;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_uint = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uint = 127;
pub const MAX_CANON: ::std::os::raw::c_uint = 255;
pub const MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const PATH_MAX: ::std::os::raw::c_uint = 4096;
pub const PIPE_BUF: ::std::os::raw::c_uint = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 131072;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uint = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_uint = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uint = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_uint = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 32767;
pub const _MATH_H: ::std::os::raw::c_uint = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: ::std::os::raw::c_uint = 1;
pub const _MATH_H_MATHDEF: ::std::os::raw::c_uint = 1;
pub const FP_ILOGB0: ::std::os::raw::c_int = -2147483647;
pub const FP_ILOGBNAN: ::std::os::raw::c_uint = 2147483647;
pub const FP_FAST_FMA: ::std::os::raw::c_uint = 1;
pub const FP_FAST_FMAF: ::std::os::raw::c_uint = 1;
pub const __MATH_DECLARING_DOUBLE: ::std::os::raw::c_uint = 1;
pub const __MATH_DECLARE_LDOUBLE: ::std::os::raw::c_uint = 1;
pub const MATH_ERRNO: ::std::os::raw::c_uint = 1;
pub const MATH_ERREXCEPT: ::std::os::raw::c_uint = 2;
pub const math_errhandling: ::std::os::raw::c_uint = 3;
pub const DOMAIN: ::std::os::raw::c_uint = 1;
pub const SING: ::std::os::raw::c_uint = 2;
pub const OVERFLOW: ::std::os::raw::c_uint = 3;
pub const UNDERFLOW: ::std::os::raw::c_uint = 4;
pub const TLOSS: ::std::os::raw::c_uint = 5;
pub const PLOSS: ::std::os::raw::c_uint = 6;
pub const M_E: f32 = 2.718281828459045;
pub const M_LOG2E: f32 = 1.4426950408889634;
pub const M_LOG10E: f32 = 0.4342944819032518;
pub const M_LN2: f32 = 0.6931471805599453;
pub const M_LN10: f32 = 2.302585092994046;
pub const M_PI: f32 = 3.141592653589793;
pub const M_PI_2: f32 = 1.5707963267948966;
pub const M_PI_4: f32 = 0.7853981633974483;
pub const M_1_PI: f32 = 0.3183098861837907;
pub const M_2_PI: f32 = 0.6366197723675814;
pub const M_2_SQRTPI: f32 = 1.1283791670955126;
pub const M_SQRT2: f32 = 1.4142135623730951;
pub const M_SQRT1_2: f32 = 0.7071067811865476;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __ENUM_IDTYPE_T: ::std::os::raw::c_uint = 1;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 64;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_COND_COMPAT_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_SPINS: ::std::os::raw::c_uint = 0;
pub const __PTHREAD_RWLOCK_ELISION_EXTRA: ::std::os::raw::c_uint = 0;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _STRING_H: ::std::os::raw::c_uint = 1;
pub const LIBAVUTIL_VERSION_MAJOR: ::std::os::raw::c_uint = 54;
pub const LIBAVUTIL_VERSION_MINOR: ::std::os::raw::c_uint = 31;
pub const LIBAVUTIL_VERSION_MICRO: ::std::os::raw::c_uint = 100;
pub const AV_HAVE_BIGENDIAN: ::std::os::raw::c_uint = 0;
pub const AV_HAVE_FAST_UNALIGNED: ::std::os::raw::c_uint = 1;
pub const AV_HAVE_INCOMPATIBLE_LIBAV_ABI: ::std::os::raw::c_uint = 0;
pub const AVERROR_EXPERIMENTAL: ::std::os::raw::c_int = -733130664;
pub const AVERROR_INPUT_CHANGED: ::std::os::raw::c_int = -1668179713;
pub const AVERROR_OUTPUT_CHANGED: ::std::os::raw::c_int = -1668179714;
pub const AV_ERROR_MAX_STRING_SIZE: ::std::os::raw::c_uint = 64;
pub const M_LOG2_10: f32 = 3.321928094887362;
pub const M_PHI: f32 = 1.618033988749895;
pub const AV_LOG_QUIET: ::std::os::raw::c_int = -8;
pub const AV_LOG_PANIC: ::std::os::raw::c_uint = 0;
pub const AV_LOG_FATAL: ::std::os::raw::c_uint = 8;
pub const AV_LOG_ERROR: ::std::os::raw::c_uint = 16;
pub const AV_LOG_WARNING: ::std::os::raw::c_uint = 24;
pub const AV_LOG_INFO: ::std::os::raw::c_uint = 32;
pub const AV_LOG_VERBOSE: ::std::os::raw::c_uint = 40;
pub const AV_LOG_DEBUG: ::std::os::raw::c_uint = 48;
pub const AV_LOG_TRACE: ::std::os::raw::c_uint = 56;
pub const AV_LOG_MAX_OFFSET: ::std::os::raw::c_uint = 64;
pub const AV_LOG_SKIP_REPEATED: ::std::os::raw::c_uint = 1;
pub const AV_LOG_PRINT_LEVEL: ::std::os::raw::c_uint = 2;
pub const AVPALETTE_SIZE: ::std::os::raw::c_uint = 1024;
pub const AVPALETTE_COUNT: ::std::os::raw::c_uint = 256;
pub const AV_BUFFER_FLAG_READONLY: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_FORCE: ::std::os::raw::c_uint = 2147483648;
pub const AV_CPU_FLAG_MMX: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_MMXEXT: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_MMX2: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_3DNOW: ::std::os::raw::c_uint = 4;
pub const AV_CPU_FLAG_SSE: ::std::os::raw::c_uint = 8;
pub const AV_CPU_FLAG_SSE2: ::std::os::raw::c_uint = 16;
pub const AV_CPU_FLAG_SSE2SLOW: ::std::os::raw::c_uint = 1073741824;
pub const AV_CPU_FLAG_3DNOWEXT: ::std::os::raw::c_uint = 32;
pub const AV_CPU_FLAG_SSE3: ::std::os::raw::c_uint = 64;
pub const AV_CPU_FLAG_SSE3SLOW: ::std::os::raw::c_uint = 536870912;
pub const AV_CPU_FLAG_SSSE3: ::std::os::raw::c_uint = 128;
pub const AV_CPU_FLAG_ATOM: ::std::os::raw::c_uint = 268435456;
pub const AV_CPU_FLAG_SSE4: ::std::os::raw::c_uint = 256;
pub const AV_CPU_FLAG_SSE42: ::std::os::raw::c_uint = 512;
pub const AV_CPU_FLAG_AVX: ::std::os::raw::c_uint = 16384;
pub const AV_CPU_FLAG_AVXSLOW: ::std::os::raw::c_uint = 134217728;
pub const AV_CPU_FLAG_XOP: ::std::os::raw::c_uint = 1024;
pub const AV_CPU_FLAG_FMA4: ::std::os::raw::c_uint = 2048;
pub const AV_CPU_FLAG_CMOV: ::std::os::raw::c_uint = 16781312;
pub const AV_CPU_FLAG_AVX2: ::std::os::raw::c_uint = 32768;
pub const AV_CPU_FLAG_FMA3: ::std::os::raw::c_uint = 65536;
pub const AV_CPU_FLAG_BMI1: ::std::os::raw::c_uint = 131072;
pub const AV_CPU_FLAG_BMI2: ::std::os::raw::c_uint = 262144;
pub const AV_CPU_FLAG_ALTIVEC: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_VSX: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_POWER8: ::std::os::raw::c_uint = 4;
pub const AV_CPU_FLAG_ARMV5TE: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_ARMV6: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_ARMV6T2: ::std::os::raw::c_uint = 4;
pub const AV_CPU_FLAG_VFP: ::std::os::raw::c_uint = 8;
pub const AV_CPU_FLAG_VFPV3: ::std::os::raw::c_uint = 16;
pub const AV_CPU_FLAG_NEON: ::std::os::raw::c_uint = 32;
pub const AV_CPU_FLAG_ARMV8: ::std::os::raw::c_uint = 64;
pub const AV_CPU_FLAG_SETEND: ::std::os::raw::c_uint = 65536;
pub const AV_CH_FRONT_LEFT: ::std::os::raw::c_uint = 1;
pub const AV_CH_FRONT_RIGHT: ::std::os::raw::c_uint = 2;
pub const AV_CH_FRONT_CENTER: ::std::os::raw::c_uint = 4;
pub const AV_CH_LOW_FREQUENCY: ::std::os::raw::c_uint = 8;
pub const AV_CH_BACK_LEFT: ::std::os::raw::c_uint = 16;
pub const AV_CH_BACK_RIGHT: ::std::os::raw::c_uint = 32;
pub const AV_CH_FRONT_LEFT_OF_CENTER: ::std::os::raw::c_uint = 64;
pub const AV_CH_FRONT_RIGHT_OF_CENTER: ::std::os::raw::c_uint = 128;
pub const AV_CH_BACK_CENTER: ::std::os::raw::c_uint = 256;
pub const AV_CH_SIDE_LEFT: ::std::os::raw::c_uint = 512;
pub const AV_CH_SIDE_RIGHT: ::std::os::raw::c_uint = 1024;
pub const AV_CH_TOP_CENTER: ::std::os::raw::c_uint = 2048;
pub const AV_CH_TOP_FRONT_LEFT: ::std::os::raw::c_uint = 4096;
pub const AV_CH_TOP_FRONT_CENTER: ::std::os::raw::c_uint = 8192;
pub const AV_CH_TOP_FRONT_RIGHT: ::std::os::raw::c_uint = 16384;
pub const AV_CH_TOP_BACK_LEFT: ::std::os::raw::c_uint = 32768;
pub const AV_CH_TOP_BACK_CENTER: ::std::os::raw::c_uint = 65536;
pub const AV_CH_TOP_BACK_RIGHT: ::std::os::raw::c_uint = 131072;
pub const AV_CH_STEREO_LEFT: ::std::os::raw::c_uint = 536870912;
pub const AV_CH_STEREO_RIGHT: ::std::os::raw::c_uint = 1073741824;
pub const AV_CH_WIDE_LEFT: ::std::os::raw::c_uint = 2147483648;
pub const AV_CH_WIDE_RIGHT: ::std::os::raw::c_ulonglong = 4294967296;
pub const AV_CH_SURROUND_DIRECT_LEFT: ::std::os::raw::c_ulonglong =
    8589934592;
pub const AV_CH_SURROUND_DIRECT_RIGHT: ::std::os::raw::c_ulonglong =
    17179869184;
pub const AV_CH_LOW_FREQUENCY_2: ::std::os::raw::c_ulonglong = 34359738368;
pub const AV_CH_LAYOUT_NATIVE: ::std::os::raw::c_longlong =
    -9223372036854775808;
pub const AV_CH_LAYOUT_MONO: ::std::os::raw::c_uint = 4;
pub const AV_CH_LAYOUT_STEREO: ::std::os::raw::c_uint = 3;
pub const AV_CH_LAYOUT_2POINT1: ::std::os::raw::c_uint = 11;
pub const AV_CH_LAYOUT_2_1: ::std::os::raw::c_uint = 259;
pub const AV_CH_LAYOUT_SURROUND: ::std::os::raw::c_uint = 7;
pub const AV_CH_LAYOUT_3POINT1: ::std::os::raw::c_uint = 15;
pub const AV_CH_LAYOUT_4POINT0: ::std::os::raw::c_uint = 263;
pub const AV_CH_LAYOUT_4POINT1: ::std::os::raw::c_uint = 271;
pub const AV_CH_LAYOUT_2_2: ::std::os::raw::c_uint = 1539;
pub const AV_CH_LAYOUT_QUAD: ::std::os::raw::c_uint = 51;
pub const AV_CH_LAYOUT_5POINT0: ::std::os::raw::c_uint = 1543;
pub const AV_CH_LAYOUT_5POINT1: ::std::os::raw::c_uint = 1551;
pub const AV_CH_LAYOUT_5POINT0_BACK: ::std::os::raw::c_uint = 55;
pub const AV_CH_LAYOUT_5POINT1_BACK: ::std::os::raw::c_uint = 63;
pub const AV_CH_LAYOUT_6POINT0: ::std::os::raw::c_uint = 1799;
pub const AV_CH_LAYOUT_6POINT0_FRONT: ::std::os::raw::c_uint = 1731;
pub const AV_CH_LAYOUT_HEXAGONAL: ::std::os::raw::c_uint = 311;
pub const AV_CH_LAYOUT_6POINT1: ::std::os::raw::c_uint = 1807;
pub const AV_CH_LAYOUT_6POINT1_BACK: ::std::os::raw::c_uint = 319;
pub const AV_CH_LAYOUT_6POINT1_FRONT: ::std::os::raw::c_uint = 1739;
pub const AV_CH_LAYOUT_7POINT0: ::std::os::raw::c_uint = 1591;
pub const AV_CH_LAYOUT_7POINT0_FRONT: ::std::os::raw::c_uint = 1735;
pub const AV_CH_LAYOUT_7POINT1: ::std::os::raw::c_uint = 1599;
pub const AV_CH_LAYOUT_7POINT1_WIDE: ::std::os::raw::c_uint = 1743;
pub const AV_CH_LAYOUT_7POINT1_WIDE_BACK: ::std::os::raw::c_uint = 255;
pub const AV_CH_LAYOUT_OCTAGONAL: ::std::os::raw::c_uint = 1847;
pub const AV_CH_LAYOUT_HEXADECAGONAL: ::std::os::raw::c_ulonglong =
    6442710839;
pub const AV_CH_LAYOUT_STEREO_DOWNMIX: ::std::os::raw::c_uint = 1610612736;
pub const AV_DICT_MATCH_CASE: ::std::os::raw::c_uint = 1;
pub const AV_DICT_IGNORE_SUFFIX: ::std::os::raw::c_uint = 2;
pub const AV_DICT_DONT_STRDUP_KEY: ::std::os::raw::c_uint = 4;
pub const AV_DICT_DONT_STRDUP_VAL: ::std::os::raw::c_uint = 8;
pub const AV_DICT_DONT_OVERWRITE: ::std::os::raw::c_uint = 16;
pub const AV_DICT_APPEND: ::std::os::raw::c_uint = 32;
pub const AV_NUM_DATA_POINTERS: ::std::os::raw::c_uint = 8;
pub const AV_FRAME_FLAG_CORRUPT: ::std::os::raw::c_uint = 1;
pub const FF_DECODE_ERROR_INVALID_BITSTREAM: ::std::os::raw::c_uint = 1;
pub const FF_DECODE_ERROR_MISSING_REFERENCE: ::std::os::raw::c_uint = 2;
pub const LIBAVCODEC_VERSION_MAJOR: ::std::os::raw::c_uint = 56;
pub const LIBAVCODEC_VERSION_MINOR: ::std::os::raw::c_uint = 60;
pub const LIBAVCODEC_VERSION_MICRO: ::std::os::raw::c_uint = 100;
pub const AV_CODEC_PROP_INTRA_ONLY: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_PROP_LOSSY: ::std::os::raw::c_uint = 2;
pub const AV_CODEC_PROP_LOSSLESS: ::std::os::raw::c_uint = 4;
pub const AV_CODEC_PROP_REORDER: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_PROP_BITMAP_SUB: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_PROP_TEXT_SUB: ::std::os::raw::c_uint = 131072;
pub const AV_INPUT_BUFFER_PADDING_SIZE: ::std::os::raw::c_uint = 32;
pub const AV_INPUT_BUFFER_MIN_SIZE: ::std::os::raw::c_uint = 16384;
pub const FF_INPUT_BUFFER_PADDING_SIZE: ::std::os::raw::c_uint = 32;
pub const FF_MIN_BUFFER_SIZE: ::std::os::raw::c_uint = 16384;
pub const FF_MAX_B_FRAMES: ::std::os::raw::c_uint = 16;
pub const AV_CODEC_FLAG_UNALIGNED: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_FLAG_QSCALE: ::std::os::raw::c_uint = 2;
pub const AV_CODEC_FLAG_4MV: ::std::os::raw::c_uint = 4;
pub const AV_CODEC_FLAG_OUTPUT_CORRUPT: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_FLAG_QPEL: ::std::os::raw::c_uint = 16;
pub const AV_CODEC_FLAG_PASS1: ::std::os::raw::c_uint = 512;
pub const AV_CODEC_FLAG_PASS2: ::std::os::raw::c_uint = 1024;
pub const AV_CODEC_FLAG_LOOP_FILTER: ::std::os::raw::c_uint = 2048;
pub const AV_CODEC_FLAG_GRAY: ::std::os::raw::c_uint = 8192;
pub const AV_CODEC_FLAG_PSNR: ::std::os::raw::c_uint = 32768;
pub const AV_CODEC_FLAG_TRUNCATED: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_FLAG_INTERLACED_DCT: ::std::os::raw::c_uint = 262144;
pub const AV_CODEC_FLAG_LOW_DELAY: ::std::os::raw::c_uint = 524288;
pub const AV_CODEC_FLAG_GLOBAL_HEADER: ::std::os::raw::c_uint = 4194304;
pub const AV_CODEC_FLAG_BITEXACT: ::std::os::raw::c_uint = 8388608;
pub const AV_CODEC_FLAG_AC_PRED: ::std::os::raw::c_uint = 16777216;
pub const AV_CODEC_FLAG_INTERLACED_ME: ::std::os::raw::c_uint = 536870912;
pub const AV_CODEC_FLAG_CLOSED_GOP: ::std::os::raw::c_uint = 2147483648;
pub const AV_CODEC_FLAG2_FAST: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_FLAG2_NO_OUTPUT: ::std::os::raw::c_uint = 4;
pub const AV_CODEC_FLAG2_LOCAL_HEADER: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_FLAG2_DROP_FRAME_TIMECODE: ::std::os::raw::c_uint = 8192;
pub const AV_CODEC_FLAG2_CHUNKS: ::std::os::raw::c_uint = 32768;
pub const AV_CODEC_FLAG2_IGNORE_CROP: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_FLAG2_SHOW_ALL: ::std::os::raw::c_uint = 4194304;
pub const AV_CODEC_FLAG2_EXPORT_MVS: ::std::os::raw::c_uint = 268435456;
pub const AV_CODEC_FLAG2_SKIP_MANUAL: ::std::os::raw::c_uint = 536870912;
pub const AV_CODEC_CAP_DRAW_HORIZ_BAND: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_CAP_DR1: ::std::os::raw::c_uint = 2;
pub const AV_CODEC_CAP_TRUNCATED: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_CAP_DELAY: ::std::os::raw::c_uint = 32;
pub const AV_CODEC_CAP_SMALL_LAST_FRAME: ::std::os::raw::c_uint = 64;
pub const AV_CODEC_CAP_HWACCEL_VDPAU: ::std::os::raw::c_uint = 128;
pub const AV_CODEC_CAP_SUBFRAMES: ::std::os::raw::c_uint = 256;
pub const AV_CODEC_CAP_EXPERIMENTAL: ::std::os::raw::c_uint = 512;
pub const AV_CODEC_CAP_CHANNEL_CONF: ::std::os::raw::c_uint = 1024;
pub const AV_CODEC_CAP_FRAME_THREADS: ::std::os::raw::c_uint = 4096;
pub const AV_CODEC_CAP_SLICE_THREADS: ::std::os::raw::c_uint = 8192;
pub const AV_CODEC_CAP_PARAM_CHANGE: ::std::os::raw::c_uint = 16384;
pub const AV_CODEC_CAP_AUTO_THREADS: ::std::os::raw::c_uint = 32768;
pub const AV_CODEC_CAP_VARIABLE_FRAME_SIZE: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_CAP_INTRA_ONLY: ::std::os::raw::c_uint = 1073741824;
pub const AV_CODEC_CAP_LOSSLESS: ::std::os::raw::c_uint = 2147483648;
pub const CODEC_FLAG_UNALIGNED: ::std::os::raw::c_uint = 1;
pub const CODEC_FLAG_QSCALE: ::std::os::raw::c_uint = 2;
pub const CODEC_FLAG_4MV: ::std::os::raw::c_uint = 4;
pub const CODEC_FLAG_OUTPUT_CORRUPT: ::std::os::raw::c_uint = 8;
pub const CODEC_FLAG_QPEL: ::std::os::raw::c_uint = 16;
pub const CODEC_FLAG_GMC: ::std::os::raw::c_uint = 32;
pub const CODEC_FLAG_MV0: ::std::os::raw::c_uint = 64;
pub const CODEC_FLAG_INPUT_PRESERVED: ::std::os::raw::c_uint = 256;
pub const CODEC_FLAG_PASS1: ::std::os::raw::c_uint = 512;
pub const CODEC_FLAG_PASS2: ::std::os::raw::c_uint = 1024;
pub const CODEC_FLAG_GRAY: ::std::os::raw::c_uint = 8192;
pub const CODEC_FLAG_EMU_EDGE: ::std::os::raw::c_uint = 16384;
pub const CODEC_FLAG_PSNR: ::std::os::raw::c_uint = 32768;
pub const CODEC_FLAG_TRUNCATED: ::std::os::raw::c_uint = 65536;
pub const CODEC_FLAG_NORMALIZE_AQP: ::std::os::raw::c_uint = 131072;
pub const CODEC_FLAG_INTERLACED_DCT: ::std::os::raw::c_uint = 262144;
pub const CODEC_FLAG_LOW_DELAY: ::std::os::raw::c_uint = 524288;
pub const CODEC_FLAG_GLOBAL_HEADER: ::std::os::raw::c_uint = 4194304;
pub const CODEC_FLAG_BITEXACT: ::std::os::raw::c_uint = 8388608;
pub const CODEC_FLAG_AC_PRED: ::std::os::raw::c_uint = 16777216;
pub const CODEC_FLAG_LOOP_FILTER: ::std::os::raw::c_uint = 2048;
pub const CODEC_FLAG_INTERLACED_ME: ::std::os::raw::c_uint = 536870912;
pub const CODEC_FLAG_CLOSED_GOP: ::std::os::raw::c_uint = 2147483648;
pub const CODEC_FLAG2_FAST: ::std::os::raw::c_uint = 1;
pub const CODEC_FLAG2_NO_OUTPUT: ::std::os::raw::c_uint = 4;
pub const CODEC_FLAG2_LOCAL_HEADER: ::std::os::raw::c_uint = 8;
pub const CODEC_FLAG2_DROP_FRAME_TIMECODE: ::std::os::raw::c_uint = 8192;
pub const CODEC_FLAG2_IGNORE_CROP: ::std::os::raw::c_uint = 65536;
pub const CODEC_FLAG2_CHUNKS: ::std::os::raw::c_uint = 32768;
pub const CODEC_FLAG2_SHOW_ALL: ::std::os::raw::c_uint = 4194304;
pub const CODEC_FLAG2_EXPORT_MVS: ::std::os::raw::c_uint = 268435456;
pub const CODEC_FLAG2_SKIP_MANUAL: ::std::os::raw::c_uint = 536870912;
pub const CODEC_CAP_DRAW_HORIZ_BAND: ::std::os::raw::c_uint = 1;
pub const CODEC_CAP_DR1: ::std::os::raw::c_uint = 2;
pub const CODEC_CAP_TRUNCATED: ::std::os::raw::c_uint = 8;
pub const CODEC_CAP_HWACCEL: ::std::os::raw::c_uint = 16;
pub const CODEC_CAP_DELAY: ::std::os::raw::c_uint = 32;
pub const CODEC_CAP_SMALL_LAST_FRAME: ::std::os::raw::c_uint = 64;
pub const CODEC_CAP_HWACCEL_VDPAU: ::std::os::raw::c_uint = 128;
pub const CODEC_CAP_SUBFRAMES: ::std::os::raw::c_uint = 256;
pub const CODEC_CAP_EXPERIMENTAL: ::std::os::raw::c_uint = 512;
pub const CODEC_CAP_CHANNEL_CONF: ::std::os::raw::c_uint = 1024;
pub const CODEC_CAP_NEG_LINESIZES: ::std::os::raw::c_uint = 2048;
pub const CODEC_CAP_FRAME_THREADS: ::std::os::raw::c_uint = 4096;
pub const CODEC_CAP_SLICE_THREADS: ::std::os::raw::c_uint = 8192;
pub const CODEC_CAP_PARAM_CHANGE: ::std::os::raw::c_uint = 16384;
pub const CODEC_CAP_AUTO_THREADS: ::std::os::raw::c_uint = 32768;
pub const CODEC_CAP_VARIABLE_FRAME_SIZE: ::std::os::raw::c_uint = 65536;
pub const CODEC_CAP_INTRA_ONLY: ::std::os::raw::c_uint = 1073741824;
pub const CODEC_CAP_LOSSLESS: ::std::os::raw::c_uint = 2147483648;
pub const HWACCEL_CODEC_CAP_EXPERIMENTAL: ::std::os::raw::c_uint = 512;
pub const MB_TYPE_INTRA4x4: ::std::os::raw::c_uint = 1;
pub const MB_TYPE_INTRA16x16: ::std::os::raw::c_uint = 2;
pub const MB_TYPE_INTRA_PCM: ::std::os::raw::c_uint = 4;
pub const MB_TYPE_16x16: ::std::os::raw::c_uint = 8;
pub const MB_TYPE_16x8: ::std::os::raw::c_uint = 16;
pub const MB_TYPE_8x16: ::std::os::raw::c_uint = 32;
pub const MB_TYPE_8x8: ::std::os::raw::c_uint = 64;
pub const MB_TYPE_INTERLACED: ::std::os::raw::c_uint = 128;
pub const MB_TYPE_DIRECT2: ::std::os::raw::c_uint = 256;
pub const MB_TYPE_ACPRED: ::std::os::raw::c_uint = 512;
pub const MB_TYPE_GMC: ::std::os::raw::c_uint = 1024;
pub const MB_TYPE_SKIP: ::std::os::raw::c_uint = 2048;
pub const MB_TYPE_P0L0: ::std::os::raw::c_uint = 4096;
pub const MB_TYPE_P1L0: ::std::os::raw::c_uint = 8192;
pub const MB_TYPE_P0L1: ::std::os::raw::c_uint = 16384;
pub const MB_TYPE_P1L1: ::std::os::raw::c_uint = 32768;
pub const MB_TYPE_L0: ::std::os::raw::c_uint = 12288;
pub const MB_TYPE_L1: ::std::os::raw::c_uint = 49152;
pub const MB_TYPE_L0L1: ::std::os::raw::c_uint = 61440;
pub const MB_TYPE_QUANT: ::std::os::raw::c_uint = 65536;
pub const MB_TYPE_CBP: ::std::os::raw::c_uint = 131072;
pub const FF_QSCALE_TYPE_MPEG1: ::std::os::raw::c_uint = 0;
pub const FF_QSCALE_TYPE_MPEG2: ::std::os::raw::c_uint = 1;
pub const FF_QSCALE_TYPE_H264: ::std::os::raw::c_uint = 2;
pub const FF_QSCALE_TYPE_VP56: ::std::os::raw::c_uint = 3;
pub const FF_BUFFER_TYPE_INTERNAL: ::std::os::raw::c_uint = 1;
pub const FF_BUFFER_TYPE_USER: ::std::os::raw::c_uint = 2;
pub const FF_BUFFER_TYPE_SHARED: ::std::os::raw::c_uint = 4;
pub const FF_BUFFER_TYPE_COPY: ::std::os::raw::c_uint = 8;
pub const FF_BUFFER_HINTS_VALID: ::std::os::raw::c_uint = 1;
pub const FF_BUFFER_HINTS_READABLE: ::std::os::raw::c_uint = 2;
pub const FF_BUFFER_HINTS_PRESERVE: ::std::os::raw::c_uint = 4;
pub const FF_BUFFER_HINTS_REUSABLE: ::std::os::raw::c_uint = 8;
pub const AV_GET_BUFFER_FLAG_REF: ::std::os::raw::c_uint = 1;
pub const AV_PKT_FLAG_KEY: ::std::os::raw::c_uint = 1;
pub const AV_PKT_FLAG_CORRUPT: ::std::os::raw::c_uint = 2;
pub const FF_COMPRESSION_DEFAULT: ::std::os::raw::c_int = -1;
pub const FF_ASPECT_EXTENDED: ::std::os::raw::c_uint = 15;
pub const FF_RC_STRATEGY_XVID: ::std::os::raw::c_uint = 1;
pub const FF_PRED_LEFT: ::std::os::raw::c_uint = 0;
pub const FF_PRED_PLANE: ::std::os::raw::c_uint = 1;
pub const FF_PRED_MEDIAN: ::std::os::raw::c_uint = 2;
pub const FF_CMP_SAD: ::std::os::raw::c_uint = 0;
pub const FF_CMP_SSE: ::std::os::raw::c_uint = 1;
pub const FF_CMP_SATD: ::std::os::raw::c_uint = 2;
pub const FF_CMP_DCT: ::std::os::raw::c_uint = 3;
pub const FF_CMP_PSNR: ::std::os::raw::c_uint = 4;
pub const FF_CMP_BIT: ::std::os::raw::c_uint = 5;
pub const FF_CMP_RD: ::std::os::raw::c_uint = 6;
pub const FF_CMP_ZERO: ::std::os::raw::c_uint = 7;
pub const FF_CMP_VSAD: ::std::os::raw::c_uint = 8;
pub const FF_CMP_VSSE: ::std::os::raw::c_uint = 9;
pub const FF_CMP_NSSE: ::std::os::raw::c_uint = 10;
pub const FF_CMP_W53: ::std::os::raw::c_uint = 11;
pub const FF_CMP_W97: ::std::os::raw::c_uint = 12;
pub const FF_CMP_DCTMAX: ::std::os::raw::c_uint = 13;
pub const FF_CMP_DCT264: ::std::os::raw::c_uint = 14;
pub const FF_CMP_CHROMA: ::std::os::raw::c_uint = 256;
pub const FF_DTG_AFD_SAME: ::std::os::raw::c_uint = 8;
pub const FF_DTG_AFD_4_3: ::std::os::raw::c_uint = 9;
pub const FF_DTG_AFD_16_9: ::std::os::raw::c_uint = 10;
pub const FF_DTG_AFD_14_9: ::std::os::raw::c_uint = 11;
pub const FF_DTG_AFD_4_3_SP_14_9: ::std::os::raw::c_uint = 13;
pub const FF_DTG_AFD_16_9_SP_14_9: ::std::os::raw::c_uint = 14;
pub const FF_DTG_AFD_SP_4_3: ::std::os::raw::c_uint = 15;
pub const FF_DEFAULT_QUANT_BIAS: ::std::os::raw::c_uint = 999999;
pub const SLICE_FLAG_CODED_ORDER: ::std::os::raw::c_uint = 1;
pub const SLICE_FLAG_ALLOW_FIELD: ::std::os::raw::c_uint = 2;
pub const SLICE_FLAG_ALLOW_PLANE: ::std::os::raw::c_uint = 4;
pub const FF_MB_DECISION_SIMPLE: ::std::os::raw::c_uint = 0;
pub const FF_MB_DECISION_BITS: ::std::os::raw::c_uint = 1;
pub const FF_MB_DECISION_RD: ::std::os::raw::c_uint = 2;
pub const FF_CODER_TYPE_VLC: ::std::os::raw::c_uint = 0;
pub const FF_CODER_TYPE_AC: ::std::os::raw::c_uint = 1;
pub const FF_CODER_TYPE_RAW: ::std::os::raw::c_uint = 2;
pub const FF_CODER_TYPE_RLE: ::std::os::raw::c_uint = 3;
pub const FF_CODER_TYPE_DEFLATE: ::std::os::raw::c_uint = 4;
pub const FF_BUG_AUTODETECT: ::std::os::raw::c_uint = 1;
pub const FF_BUG_OLD_MSMPEG4: ::std::os::raw::c_uint = 2;
pub const FF_BUG_XVID_ILACE: ::std::os::raw::c_uint = 4;
pub const FF_BUG_UMP4: ::std::os::raw::c_uint = 8;
pub const FF_BUG_NO_PADDING: ::std::os::raw::c_uint = 16;
pub const FF_BUG_AMV: ::std::os::raw::c_uint = 32;
pub const FF_BUG_AC_VLC: ::std::os::raw::c_uint = 0;
pub const FF_BUG_QPEL_CHROMA: ::std::os::raw::c_uint = 64;
pub const FF_BUG_STD_QPEL: ::std::os::raw::c_uint = 128;
pub const FF_BUG_QPEL_CHROMA2: ::std::os::raw::c_uint = 256;
pub const FF_BUG_DIRECT_BLOCKSIZE: ::std::os::raw::c_uint = 512;
pub const FF_BUG_EDGE: ::std::os::raw::c_uint = 1024;
pub const FF_BUG_HPEL_CHROMA: ::std::os::raw::c_uint = 2048;
pub const FF_BUG_DC_CLIP: ::std::os::raw::c_uint = 4096;
pub const FF_BUG_MS: ::std::os::raw::c_uint = 8192;
pub const FF_BUG_TRUNCATED: ::std::os::raw::c_uint = 16384;
pub const FF_COMPLIANCE_VERY_STRICT: ::std::os::raw::c_uint = 2;
pub const FF_COMPLIANCE_STRICT: ::std::os::raw::c_uint = 1;
pub const FF_COMPLIANCE_NORMAL: ::std::os::raw::c_uint = 0;
pub const FF_COMPLIANCE_UNOFFICIAL: ::std::os::raw::c_int = -1;
pub const FF_COMPLIANCE_EXPERIMENTAL: ::std::os::raw::c_int = -2;
pub const FF_EC_GUESS_MVS: ::std::os::raw::c_uint = 1;
pub const FF_EC_DEBLOCK: ::std::os::raw::c_uint = 2;
pub const FF_EC_FAVOR_INTER: ::std::os::raw::c_uint = 256;
pub const FF_DEBUG_PICT_INFO: ::std::os::raw::c_uint = 1;
pub const FF_DEBUG_RC: ::std::os::raw::c_uint = 2;
pub const FF_DEBUG_BITSTREAM: ::std::os::raw::c_uint = 4;
pub const FF_DEBUG_MB_TYPE: ::std::os::raw::c_uint = 8;
pub const FF_DEBUG_QP: ::std::os::raw::c_uint = 16;
pub const FF_DEBUG_MV: ::std::os::raw::c_uint = 32;
pub const FF_DEBUG_DCT_COEFF: ::std::os::raw::c_uint = 64;
pub const FF_DEBUG_SKIP: ::std::os::raw::c_uint = 128;
pub const FF_DEBUG_STARTCODE: ::std::os::raw::c_uint = 256;
pub const FF_DEBUG_PTS: ::std::os::raw::c_uint = 512;
pub const FF_DEBUG_ER: ::std::os::raw::c_uint = 1024;
pub const FF_DEBUG_MMCO: ::std::os::raw::c_uint = 2048;
pub const FF_DEBUG_BUGS: ::std::os::raw::c_uint = 4096;
pub const FF_DEBUG_VIS_QP: ::std::os::raw::c_uint = 8192;
pub const FF_DEBUG_VIS_MB_TYPE: ::std::os::raw::c_uint = 16384;
pub const FF_DEBUG_BUFFERS: ::std::os::raw::c_uint = 32768;
pub const FF_DEBUG_THREADS: ::std::os::raw::c_uint = 65536;
pub const FF_DEBUG_GREEN_MD: ::std::os::raw::c_uint = 8388608;
pub const FF_DEBUG_NOMC: ::std::os::raw::c_uint = 16777216;
pub const FF_DEBUG_VIS_MV_P_FOR: ::std::os::raw::c_uint = 1;
pub const FF_DEBUG_VIS_MV_B_FOR: ::std::os::raw::c_uint = 2;
pub const FF_DEBUG_VIS_MV_B_BACK: ::std::os::raw::c_uint = 4;
pub const AV_EF_CRCCHECK: ::std::os::raw::c_uint = 1;
pub const AV_EF_BITSTREAM: ::std::os::raw::c_uint = 2;
pub const AV_EF_BUFFER: ::std::os::raw::c_uint = 4;
pub const AV_EF_EXPLODE: ::std::os::raw::c_uint = 8;
pub const AV_EF_IGNORE_ERR: ::std::os::raw::c_uint = 32768;
pub const AV_EF_CAREFUL: ::std::os::raw::c_uint = 65536;
pub const AV_EF_COMPLIANT: ::std::os::raw::c_uint = 131072;
pub const AV_EF_AGGRESSIVE: ::std::os::raw::c_uint = 262144;
pub const FF_DCT_AUTO: ::std::os::raw::c_uint = 0;
pub const FF_DCT_FASTINT: ::std::os::raw::c_uint = 1;
pub const FF_DCT_INT: ::std::os::raw::c_uint = 2;
pub const FF_DCT_MMX: ::std::os::raw::c_uint = 3;
pub const FF_DCT_ALTIVEC: ::std::os::raw::c_uint = 5;
pub const FF_DCT_FAAN: ::std::os::raw::c_uint = 6;
pub const FF_IDCT_AUTO: ::std::os::raw::c_uint = 0;
pub const FF_IDCT_INT: ::std::os::raw::c_uint = 1;
pub const FF_IDCT_SIMPLE: ::std::os::raw::c_uint = 2;
pub const FF_IDCT_SIMPLEMMX: ::std::os::raw::c_uint = 3;
pub const FF_IDCT_ARM: ::std::os::raw::c_uint = 7;
pub const FF_IDCT_ALTIVEC: ::std::os::raw::c_uint = 8;
pub const FF_IDCT_SH4: ::std::os::raw::c_uint = 9;
pub const FF_IDCT_SIMPLEARM: ::std::os::raw::c_uint = 10;
pub const FF_IDCT_IPP: ::std::os::raw::c_uint = 13;
pub const FF_IDCT_XVID: ::std::os::raw::c_uint = 14;
pub const FF_IDCT_XVIDMMX: ::std::os::raw::c_uint = 14;
pub const FF_IDCT_SIMPLEARMV5TE: ::std::os::raw::c_uint = 16;
pub const FF_IDCT_SIMPLEARMV6: ::std::os::raw::c_uint = 17;
pub const FF_IDCT_SIMPLEVIS: ::std::os::raw::c_uint = 18;
pub const FF_IDCT_FAAN: ::std::os::raw::c_uint = 20;
pub const FF_IDCT_SIMPLENEON: ::std::os::raw::c_uint = 22;
pub const FF_IDCT_SIMPLEALPHA: ::std::os::raw::c_uint = 23;
pub const FF_IDCT_SIMPLEAUTO: ::std::os::raw::c_uint = 128;
pub const FF_THREAD_FRAME: ::std::os::raw::c_uint = 1;
pub const FF_THREAD_SLICE: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_UNKNOWN: ::std::os::raw::c_int = -99;
pub const FF_PROFILE_RESERVED: ::std::os::raw::c_int = -100;
pub const FF_PROFILE_AAC_MAIN: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_AAC_LOW: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_AAC_SSR: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_AAC_LTP: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_AAC_HE: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_AAC_HE_V2: ::std::os::raw::c_uint = 28;
pub const FF_PROFILE_AAC_LD: ::std::os::raw::c_uint = 22;
pub const FF_PROFILE_AAC_ELD: ::std::os::raw::c_uint = 38;
pub const FF_PROFILE_MPEG2_AAC_LOW: ::std::os::raw::c_uint = 128;
pub const FF_PROFILE_MPEG2_AAC_HE: ::std::os::raw::c_uint = 131;
pub const FF_PROFILE_DTS: ::std::os::raw::c_uint = 20;
pub const FF_PROFILE_DTS_ES: ::std::os::raw::c_uint = 30;
pub const FF_PROFILE_DTS_96_24: ::std::os::raw::c_uint = 40;
pub const FF_PROFILE_DTS_HD_HRA: ::std::os::raw::c_uint = 50;
pub const FF_PROFILE_DTS_HD_MA: ::std::os::raw::c_uint = 60;
pub const FF_PROFILE_DTS_EXPRESS: ::std::os::raw::c_uint = 70;
pub const FF_PROFILE_MPEG2_422: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_MPEG2_HIGH: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_MPEG2_SS: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_MPEG2_SNR_SCALABLE: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_MPEG2_MAIN: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_MPEG2_SIMPLE: ::std::os::raw::c_uint = 5;
pub const FF_PROFILE_H264_CONSTRAINED: ::std::os::raw::c_uint = 512;
pub const FF_PROFILE_H264_INTRA: ::std::os::raw::c_uint = 2048;
pub const FF_PROFILE_H264_BASELINE: ::std::os::raw::c_uint = 66;
pub const FF_PROFILE_H264_CONSTRAINED_BASELINE: ::std::os::raw::c_uint = 578;
pub const FF_PROFILE_H264_MAIN: ::std::os::raw::c_uint = 77;
pub const FF_PROFILE_H264_EXTENDED: ::std::os::raw::c_uint = 88;
pub const FF_PROFILE_H264_HIGH: ::std::os::raw::c_uint = 100;
pub const FF_PROFILE_H264_HIGH_10: ::std::os::raw::c_uint = 110;
pub const FF_PROFILE_H264_HIGH_10_INTRA: ::std::os::raw::c_uint = 2158;
pub const FF_PROFILE_H264_HIGH_422: ::std::os::raw::c_uint = 122;
pub const FF_PROFILE_H264_HIGH_422_INTRA: ::std::os::raw::c_uint = 2170;
pub const FF_PROFILE_H264_HIGH_444: ::std::os::raw::c_uint = 144;
pub const FF_PROFILE_H264_HIGH_444_PREDICTIVE: ::std::os::raw::c_uint = 244;
pub const FF_PROFILE_H264_HIGH_444_INTRA: ::std::os::raw::c_uint = 2292;
pub const FF_PROFILE_H264_CAVLC_444: ::std::os::raw::c_uint = 44;
pub const FF_PROFILE_VC1_SIMPLE: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_VC1_MAIN: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_VC1_COMPLEX: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_VC1_ADVANCED: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_MPEG4_SIMPLE: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_MPEG4_SIMPLE_SCALABLE: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_MPEG4_CORE: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_MPEG4_MAIN: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_MPEG4_N_BIT: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_MPEG4_SCALABLE_TEXTURE: ::std::os::raw::c_uint = 5;
pub const FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION: ::std::os::raw::c_uint = 6;
pub const FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE: ::std::os::raw::c_uint = 7;
pub const FF_PROFILE_MPEG4_HYBRID: ::std::os::raw::c_uint = 8;
pub const FF_PROFILE_MPEG4_ADVANCED_REAL_TIME: ::std::os::raw::c_uint = 9;
pub const FF_PROFILE_MPEG4_CORE_SCALABLE: ::std::os::raw::c_uint = 10;
pub const FF_PROFILE_MPEG4_ADVANCED_CODING: ::std::os::raw::c_uint = 11;
pub const FF_PROFILE_MPEG4_ADVANCED_CORE: ::std::os::raw::c_uint = 12;
pub const FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE: ::std::os::raw::c_uint =
    13;
pub const FF_PROFILE_MPEG4_SIMPLE_STUDIO: ::std::os::raw::c_uint = 14;
pub const FF_PROFILE_MPEG4_ADVANCED_SIMPLE: ::std::os::raw::c_uint = 15;
pub const FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0: ::std::os::raw::c_uint =
    0;
pub const FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1: ::std::os::raw::c_uint =
    1;
pub const FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION: ::std::os::raw::c_uint =
    2;
pub const FF_PROFILE_JPEG2000_DCINEMA_2K: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_JPEG2000_DCINEMA_4K: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_VP9_0: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_VP9_1: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_VP9_2: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_VP9_3: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_HEVC_MAIN: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_HEVC_MAIN_10: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_HEVC_MAIN_STILL_PICTURE: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_HEVC_REXT: ::std::os::raw::c_uint = 4;
pub const FF_LEVEL_UNKNOWN: ::std::os::raw::c_int = -99;
pub const FF_SUB_CHARENC_MODE_DO_NOTHING: ::std::os::raw::c_int = -1;
pub const FF_SUB_CHARENC_MODE_AUTOMATIC: ::std::os::raw::c_uint = 0;
pub const FF_SUB_CHARENC_MODE_PRE_DECODER: ::std::os::raw::c_uint = 1;
pub const FF_CODEC_PROPERTY_LOSSLESS: ::std::os::raw::c_uint = 1;
pub const AV_HWACCEL_FLAG_IGNORE_LEVEL: ::std::os::raw::c_uint = 1;
pub const AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH: ::std::os::raw::c_uint = 2;
pub const AV_SUBTITLE_FLAG_FORCED: ::std::os::raw::c_uint = 1;
pub const AV_PARSER_PTS_NB: ::std::os::raw::c_uint = 4;
pub const PARSER_FLAG_COMPLETE_FRAMES: ::std::os::raw::c_uint = 1;
pub const PARSER_FLAG_ONCE: ::std::os::raw::c_uint = 2;
pub const PARSER_FLAG_FETCHED_OFFSET: ::std::os::raw::c_uint = 4;
pub const LIBAVFORMAT_VERSION_MAJOR: ::std::os::raw::c_uint = 56;
pub const LIBAVFORMAT_VERSION_MINOR: ::std::os::raw::c_uint = 40;
pub const LIBAVFORMAT_VERSION_MICRO: ::std::os::raw::c_uint = 101;
pub const FF_API_R_FRAME_RATE: ::std::os::raw::c_uint = 1;
pub const AVIO_SEEKABLE_NORMAL: ::std::os::raw::c_uint = 1;
pub const AVSEEK_SIZE: ::std::os::raw::c_uint = 65536;
pub const AVSEEK_FORCE: ::std::os::raw::c_uint = 131072;
pub const AVIO_FLAG_READ: ::std::os::raw::c_uint = 1;
pub const AVIO_FLAG_WRITE: ::std::os::raw::c_uint = 2;
pub const AVIO_FLAG_READ_WRITE: ::std::os::raw::c_uint = 3;
pub const AVIO_FLAG_NONBLOCK: ::std::os::raw::c_uint = 8;
pub const AVIO_FLAG_DIRECT: ::std::os::raw::c_uint = 32768;
pub const AVPROBE_SCORE_EXTENSION: ::std::os::raw::c_uint = 50;
pub const AVPROBE_SCORE_MIME: ::std::os::raw::c_uint = 75;
pub const AVPROBE_SCORE_MAX: ::std::os::raw::c_uint = 100;
pub const AVPROBE_PADDING_SIZE: ::std::os::raw::c_uint = 32;
pub const AVFMT_NOFILE: ::std::os::raw::c_uint = 1;
pub const AVFMT_NEEDNUMBER: ::std::os::raw::c_uint = 2;
pub const AVFMT_SHOW_IDS: ::std::os::raw::c_uint = 8;
pub const AVFMT_RAWPICTURE: ::std::os::raw::c_uint = 32;
pub const AVFMT_GLOBALHEADER: ::std::os::raw::c_uint = 64;
pub const AVFMT_NOTIMESTAMPS: ::std::os::raw::c_uint = 128;
pub const AVFMT_GENERIC_INDEX: ::std::os::raw::c_uint = 256;
pub const AVFMT_TS_DISCONT: ::std::os::raw::c_uint = 512;
pub const AVFMT_VARIABLE_FPS: ::std::os::raw::c_uint = 1024;
pub const AVFMT_NODIMENSIONS: ::std::os::raw::c_uint = 2048;
pub const AVFMT_NOSTREAMS: ::std::os::raw::c_uint = 4096;
pub const AVFMT_NOBINSEARCH: ::std::os::raw::c_uint = 8192;
pub const AVFMT_NOGENSEARCH: ::std::os::raw::c_uint = 16384;
pub const AVFMT_NO_BYTE_SEEK: ::std::os::raw::c_uint = 32768;
pub const AVFMT_ALLOW_FLUSH: ::std::os::raw::c_uint = 65536;
pub const AVFMT_TS_NONSTRICT: ::std::os::raw::c_uint = 131072;
pub const AVFMT_TS_NEGATIVE: ::std::os::raw::c_uint = 262144;
pub const AVFMT_SEEK_TO_PTS: ::std::os::raw::c_uint = 67108864;
pub const AVINDEX_KEYFRAME: ::std::os::raw::c_uint = 1;
pub const AV_DISPOSITION_DEFAULT: ::std::os::raw::c_uint = 1;
pub const AV_DISPOSITION_DUB: ::std::os::raw::c_uint = 2;
pub const AV_DISPOSITION_ORIGINAL: ::std::os::raw::c_uint = 4;
pub const AV_DISPOSITION_COMMENT: ::std::os::raw::c_uint = 8;
pub const AV_DISPOSITION_LYRICS: ::std::os::raw::c_uint = 16;
pub const AV_DISPOSITION_KARAOKE: ::std::os::raw::c_uint = 32;
pub const AV_DISPOSITION_FORCED: ::std::os::raw::c_uint = 64;
pub const AV_DISPOSITION_HEARING_IMPAIRED: ::std::os::raw::c_uint = 128;
pub const AV_DISPOSITION_VISUAL_IMPAIRED: ::std::os::raw::c_uint = 256;
pub const AV_DISPOSITION_CLEAN_EFFECTS: ::std::os::raw::c_uint = 512;
pub const AV_DISPOSITION_ATTACHED_PIC: ::std::os::raw::c_uint = 1024;
pub const AV_DISPOSITION_CAPTIONS: ::std::os::raw::c_uint = 65536;
pub const AV_DISPOSITION_DESCRIPTIONS: ::std::os::raw::c_uint = 131072;
pub const AV_DISPOSITION_METADATA: ::std::os::raw::c_uint = 262144;
pub const AV_PTS_WRAP_IGNORE: ::std::os::raw::c_uint = 0;
pub const AV_PTS_WRAP_ADD_OFFSET: ::std::os::raw::c_uint = 1;
pub const AV_PTS_WRAP_SUB_OFFSET: ::std::os::raw::c_int = -1;
pub const AVSTREAM_EVENT_FLAG_METADATA_UPDATED: ::std::os::raw::c_uint = 1;
pub const MAX_STD_TIMEBASES: ::std::os::raw::c_uint = 399;
pub const AV_PROGRAM_RUNNING: ::std::os::raw::c_uint = 1;
pub const AVFMTCTX_NOHEADER: ::std::os::raw::c_uint = 1;
pub const AVFMT_FLAG_GENPTS: ::std::os::raw::c_uint = 1;
pub const AVFMT_FLAG_IGNIDX: ::std::os::raw::c_uint = 2;
pub const AVFMT_FLAG_NONBLOCK: ::std::os::raw::c_uint = 4;
pub const AVFMT_FLAG_IGNDTS: ::std::os::raw::c_uint = 8;
pub const AVFMT_FLAG_NOFILLIN: ::std::os::raw::c_uint = 16;
pub const AVFMT_FLAG_NOPARSE: ::std::os::raw::c_uint = 32;
pub const AVFMT_FLAG_NOBUFFER: ::std::os::raw::c_uint = 64;
pub const AVFMT_FLAG_CUSTOM_IO: ::std::os::raw::c_uint = 128;
pub const AVFMT_FLAG_DISCARD_CORRUPT: ::std::os::raw::c_uint = 256;
pub const AVFMT_FLAG_FLUSH_PACKETS: ::std::os::raw::c_uint = 512;
pub const AVFMT_FLAG_BITEXACT: ::std::os::raw::c_uint = 1024;
pub const AVFMT_FLAG_MP4A_LATM: ::std::os::raw::c_uint = 32768;
pub const AVFMT_FLAG_SORT_DTS: ::std::os::raw::c_uint = 65536;
pub const AVFMT_FLAG_PRIV_OPT: ::std::os::raw::c_uint = 131072;
pub const AVFMT_FLAG_KEEP_SIDE_DATA: ::std::os::raw::c_uint = 262144;
pub const AVFMT_FLAG_FAST_SEEK: ::std::os::raw::c_uint = 524288;
pub const FF_FDEBUG_TS: ::std::os::raw::c_uint = 1;
pub const AVFMT_EVENT_FLAG_METADATA_UPDATED: ::std::os::raw::c_uint = 1;
pub const AVFMT_AVOID_NEG_TS_AUTO: ::std::os::raw::c_int = -1;
pub const AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE: ::std::os::raw::c_uint = 1;
pub const AVFMT_AVOID_NEG_TS_MAKE_ZERO: ::std::os::raw::c_uint = 2;
pub const AVSEEK_FLAG_BACKWARD: ::std::os::raw::c_uint = 1;
pub const AVSEEK_FLAG_BYTE: ::std::os::raw::c_uint = 2;
pub const AVSEEK_FLAG_ANY: ::std::os::raw::c_uint = 4;
pub const AVSEEK_FLAG_FRAME: ::std::os::raw::c_uint = 8;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_1>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_1>() , 4usize);
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
pub type __fsid_t = _bindgen_ty_1;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize);
    assert_eq!(::std::mem::align_of::<timespec>() , 8usize);
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize);
    assert_eq!(::std::mem::align_of::<tm>() , 8usize);
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize);
    assert_eq!(::std::mem::align_of::<itimerspec>() , 8usize);
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent([u8; 0]);
pub type pid_t = __pid_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct___locale_data([u8; 0]);
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize);
    assert_eq!(::std::mem::align_of::<__locale_struct>() , 8usize);
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize);
    assert_eq!(::std::mem::align_of::<_IO_FILE>() , 8usize);
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_2 {
    pub __count: ::std::os::raw::c_int,
    pub __value: _bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_2__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_2__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2>() , 4usize);
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
pub type __mbstate_t = _bindgen_ty_2;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_3 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>() , 8usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos_t = _bindgen_ty_3;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_4 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 8usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos64_t = _bindgen_ty_4;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t([u8; 0]);
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize);
    assert_eq!(::std::mem::align_of::<_IO_marker>() , 8usize);
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus([u8; 0]);
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    /**
 * Return the LIBAVUTIL_VERSION_INT constant.
 */
    pub fn avutil_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * Return an informative version string. This usually is the actual release
 * version number or a git commit description. This string has no fixed format
 * and can change any time. It should never be parsed by code.
 */
    pub fn av_version_info() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Return the libavutil build-time configuration.
 */
    pub fn avutil_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Return the libavutil license.
 */
    pub fn avutil_license() -> *const ::std::os::raw::c_char;
}
#[repr(i32)]
/**
 * @addtogroup lavu_media Media Type
 * @brief Media Type
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVMediaType {
    AVMEDIA_TYPE_UNKNOWN = -1,
    AVMEDIA_TYPE_VIDEO = 0,
    AVMEDIA_TYPE_AUDIO = 1,
    AVMEDIA_TYPE_DATA = 2,
    AVMEDIA_TYPE_SUBTITLE = 3,
    AVMEDIA_TYPE_ATTACHMENT = 4,
    AVMEDIA_TYPE_NB = 5,
}
extern "C" {
    /**
 * Return a string describing the media_type enum, NULL if media_type
 * is unknown.
 */
    pub fn av_get_media_type_string(media_type: AVMediaType)
     -> *const ::std::os::raw::c_char;
}
#[repr(u32)]
/**
 * @}
 * @}
 * @defgroup lavu_picture Image related
 *
 * AVPicture types, pixel formats and basic image planes manipulation.
 *
 * @{
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPictureType {
    AV_PICTURE_TYPE_NONE = 0,
    AV_PICTURE_TYPE_I = 1,
    AV_PICTURE_TYPE_P = 2,
    AV_PICTURE_TYPE_B = 3,
    AV_PICTURE_TYPE_S = 4,
    AV_PICTURE_TYPE_SI = 5,
    AV_PICTURE_TYPE_SP = 6,
    AV_PICTURE_TYPE_BI = 7,
}
extern "C" {
    /**
 * Return a single letter to describe the given picture type
 * pict_type.
 *
 * @param[in] pict_type the picture type @return a single character
 * representing the picture type, '?' if pict_type is unknown
 */
    pub fn av_get_picture_type_char(pict_type: AVPictureType)
     -> ::std::os::raw::c_char;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>() , 8usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub type imaxdiv_t = _bindgen_ty_5;
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    #[link_name = "signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_6 = _bindgen_ty_6::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_6 = _bindgen_ty_6::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_6 = _bindgen_ty_6::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_6 = _bindgen_ty_6::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_6 = _bindgen_ty_6::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
pub const _IEEE_: _bindgen_ty_7 = _bindgen_ty_7::_IEEE_;
pub const _SVID_: _bindgen_ty_7 = _bindgen_ty_7::_SVID_;
pub const _XOPEN_: _bindgen_ty_7 = _bindgen_ty_7::_XOPEN_;
pub const _POSIX_: _bindgen_ty_7 = _bindgen_ty_7::_POSIX_;
pub const _ISOC_: _bindgen_ty_7 = _bindgen_ty_7::_ISOC_;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
pub use self::_bindgen_ty_7 as _LIB_VERSION_TYPE;
extern "C" {
    #[link_name = "_LIB_VERSION"]
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(::std::mem::size_of::<exception>() , 40usize);
    assert_eq!(::std::mem::align_of::<exception>() , 8usize);
}
impl Clone for exception {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
pub const P_ALL: _bindgen_ty_8 = _bindgen_ty_8::P_ALL;
pub const P_PID: _bindgen_ty_8 = _bindgen_ty_8::P_PID;
pub const P_PGID: _bindgen_ty_8 = _bindgen_ty_8::P_PGID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub use self::_bindgen_ty_8 as idtype_t;
#[repr(C)]
#[derive(Copy)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: u32,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<wait__bindgen_ty_1>() , 4usize);
}
impl Clone for wait__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (127usize as u32)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(127usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 0u32) & (127usize as u32);
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (128usize as u32)) >>
                                       7u32) as u32)
        }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(128usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 7u32) & (128usize as u32);
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (65280usize as u32)) >>
                                       8u32) as u32)
        }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(65280usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 8u32) & (65280usize as u32);
    }
    #[inline]
    pub fn at_offset_16(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294901760usize as u32)) >> 16u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_at_offset_16(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4294901760usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 16u32) & (4294901760usize as u32);
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: u32,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_2>() , 4usize);
    assert_eq!(::std::mem::align_of::<wait__bindgen_ty_2>() , 4usize);
}
impl Clone for wait__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (255usize as u32)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(255usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 0u32) & (255usize as u32);
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (65280usize as u32)) >>
                                       8u32) as u32)
        }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(65280usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 8u32) & (65280usize as u32);
    }
    #[inline]
    pub fn at_offset_16(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294901760usize as u32)) >> 16u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_at_offset_16(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4294901760usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 16u32) & (4294901760usize as u32);
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(::std::mem::size_of::<wait>() , 4usize);
    assert_eq!(::std::mem::align_of::<wait>() , 4usize);
}
impl Clone for wait {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>() , 4usize);
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
pub type div_t = _bindgen_ty_9;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 8usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type ldiv_t = _bindgen_ty_10;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 8usize);
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
pub type lldiv_t = _bindgen_ty_11;
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_12 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12>() , 8usize);
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
pub type __sigset_t = _bindgen_ty_12;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize);
    assert_eq!(::std::mem::align_of::<timeval>() , 8usize);
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13 {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13>() , 8usize);
}
impl Clone for _bindgen_ty_13 {
    fn clone(&self) -> Self { *self }
}
pub type fd_set = _bindgen_ty_13;
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 64usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<pthread_attr_t>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize);
    assert_eq!(::std::mem::align_of::<__pthread_internal_list>() , 8usize);
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
pub union _bindgen_ty_14 {
    pub __data: _bindgen_ty_14___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14___pthread_mutex_s>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14___pthread_mutex_s>() ,
               8usize);
}
impl Clone for _bindgen_ty_14___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14>() , 48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14>() , 8usize);
}
pub type pthread_mutex_t = _bindgen_ty_14;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_15 {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15>() , 8usize);
}
impl Clone for _bindgen_ty_15 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_mutexattr_t = _bindgen_ty_15;
#[repr(C)]
pub union _bindgen_ty_16 {
    pub __data: _bindgen_ty_16__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16__bindgen_ty_1>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_16__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_16() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16>() , 48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16>() , 8usize);
}
pub type pthread_cond_t = _bindgen_ty_16;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_17 {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17>() , 4usize);
}
impl Clone for _bindgen_ty_17 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_condattr_t = _bindgen_ty_17;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
pub union _bindgen_ty_18 {
    pub __data: _bindgen_ty_18__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18__bindgen_ty_1>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_18__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_18() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18>() , 56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18>() , 8usize);
}
pub type pthread_rwlock_t = _bindgen_ty_18;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_19 {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_19() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_19>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_19>() , 8usize);
}
impl Clone for _bindgen_ty_19 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_rwlockattr_t = _bindgen_ty_19;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_20 {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_20() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20>() , 8usize);
}
impl Clone for _bindgen_ty_20 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrier_t = _bindgen_ty_20;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_21 {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21>() , 4usize);
}
impl Clone for _bindgen_ty_21 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrierattr_t = _bindgen_ty_21;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize);
    assert_eq!(::std::mem::align_of::<random_data>() , 8usize);
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize);
    assert_eq!(::std::mem::align_of::<drand48_data>() , 8usize);
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "av_reverse"]
    pub static mut av_reverse: [u8; 256usize];
}
extern "C" {
    pub fn av_log2(v: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_log2_16bit(v: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_22 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl Clone for _bindgen_ty_22 {
    fn clone(&self) -> Self { *self }
}
pub type max_align_t = _bindgen_ty_22;
extern "C" {
    /**
 * Put a description of the AVERROR code errnum in errbuf.
 * In case of failure the global variable errno is set to indicate the
 * error. Even in case of failure av_strerror() will print a generic
 * error message indicating the errnum provided to errbuf.
 *
 * @param errnum      error code to describe
 * @param errbuf      buffer to which description is written
 * @param errbuf_size the size in bytes of errbuf
 * @return 0 on success, a negative value if a description for errnum
 * cannot be found
 */
    pub fn av_strerror(errnum: ::std::os::raw::c_int,
                       errbuf: *mut ::std::os::raw::c_char,
                       errbuf_size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Allocate a block of size bytes with alignment suitable for all
 * memory accesses (including vectors if available on the CPU).
 * @param size Size in bytes for the memory block to be allocated.
 * @return Pointer to the allocated block, NULL if the block cannot
 * be allocated.
 * @see av_mallocz()
 */
    pub fn av_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Allocate or reallocate a block of memory.
 * If ptr is NULL and size > 0, allocate a new block. If
 * size is zero, free the memory block pointed to by ptr.
 * @param ptr Pointer to a memory block already allocated with
 * av_realloc() or NULL.
 * @param size Size in bytes of the memory block to be allocated or
 * reallocated.
 * @return Pointer to a newly-reallocated block or NULL if the block
 * cannot be reallocated or the function is used to free the memory block.
 * @warning Pointers originating from the av_malloc() family of functions must
 *          not be passed to av_realloc(). The former can be implemented using
 *          memalign() (or other functions), and there is no guarantee that
 *          pointers from such functions can be passed to realloc() at all.
 *          The situation is undefined according to POSIX and may crash with
 *          some libc implementations.
 * @see av_fast_realloc()
 */
    pub fn av_realloc(ptr: *mut ::std::os::raw::c_void, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Allocate or reallocate a block of memory.
 * This function does the same thing as av_realloc, except:
 * - It takes two arguments and checks the result of the multiplication for
 *   integer overflow.
 * - It frees the input block in case of failure, thus avoiding the memory
 *   leak with the classic "buf = realloc(buf); if (!buf) return -1;".
 */
    pub fn av_realloc_f(ptr: *mut ::std::os::raw::c_void, nelem: usize,
                        elsize: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Allocate or reallocate a block of memory.
 * If *ptr is NULL and size > 0, allocate a new block. If
 * size is zero, free the memory block pointed to by ptr.
 * @param   ptr Pointer to a pointer to a memory block already allocated
 *          with av_realloc(), or pointer to a pointer to NULL.
 *          The pointer is updated on success, or freed on failure.
 * @param   size Size in bytes for the memory block to be allocated or
 *          reallocated
 * @return  Zero on success, an AVERROR error code on failure.
 * @warning Pointers originating from the av_malloc() family of functions must
 *          not be passed to av_reallocp(). The former can be implemented using
 *          memalign() (or other functions), and there is no guarantee that
 *          pointers from such functions can be passed to realloc() at all.
 *          The situation is undefined according to POSIX and may crash with
 *          some libc implementations.
 */
    pub fn av_reallocp(ptr: *mut ::std::os::raw::c_void, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Allocate or reallocate an array.
 * If ptr is NULL and nmemb > 0, allocate a new block. If
 * nmemb is zero, free the memory block pointed to by ptr.
 * @param ptr Pointer to a memory block already allocated with
 * av_realloc() or NULL.
 * @param nmemb Number of elements
 * @param size Size of the single element
 * @return Pointer to a newly-reallocated block or NULL if the block
 * cannot be reallocated or the function is used to free the memory block.
 * @warning Pointers originating from the av_malloc() family of functions must
 *          not be passed to av_realloc(). The former can be implemented using
 *          memalign() (or other functions), and there is no guarantee that
 *          pointers from such functions can be passed to realloc() at all.
 *          The situation is undefined according to POSIX and may crash with
 *          some libc implementations.
 */
    pub fn av_realloc_array(ptr: *mut ::std::os::raw::c_void, nmemb: usize,
                            size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Allocate or reallocate an array through a pointer to a pointer.
 * If *ptr is NULL and nmemb > 0, allocate a new block. If
 * nmemb is zero, free the memory block pointed to by ptr.
 * @param ptr Pointer to a pointer to a memory block already allocated
 * with av_realloc(), or pointer to a pointer to NULL.
 * The pointer is updated on success, or freed on failure.
 * @param nmemb Number of elements
 * @param size Size of the single element
 * @return Zero on success, an AVERROR error code on failure.
 * @warning Pointers originating from the av_malloc() family of functions must
 *          not be passed to av_realloc(). The former can be implemented using
 *          memalign() (or other functions), and there is no guarantee that
 *          pointers from such functions can be passed to realloc() at all.
 *          The situation is undefined according to POSIX and may crash with
 *          some libc implementations.
 */
    pub fn av_reallocp_array(ptr: *mut ::std::os::raw::c_void, nmemb: usize,
                             size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Free a memory block which has been allocated with av_malloc(z)() or
 * av_realloc().
 * @param ptr Pointer to the memory block which should be freed.
 * @note ptr = NULL is explicitly allowed.
 * @note It is recommended that you use av_freep() instead.
 * @see av_freep()
 */
    pub fn av_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    /**
 * Allocate a block of size bytes with alignment suitable for all
 * memory accesses (including vectors if available on the CPU) and
 * zero all the bytes of the block.
 * @param size Size in bytes for the memory block to be allocated.
 * @return Pointer to the allocated block, NULL if it cannot be allocated.
 * @see av_malloc()
 */
    pub fn av_mallocz(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Allocate a block of nmemb * size bytes with alignment suitable for all
 * memory accesses (including vectors if available on the CPU) and
 * zero all the bytes of the block.
 * The allocation will fail if nmemb * size is greater than or equal
 * to INT_MAX.
 * @param nmemb
 * @param size
 * @return Pointer to the allocated block, NULL if it cannot be allocated.
 */
    pub fn av_calloc(nmemb: usize, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Duplicate the string s.
 * @param s string to be duplicated
 * @return Pointer to a newly-allocated string containing a
 * copy of s or NULL if the string cannot be allocated.
 */
    pub fn av_strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Duplicate a substring of the string s.
 * @param s string to be duplicated
 * @param len the maximum length of the resulting string (not counting the
 *            terminating byte).
 * @return Pointer to a newly-allocated string containing a
 * copy of s or NULL if the string cannot be allocated.
 */
    pub fn av_strndup(s: *const ::std::os::raw::c_char, len: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Duplicate the buffer p.
 * @param p buffer to be duplicated
 * @return Pointer to a newly allocated buffer containing a
 * copy of p or NULL if the buffer cannot be allocated.
 */
    pub fn av_memdup(p: *const ::std::os::raw::c_void, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Free a memory block which has been allocated with av_malloc(z)() or
 * av_realloc() and set the pointer pointing to it to NULL.
 * @param ptr Pointer to the pointer to the memory block which should
 * be freed.
 * @note passing a pointer to a NULL pointer is safe and leads to no action.
 * @see av_free()
 */
    pub fn av_freep(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    /**
 * Add an element to a dynamic array.
 *
 * The array to grow is supposed to be an array of pointers to
 * structures, and the element to add must be a pointer to an already
 * allocated structure.
 *
 * The array is reallocated when its size reaches powers of 2.
 * Therefore, the amortized cost of adding an element is constant.
 *
 * In case of success, the pointer to the array is updated in order to
 * point to the new grown array, and the number pointed to by nb_ptr
 * is incremented.
 * In case of failure, the array is freed, *tab_ptr is set to NULL and
 * *nb_ptr is set to 0.
 *
 * @param tab_ptr pointer to the array to grow
 * @param nb_ptr  pointer to the number of elements in the array
 * @param elem    element to add
 * @see av_dynarray_add_nofree(), av_dynarray2_add()
 */
    pub fn av_dynarray_add(tab_ptr: *mut ::std::os::raw::c_void,
                           nb_ptr: *mut ::std::os::raw::c_int,
                           elem: *mut ::std::os::raw::c_void);
}
extern "C" {
    /**
 * Add an element to a dynamic array.
 *
 * Function has the same functionality as av_dynarray_add(),
 * but it doesn't free memory on fails. It returns error code
 * instead and leave current buffer untouched.
 *
 * @param tab_ptr pointer to the array to grow
 * @param nb_ptr  pointer to the number of elements in the array
 * @param elem    element to add
 * @return >=0 on success, negative otherwise.
 * @see av_dynarray_add(), av_dynarray2_add()
 */
    pub fn av_dynarray_add_nofree(tab_ptr: *mut ::std::os::raw::c_void,
                                  nb_ptr: *mut ::std::os::raw::c_int,
                                  elem: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Add an element of size elem_size to a dynamic array.
 *
 * The array is reallocated when its number of elements reaches powers of 2.
 * Therefore, the amortized cost of adding an element is constant.
 *
 * In case of success, the pointer to the array is updated in order to
 * point to the new grown array, and the number pointed to by nb_ptr
 * is incremented.
 * In case of failure, the array is freed, *tab_ptr is set to NULL and
 * *nb_ptr is set to 0.
 *
 * @param tab_ptr   pointer to the array to grow
 * @param nb_ptr    pointer to the number of elements in the array
 * @param elem_size size in bytes of the elements in the array
 * @param elem_data pointer to the data of the element to add. If NULL, the space of
 *                  the new added element is not filled.
 * @return          pointer to the data of the element to copy in the new allocated space.
 *                  If NULL, the new allocated space is left uninitialized."
 * @see av_dynarray_add(), av_dynarray_add_nofree()
 */
    pub fn av_dynarray2_add(tab_ptr: *mut *mut ::std::os::raw::c_void,
                            nb_ptr: *mut ::std::os::raw::c_int,
                            elem_size: usize, elem_data: *const u8)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Set the maximum size that may me allocated in one block.
 */
    pub fn av_max_alloc(max: usize);
}
extern "C" {
    /**
 * deliberately overlapping memcpy implementation
 * @param dst destination buffer
 * @param back how many bytes back we start (the initial size of the overlapping window), must be > 0
 * @param cnt number of bytes to copy, must be >= 0
 *
 * cnt > back is valid, this will copy the bytes we just copied,
 * thus creating a repeating pattern with a period length of back.
 */
    pub fn av_memcpy_backptr(dst: *mut u8, back: ::std::os::raw::c_int,
                             cnt: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Reallocate the given block if it is not large enough, otherwise do nothing.
 *
 * @see av_realloc
 */
    pub fn av_fast_realloc(ptr: *mut ::std::os::raw::c_void,
                           size: *mut ::std::os::raw::c_uint, min_size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /**
 * Allocate a buffer, reusing the given one if large enough.
 *
 * Contrary to av_fast_realloc the current buffer contents might not be
 * preserved and on error the old buffer is freed, thus no special
 * handling to avoid memleaks is necessary.
 *
 * @param ptr pointer to pointer to already allocated buffer, overwritten with pointer to new buffer
 * @param size size of the buffer *ptr points to
 * @param min_size minimum size of *ptr buffer after returning, *ptr will be NULL and
 *                 *size 0 if an error occurred.
 */
    pub fn av_fast_malloc(ptr: *mut ::std::os::raw::c_void,
                          size: *mut ::std::os::raw::c_uint, min_size: usize);
}
/**
 * rational number numerator/denominator
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVRational {
    ///< numerator
    pub num: ::std::os::raw::c_int,
    ///< denominator
    pub den: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVRational() {
    assert_eq!(::std::mem::size_of::<AVRational>() , 8usize);
    assert_eq!(::std::mem::align_of::<AVRational>() , 4usize);
}
impl Clone for AVRational {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /**
 * Reduce a fraction.
 * This is useful for framerate calculations.
 * @param dst_num destination numerator
 * @param dst_den destination denominator
 * @param num source numerator
 * @param den source denominator
 * @param max the maximum allowed for dst_num & dst_den
 * @return 1 if exact, 0 otherwise
 */
    pub fn av_reduce(dst_num: *mut ::std::os::raw::c_int,
                     dst_den: *mut ::std::os::raw::c_int, num: i64, den: i64,
                     max: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Multiply two rationals.
 * @param b first rational
 * @param c second rational
 * @return b*c
 */
    pub fn av_mul_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    /**
 * Divide one rational by another.
 * @param b first rational
 * @param c second rational
 * @return b/c
 */
    pub fn av_div_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    /**
 * Add two rationals.
 * @param b first rational
 * @param c second rational
 * @return b+c
 */
    pub fn av_add_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    /**
 * Subtract one rational from another.
 * @param b first rational
 * @param c second rational
 * @return b-c
 */
    pub fn av_sub_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    /**
 * Convert a double precision floating point number to a rational.
 * inf is expressed as {1,0} or {-1,0} depending on the sign.
 *
 * @param d double to convert
 * @param max the maximum allowed numerator and denominator
 * @return (AVRational) d
 */
    pub fn av_d2q(d: f64, max: ::std::os::raw::c_int) -> AVRational;
}
extern "C" {
    /**
 * @return 1 if q1 is nearer to q than q2, -1 if q2 is nearer
 * than q1, 0 if they have the same distance.
 */
    pub fn av_nearer_q(q: AVRational, q1: AVRational, q2: AVRational)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Find the nearest value in q_list to q.
 * @param q_list an array of rationals terminated by {0, 0}
 * @return the index of the nearest value found in the array
 */
    pub fn av_find_nearest_q_idx(q: AVRational, q_list: *const AVRational)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Converts a AVRational to a IEEE 32bit float.
 *
 * The float is returned in a uint32_t and its value is platform indepenant.
 */
    pub fn av_q2intfloat(q: AVRational) -> u32;
}
#[repr(C)]
#[derive(Copy)]
pub union av_intfloat32 {
    pub i: u32,
    pub f: f32,
}
#[test]
fn bindgen_test_layout_av_intfloat32() {
    assert_eq!(::std::mem::size_of::<av_intfloat32>() , 4usize);
    assert_eq!(::std::mem::align_of::<av_intfloat32>() , 4usize);
}
impl Clone for av_intfloat32 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union av_intfloat64 {
    pub i: u64,
    pub f: f64,
}
#[test]
fn bindgen_test_layout_av_intfloat64() {
    assert_eq!(::std::mem::size_of::<av_intfloat64>() , 8usize);
    assert_eq!(::std::mem::align_of::<av_intfloat64>() , 8usize);
}
impl Clone for av_intfloat64 {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
/**
 * @addtogroup lavu_math
 * @{
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVRounding {
    AV_ROUND_ZERO = 0,
    AV_ROUND_INF = 1,
    AV_ROUND_DOWN = 2,
    AV_ROUND_UP = 3,
    AV_ROUND_NEAR_INF = 5,
    AV_ROUND_PASS_MINMAX = 8192,
}
extern "C" {
    /**
 * Return the greatest common divisor of a and b.
 * If both a and b are 0 or either or both are <0 then behavior is
 * undefined.
 */
    pub fn av_gcd(a: i64, b: i64) -> i64;
}
extern "C" {
    /**
 * Rescale a 64-bit integer with rounding to nearest.
 * A simple a*b/c isn't possible as it can overflow.
 */
    pub fn av_rescale(a: i64, b: i64, c: i64) -> i64;
}
extern "C" {
    /**
 * Rescale a 64-bit integer with specified rounding.
 * A simple a*b/c isn't possible as it can overflow.
 *
 * @return rescaled value a, or if AV_ROUND_PASS_MINMAX is set and a is
 *         INT64_MIN or INT64_MAX then a is passed through unchanged.
 */
    pub fn av_rescale_rnd(a: i64, b: i64, c: i64, arg1: AVRounding) -> i64;
}
extern "C" {
    /**
 * Rescale a 64-bit integer by 2 rational numbers.
 */
    pub fn av_rescale_q(a: i64, bq: AVRational, cq: AVRational) -> i64;
}
extern "C" {
    /**
 * Rescale a 64-bit integer by 2 rational numbers with specified rounding.
 *
 * @return rescaled value a, or if AV_ROUND_PASS_MINMAX is set and a is
 *         INT64_MIN or INT64_MAX then a is passed through unchanged.
 */
    pub fn av_rescale_q_rnd(a: i64, bq: AVRational, cq: AVRational,
                            arg1: AVRounding) -> i64;
}
extern "C" {
    /**
 * Compare 2 timestamps each in its own timebases.
 * The result of the function is undefined if one of the timestamps
 * is outside the int64_t range when represented in the others timebase.
 * @return -1 if ts_a is before ts_b, 1 if ts_a is after ts_b or 0 if they represent the same position
 */
    pub fn av_compare_ts(ts_a: i64, tb_a: AVRational, ts_b: i64,
                         tb_b: AVRational) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Compare 2 integers modulo mod.
 * That is we compare integers a and b for which only the least
 * significant log2(mod) bits are known.
 *
 * @param mod must be a power of 2
 * @return a negative value if a is smaller than b
 *         a positive value if a is greater than b
 *         0                if a equals          b
 */
    pub fn av_compare_mod(a: u64, b: u64, mod_: u64) -> i64;
}
extern "C" {
    /**
 * Rescale a timestamp while preserving known durations.
 *
 * @param in_ts Input timestamp
 * @param in_tb Input timebase
 * @param fs_tb Duration and *last timebase
 * @param duration duration till the next call
 * @param out_tb Output timebase
 */
    pub fn av_rescale_delta(in_tb: AVRational, in_ts: i64, fs_tb: AVRational,
                            duration: ::std::os::raw::c_int, last: *mut i64,
                            out_tb: AVRational) -> i64;
}
extern "C" {
    /**
 * Add a value to a timestamp.
 *
 * This function guarantees that when the same value is repeatly added that
 * no accumulation of rounding errors occurs.
 *
 * @param ts Input timestamp
 * @param ts_tb Input timestamp timebase
 * @param inc value to add to ts
 * @param inc_tb inc timebase
 */
    pub fn av_add_stable(ts_tb: AVRational, ts: i64, inc_tb: AVRational,
                         inc: i64) -> i64;
}
pub const AV_CLASS_CATEGORY_NA: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_NA;
pub const AV_CLASS_CATEGORY_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_INPUT;
pub const AV_CLASS_CATEGORY_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_OUTPUT;
pub const AV_CLASS_CATEGORY_MUXER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_MUXER;
pub const AV_CLASS_CATEGORY_DEMUXER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEMUXER;
pub const AV_CLASS_CATEGORY_ENCODER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_ENCODER;
pub const AV_CLASS_CATEGORY_DECODER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DECODER;
pub const AV_CLASS_CATEGORY_FILTER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_FILTER;
pub const AV_CLASS_CATEGORY_BITSTREAM_FILTER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_BITSTREAM_FILTER;
pub const AV_CLASS_CATEGORY_SWSCALER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_SWSCALER;
pub const AV_CLASS_CATEGORY_SWRESAMPLER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_SWRESAMPLER;
pub const AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT;
pub const AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT;
pub const AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT;
pub const AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT;
pub const AV_CLASS_CATEGORY_DEVICE_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_OUTPUT;
pub const AV_CLASS_CATEGORY_DEVICE_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_INPUT;
pub const AV_CLASS_CATEGORY_NB: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_NB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_23 {
    AV_CLASS_CATEGORY_NA = 0,
    AV_CLASS_CATEGORY_INPUT = 1,
    AV_CLASS_CATEGORY_OUTPUT = 2,
    AV_CLASS_CATEGORY_MUXER = 3,
    AV_CLASS_CATEGORY_DEMUXER = 4,
    AV_CLASS_CATEGORY_ENCODER = 5,
    AV_CLASS_CATEGORY_DECODER = 6,
    AV_CLASS_CATEGORY_FILTER = 7,
    AV_CLASS_CATEGORY_BITSTREAM_FILTER = 8,
    AV_CLASS_CATEGORY_SWSCALER = 9,
    AV_CLASS_CATEGORY_SWRESAMPLER = 10,
    AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40,
    AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT = 41,
    AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT = 42,
    AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT = 43,
    AV_CLASS_CATEGORY_DEVICE_OUTPUT = 44,
    AV_CLASS_CATEGORY_DEVICE_INPUT = 45,
    AV_CLASS_CATEGORY_NB = 46,
}
pub use self::_bindgen_ty_23 as AVClassCategory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVOptionRanges([u8; 0]);
/**
 * Describe the class of an AVClass context structure. That is an
 * arbitrary struct of which the first field is a pointer to an
 * AVClass struct (e.g. AVCodecContext, AVFormatContext etc.).
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVClass {
    /**
     * The name of the class; usually it is the same name as the
     * context structure type to which the AVClass is associated.
     */
    pub class_name: *const ::std::os::raw::c_char,
    /**
     * A pointer to a function which returns the name of a context
     * instance ctx associated with the class.
     */
    pub item_name: ::std::option::Option<unsafe extern "C" fn(ctx:
                                                                  *mut ::std::os::raw::c_void)
                                             ->
                                                 *const ::std::os::raw::c_char>,
    /**
     * a pointer to the first option specified in the class if any or NULL
     *
     * @see av_set_default_options()
     */
    pub option: *const AVClass_AVOption,
    /**
     * LIBAVUTIL_VERSION with which this structure was created.
     * This is used to allow fields to be added without requiring major
     * version bumps everywhere.
     */
    pub version: ::std::os::raw::c_int,
    /**
     * Offset in the structure where log_level_offset is stored.
     * 0 means there is no such variable
     */
    pub log_level_offset_offset: ::std::os::raw::c_int,
    /**
     * Offset in the structure where a pointer to the parent context for
     * logging is stored. For example a decoder could pass its AVCodecContext
     * to eval as such a parent context, which an av_log() implementation
     * could then leverage to display the parent context.
     * The offset can be NULL.
     */
    pub parent_log_context_offset: ::std::os::raw::c_int,
    /**
     * Return next AVOptions-enabled child or NULL
     */
    pub child_next: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                   *mut ::std::os::raw::c_void,
                                                               prev:
                                                                   *mut ::std::os::raw::c_void)
                                              -> *mut ::std::os::raw::c_void>,
    /**
     * Return an AVClass corresponding to the next potential
     * AVOptions-enabled child.
     *
     * The difference between child_next and this is that
     * child_next iterates over _already existing_ objects, while
     * child_class_next iterates over _all possible_ children.
     */
    pub child_class_next: ::std::option::Option<unsafe extern "C" fn(prev:
                                                                         *const AVClass)
                                                    -> *const AVClass>,
    /**
     * Category used for visualization (like color)
     * This is only set if the category is equal for all objects using this class.
     * available since version (51 << 16 | 56 << 8 | 100)
     */
    pub category: AVClassCategory,
    /**
     * Callback to return the category.
     * available since version (51 << 16 | 59 << 8 | 100)
     */
    pub get_category: ::std::option::Option<unsafe extern "C" fn(ctx:
                                                                     *mut ::std::os::raw::c_void)
                                                -> _bindgen_ty_23>,
    /**
     * Callback to return the supported/allowed ranges.
     * available since version (52.12)
     */
    pub query_ranges: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut *mut AVOptionRanges,
                                                                 obj:
                                                                     *mut ::std::os::raw::c_void,
                                                                 key:
                                                                     *const ::std::os::raw::c_char,
                                                                 flags:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVClass_AVOption([u8; 0]);
#[test]
fn bindgen_test_layout_AVClass() {
    assert_eq!(::std::mem::size_of::<AVClass>() , 80usize);
    assert_eq!(::std::mem::align_of::<AVClass>() , 8usize);
}
impl Clone for AVClass {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /**
 * Send the specified message to the log if the level is less than or equal
 * to the current av_log_level. By default, all logging messages are sent to
 * stderr. This behavior can be altered by setting a different logging callback
 * function.
 * @see av_log_set_callback
 *
 * @param avcl A pointer to an arbitrary struct of which the first field is a
 *        pointer to an AVClass struct or NULL if general log.
 * @param level The importance level of the message expressed using a @ref
 *        lavu_log_constants "Logging Constant".
 * @param fmt The format string (printf-compatible) that specifies how
 *        subsequent arguments are converted to output.
 */
    pub fn av_log(avcl: *mut ::std::os::raw::c_void,
                  level: ::std::os::raw::c_int,
                  fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    /**
 * Send the specified message to the log if the level is less than or equal
 * to the current av_log_level. By default, all logging messages are sent to
 * stderr. This behavior can be altered by setting a different logging callback
 * function.
 * @see av_log_set_callback
 *
 * @param avcl A pointer to an arbitrary struct of which the first field is a
 *        pointer to an AVClass struct.
 * @param level The importance level of the message expressed using a @ref
 *        lavu_log_constants "Logging Constant".
 * @param fmt The format string (printf-compatible) that specifies how
 *        subsequent arguments are converted to output.
 * @param vl The arguments referenced by the format string.
 */
    pub fn av_vlog(avcl: *mut ::std::os::raw::c_void,
                   level: ::std::os::raw::c_int,
                   fmt: *const ::std::os::raw::c_char,
                   vl: *mut __va_list_tag);
}
extern "C" {
    /**
 * Get the current log level
 *
 * @see lavu_log_constants
 *
 * @return Current log level
 */
    pub fn av_log_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Set the log level
 *
 * @see lavu_log_constants
 *
 * @param level Logging level
 */
    pub fn av_log_set_level(level: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Set the logging callback
 *
 * @note The callback must be thread safe, even if the application does not use
 *       threads itself as some codecs are multithreaded.
 *
 * @see av_log_default_callback
 *
 * @param callback A logging function with a compatible signature.
 */
    pub fn av_log_set_callback(callback:
                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut ::std::os::raw::c_void,
                                                                              arg2:
                                                                                  ::std::os::raw::c_int,
                                                                              arg3:
                                                                                  *const ::std::os::raw::c_char,
                                                                              arg4:
                                                                                  *mut __va_list_tag)>);
}
extern "C" {
    /**
 * Default logging callback
 *
 * It prints the message to stderr, optionally colorizing it.
 *
 * @param avcl A pointer to an arbitrary struct of which the first field is a
 *        pointer to an AVClass struct.
 * @param level The importance level of the message expressed using a @ref
 *        lavu_log_constants "Logging Constant".
 * @param fmt The format string (printf-compatible) that specifies how
 *        subsequent arguments are converted to output.
 * @param vl The arguments referenced by the format string.
 */
    pub fn av_log_default_callback(avcl: *mut ::std::os::raw::c_void,
                                   level: ::std::os::raw::c_int,
                                   fmt: *const ::std::os::raw::c_char,
                                   vl: *mut __va_list_tag);
}
extern "C" {
    /**
 * Return the context name
 *
 * @param  ctx The AVClass context
 *
 * @return The AVClass class_name
 */
    pub fn av_default_item_name(ctx: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_default_get_category(ptr: *mut ::std::os::raw::c_void)
     -> AVClassCategory;
}
extern "C" {
    /**
 * Format a line of log the same way as the default callback.
 * @param line          buffer to receive the formatted line
 * @param line_size     size of the buffer
 * @param print_prefix  used to store whether the prefix must be printed;
 *                      must point to a persistent integer initially set to 1
 */
    pub fn av_log_format_line(ptr: *mut ::std::os::raw::c_void,
                              level: ::std::os::raw::c_int,
                              fmt: *const ::std::os::raw::c_char,
                              vl: *mut __va_list_tag,
                              line: *mut ::std::os::raw::c_char,
                              line_size: ::std::os::raw::c_int,
                              print_prefix: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_log_set_flags(arg: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_log_get_flags() -> ::std::os::raw::c_int;
}
pub const AVPixelFormat_AV_PIX_FMT_VAAPI: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VAAPI_VLD;
pub const AVPixelFormat_AV_PIX_FMT_Y400A: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YA8;
pub const AVPixelFormat_AV_PIX_FMT_GRAY8A: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YA8;
pub const AVPixelFormat_PIX_FMT_NONE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_NONE;
pub const AVPixelFormat_PIX_FMT_YUV420P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P;
pub const AVPixelFormat_PIX_FMT_YUYV422: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUYV422;
pub const AVPixelFormat_PIX_FMT_RGB24: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB24;
pub const AVPixelFormat_PIX_FMT_BGR24: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR24;
pub const AVPixelFormat_PIX_FMT_YUV422P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P;
pub const AVPixelFormat_PIX_FMT_YUV444P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P;
pub const AVPixelFormat_PIX_FMT_YUV410P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV410P;
pub const AVPixelFormat_PIX_FMT_YUV411P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV411P;
pub const AVPixelFormat_PIX_FMT_GRAY8: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GRAY8;
pub const AVPixelFormat_PIX_FMT_MONOWHITE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_MONOWHITE;
pub const AVPixelFormat_PIX_FMT_MONOBLACK: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_MONOBLACK;
pub const AVPixelFormat_PIX_FMT_PAL8: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_PAL8;
pub const AVPixelFormat_PIX_FMT_YUVJ420P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUVJ420P;
pub const AVPixelFormat_PIX_FMT_YUVJ422P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUVJ422P;
pub const AVPixelFormat_PIX_FMT_YUVJ444P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUVJ444P;
pub const AVPixelFormat_PIX_FMT_XVMC_MPEG2_MC: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_XVMC_MPEG2_MC;
pub const AVPixelFormat_PIX_FMT_XVMC_MPEG2_IDCT: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_XVMC_MPEG2_IDCT;
pub const AVPixelFormat_PIX_FMT_UYVY422: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_UYVY422;
pub const AVPixelFormat_PIX_FMT_UYYVYY411: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_UYYVYY411;
pub const AVPixelFormat_PIX_FMT_BGR8: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR8;
pub const AVPixelFormat_PIX_FMT_BGR4: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR4;
pub const AVPixelFormat_PIX_FMT_BGR4_BYTE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR4_BYTE;
pub const AVPixelFormat_PIX_FMT_RGB8: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB8;
pub const AVPixelFormat_PIX_FMT_RGB4: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB4;
pub const AVPixelFormat_PIX_FMT_RGB4_BYTE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB4_BYTE;
pub const AVPixelFormat_PIX_FMT_NV12: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_NV12;
pub const AVPixelFormat_PIX_FMT_NV21: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_NV21;
pub const AVPixelFormat_PIX_FMT_ARGB: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_ARGB;
pub const AVPixelFormat_PIX_FMT_RGBA: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGBA;
pub const AVPixelFormat_PIX_FMT_ABGR: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_ABGR;
pub const AVPixelFormat_PIX_FMT_BGRA: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGRA;
pub const AVPixelFormat_PIX_FMT_GRAY16BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GRAY16BE;
pub const AVPixelFormat_PIX_FMT_GRAY16LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GRAY16LE;
pub const AVPixelFormat_PIX_FMT_YUV440P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV440P;
pub const AVPixelFormat_PIX_FMT_YUVJ440P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUVJ440P;
pub const AVPixelFormat_PIX_FMT_YUVA420P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUVA420P;
pub const AVPixelFormat_PIX_FMT_VDPAU_H264: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VDPAU_H264;
pub const AVPixelFormat_PIX_FMT_VDPAU_MPEG1: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VDPAU_MPEG1;
pub const AVPixelFormat_PIX_FMT_VDPAU_MPEG2: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VDPAU_MPEG2;
pub const AVPixelFormat_PIX_FMT_VDPAU_WMV3: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VDPAU_WMV3;
pub const AVPixelFormat_PIX_FMT_VDPAU_VC1: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VDPAU_VC1;
pub const AVPixelFormat_PIX_FMT_RGB48BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB48BE;
pub const AVPixelFormat_PIX_FMT_RGB48LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB48LE;
pub const AVPixelFormat_PIX_FMT_RGB565BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB565BE;
pub const AVPixelFormat_PIX_FMT_RGB565LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB565LE;
pub const AVPixelFormat_PIX_FMT_RGB555BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB555BE;
pub const AVPixelFormat_PIX_FMT_RGB555LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB555LE;
pub const AVPixelFormat_PIX_FMT_BGR565BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR565BE;
pub const AVPixelFormat_PIX_FMT_BGR565LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR565LE;
pub const AVPixelFormat_PIX_FMT_BGR555BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR555BE;
pub const AVPixelFormat_PIX_FMT_BGR555LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR555LE;
pub const AVPixelFormat_PIX_FMT_VAAPI_MOCO: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VAAPI_MOCO;
pub const AVPixelFormat_PIX_FMT_VAAPI_IDCT: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VAAPI_IDCT;
pub const AVPixelFormat_PIX_FMT_VAAPI_VLD: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VAAPI_VLD;
pub const AVPixelFormat_PIX_FMT_YUV420P16LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P16LE;
pub const AVPixelFormat_PIX_FMT_YUV420P16BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P16BE;
pub const AVPixelFormat_PIX_FMT_YUV422P16LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P16LE;
pub const AVPixelFormat_PIX_FMT_YUV422P16BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P16BE;
pub const AVPixelFormat_PIX_FMT_YUV444P16LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P16LE;
pub const AVPixelFormat_PIX_FMT_YUV444P16BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P16BE;
pub const AVPixelFormat_PIX_FMT_VDPAU_MPEG4: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VDPAU_MPEG4;
pub const AVPixelFormat_PIX_FMT_DXVA2_VLD: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_DXVA2_VLD;
pub const AVPixelFormat_PIX_FMT_RGB444LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB444LE;
pub const AVPixelFormat_PIX_FMT_RGB444BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB444BE;
pub const AVPixelFormat_PIX_FMT_BGR444LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR444LE;
pub const AVPixelFormat_PIX_FMT_BGR444BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR444BE;
pub const AVPixelFormat_PIX_FMT_GRAY8A: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YA8;
pub const AVPixelFormat_PIX_FMT_BGR48BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR48BE;
pub const AVPixelFormat_PIX_FMT_BGR48LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR48LE;
pub const AVPixelFormat_PIX_FMT_YUV420P9BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P9BE;
pub const AVPixelFormat_PIX_FMT_YUV420P9LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P9LE;
pub const AVPixelFormat_PIX_FMT_YUV420P10BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P10BE;
pub const AVPixelFormat_PIX_FMT_YUV420P10LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P10LE;
pub const AVPixelFormat_PIX_FMT_YUV422P10BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P10BE;
pub const AVPixelFormat_PIX_FMT_YUV422P10LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P10LE;
pub const AVPixelFormat_PIX_FMT_YUV444P9BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P9BE;
pub const AVPixelFormat_PIX_FMT_YUV444P9LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P9LE;
pub const AVPixelFormat_PIX_FMT_YUV444P10BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P10BE;
pub const AVPixelFormat_PIX_FMT_YUV444P10LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P10LE;
pub const AVPixelFormat_PIX_FMT_YUV422P9BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P9BE;
pub const AVPixelFormat_PIX_FMT_YUV422P9LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P9LE;
pub const AVPixelFormat_PIX_FMT_VDA_VLD: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VDA_VLD;
pub const AVPixelFormat_PIX_FMT_GBRP: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP;
pub const AVPixelFormat_PIX_FMT_GBRP9BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP9BE;
pub const AVPixelFormat_PIX_FMT_GBRP9LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP9LE;
pub const AVPixelFormat_PIX_FMT_GBRP10BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP10BE;
pub const AVPixelFormat_PIX_FMT_GBRP10LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP10LE;
pub const AVPixelFormat_PIX_FMT_GBRP16BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP16BE;
pub const AVPixelFormat_PIX_FMT_GBRP16LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP16LE;
pub const AVPixelFormat_PIX_FMT_RGBA64BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGBA64BE;
pub const AVPixelFormat_PIX_FMT_RGBA64LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGBA64LE;
pub const AVPixelFormat_PIX_FMT_BGRA64BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGRA64BE;
pub const AVPixelFormat_PIX_FMT_BGRA64LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGRA64LE;
pub const AVPixelFormat_PIX_FMT_0RGB: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_0RGB;
pub const AVPixelFormat_PIX_FMT_RGB0: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_RGB0;
pub const AVPixelFormat_PIX_FMT_0BGR: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_0BGR;
pub const AVPixelFormat_PIX_FMT_BGR0: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_BGR0;
pub const AVPixelFormat_PIX_FMT_YUVA444P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUVA444P;
pub const AVPixelFormat_PIX_FMT_YUVA422P: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUVA422P;
pub const AVPixelFormat_PIX_FMT_YUV420P12BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P12BE;
pub const AVPixelFormat_PIX_FMT_YUV420P12LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P12LE;
pub const AVPixelFormat_PIX_FMT_YUV420P14BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P14BE;
pub const AVPixelFormat_PIX_FMT_YUV420P14LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV420P14LE;
pub const AVPixelFormat_PIX_FMT_YUV422P12BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P12BE;
pub const AVPixelFormat_PIX_FMT_YUV422P12LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P12LE;
pub const AVPixelFormat_PIX_FMT_YUV422P14BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P14BE;
pub const AVPixelFormat_PIX_FMT_YUV422P14LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV422P14LE;
pub const AVPixelFormat_PIX_FMT_YUV444P12BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P12BE;
pub const AVPixelFormat_PIX_FMT_YUV444P12LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P12LE;
pub const AVPixelFormat_PIX_FMT_YUV444P14BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P14BE;
pub const AVPixelFormat_PIX_FMT_YUV444P14LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YUV444P14LE;
pub const AVPixelFormat_PIX_FMT_GBRP12BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP12BE;
pub const AVPixelFormat_PIX_FMT_GBRP12LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP12LE;
pub const AVPixelFormat_PIX_FMT_GBRP14BE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP14BE;
pub const AVPixelFormat_PIX_FMT_GBRP14LE: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRP14LE;
pub const AVPixelFormat_PIX_FMT_NB: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_GBRAP;
#[repr(i32)]
/**
 * Pixel format.
 *
 * @note
 * AV_PIX_FMT_RGB32 is handled in an endian-specific manner. An RGBA
 * color is put together as:
 *  (A << 24) | (R << 16) | (G << 8) | B
 * This is stored as BGRA on little-endian CPU architectures and ARGB on
 * big-endian CPUs.
 *
 * @par
 * When the pixel format is palettized RGB32 (AV_PIX_FMT_PAL8), the palettized
 * image data is stored in AVFrame.data[0]. The palette is transported in
 * AVFrame.data[1], is 1024 bytes long (256 4-byte entries) and is
 * formatted the same as in AV_PIX_FMT_RGB32 described above (i.e., it is
 * also endian-specific). Note also that the individual RGB32 palette
 * components stored in AVFrame.data[1] should be in the range 0..255.
 * This is important as many custom PAL8 video codecs that were designed
 * to run on the IBM VGA graphics adapter use 6-bit palette components.
 *
 * @par
 * For all the 8bit per pixel formats, an RGB32 palette is in data[1] like
 * for pal8. This palette is filled in automatically by the function
 * allocating the picture.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPixelFormat {
    AV_PIX_FMT_NONE = -1,
    AV_PIX_FMT_YUV420P = 0,
    AV_PIX_FMT_YUYV422 = 1,
    AV_PIX_FMT_RGB24 = 2,
    AV_PIX_FMT_BGR24 = 3,
    AV_PIX_FMT_YUV422P = 4,
    AV_PIX_FMT_YUV444P = 5,
    AV_PIX_FMT_YUV410P = 6,
    AV_PIX_FMT_YUV411P = 7,
    AV_PIX_FMT_GRAY8 = 8,
    AV_PIX_FMT_MONOWHITE = 9,
    AV_PIX_FMT_MONOBLACK = 10,
    AV_PIX_FMT_PAL8 = 11,
    AV_PIX_FMT_YUVJ420P = 12,
    AV_PIX_FMT_YUVJ422P = 13,
    AV_PIX_FMT_YUVJ444P = 14,
    AV_PIX_FMT_XVMC_MPEG2_MC = 15,
    AV_PIX_FMT_XVMC_MPEG2_IDCT = 16,
    AV_PIX_FMT_UYVY422 = 17,
    AV_PIX_FMT_UYYVYY411 = 18,
    AV_PIX_FMT_BGR8 = 19,
    AV_PIX_FMT_BGR4 = 20,
    AV_PIX_FMT_BGR4_BYTE = 21,
    AV_PIX_FMT_RGB8 = 22,
    AV_PIX_FMT_RGB4 = 23,
    AV_PIX_FMT_RGB4_BYTE = 24,
    AV_PIX_FMT_NV12 = 25,
    AV_PIX_FMT_NV21 = 26,
    AV_PIX_FMT_ARGB = 27,
    AV_PIX_FMT_RGBA = 28,
    AV_PIX_FMT_ABGR = 29,
    AV_PIX_FMT_BGRA = 30,
    AV_PIX_FMT_GRAY16BE = 31,
    AV_PIX_FMT_GRAY16LE = 32,
    AV_PIX_FMT_YUV440P = 33,
    AV_PIX_FMT_YUVJ440P = 34,
    AV_PIX_FMT_YUVA420P = 35,
    AV_PIX_FMT_VDPAU_H264 = 36,
    AV_PIX_FMT_VDPAU_MPEG1 = 37,
    AV_PIX_FMT_VDPAU_MPEG2 = 38,
    AV_PIX_FMT_VDPAU_WMV3 = 39,
    AV_PIX_FMT_VDPAU_VC1 = 40,
    AV_PIX_FMT_RGB48BE = 41,
    AV_PIX_FMT_RGB48LE = 42,
    AV_PIX_FMT_RGB565BE = 43,
    AV_PIX_FMT_RGB565LE = 44,
    AV_PIX_FMT_RGB555BE = 45,
    AV_PIX_FMT_RGB555LE = 46,
    AV_PIX_FMT_BGR565BE = 47,
    AV_PIX_FMT_BGR565LE = 48,
    AV_PIX_FMT_BGR555BE = 49,
    AV_PIX_FMT_BGR555LE = 50,
    AV_PIX_FMT_VAAPI_MOCO = 51,
    AV_PIX_FMT_VAAPI_IDCT = 52,
    AV_PIX_FMT_VAAPI_VLD = 53,
    AV_PIX_FMT_YUV420P16LE = 54,
    AV_PIX_FMT_YUV420P16BE = 55,
    AV_PIX_FMT_YUV422P16LE = 56,
    AV_PIX_FMT_YUV422P16BE = 57,
    AV_PIX_FMT_YUV444P16LE = 58,
    AV_PIX_FMT_YUV444P16BE = 59,
    AV_PIX_FMT_VDPAU_MPEG4 = 60,
    AV_PIX_FMT_DXVA2_VLD = 61,
    AV_PIX_FMT_RGB444LE = 62,
    AV_PIX_FMT_RGB444BE = 63,
    AV_PIX_FMT_BGR444LE = 64,
    AV_PIX_FMT_BGR444BE = 65,
    AV_PIX_FMT_YA8 = 66,
    AV_PIX_FMT_BGR48BE = 67,
    AV_PIX_FMT_BGR48LE = 68,
    AV_PIX_FMT_YUV420P9BE = 69,
    AV_PIX_FMT_YUV420P9LE = 70,
    AV_PIX_FMT_YUV420P10BE = 71,
    AV_PIX_FMT_YUV420P10LE = 72,
    AV_PIX_FMT_YUV422P10BE = 73,
    AV_PIX_FMT_YUV422P10LE = 74,
    AV_PIX_FMT_YUV444P9BE = 75,
    AV_PIX_FMT_YUV444P9LE = 76,
    AV_PIX_FMT_YUV444P10BE = 77,
    AV_PIX_FMT_YUV444P10LE = 78,
    AV_PIX_FMT_YUV422P9BE = 79,
    AV_PIX_FMT_YUV422P9LE = 80,
    AV_PIX_FMT_VDA_VLD = 81,
    AV_PIX_FMT_GBRP = 82,
    AV_PIX_FMT_GBRP9BE = 83,
    AV_PIX_FMT_GBRP9LE = 84,
    AV_PIX_FMT_GBRP10BE = 85,
    AV_PIX_FMT_GBRP10LE = 86,
    AV_PIX_FMT_GBRP16BE = 87,
    AV_PIX_FMT_GBRP16LE = 88,
    AV_PIX_FMT_YUVA422P_LIBAV = 89,
    AV_PIX_FMT_YUVA444P_LIBAV = 90,
    AV_PIX_FMT_YUVA420P9BE = 91,
    AV_PIX_FMT_YUVA420P9LE = 92,
    AV_PIX_FMT_YUVA422P9BE = 93,
    AV_PIX_FMT_YUVA422P9LE = 94,
    AV_PIX_FMT_YUVA444P9BE = 95,
    AV_PIX_FMT_YUVA444P9LE = 96,
    AV_PIX_FMT_YUVA420P10BE = 97,
    AV_PIX_FMT_YUVA420P10LE = 98,
    AV_PIX_FMT_YUVA422P10BE = 99,
    AV_PIX_FMT_YUVA422P10LE = 100,
    AV_PIX_FMT_YUVA444P10BE = 101,
    AV_PIX_FMT_YUVA444P10LE = 102,
    AV_PIX_FMT_YUVA420P16BE = 103,
    AV_PIX_FMT_YUVA420P16LE = 104,
    AV_PIX_FMT_YUVA422P16BE = 105,
    AV_PIX_FMT_YUVA422P16LE = 106,
    AV_PIX_FMT_YUVA444P16BE = 107,
    AV_PIX_FMT_YUVA444P16LE = 108,
    AV_PIX_FMT_VDPAU = 109,
    AV_PIX_FMT_XYZ12LE = 110,
    AV_PIX_FMT_XYZ12BE = 111,
    AV_PIX_FMT_NV16 = 112,
    AV_PIX_FMT_NV20LE = 113,
    AV_PIX_FMT_NV20BE = 114,
    AV_PIX_FMT_RGBA64BE_LIBAV = 115,
    AV_PIX_FMT_RGBA64LE_LIBAV = 116,
    AV_PIX_FMT_BGRA64BE_LIBAV = 117,
    AV_PIX_FMT_BGRA64LE_LIBAV = 118,
    AV_PIX_FMT_YVYU422 = 119,
    AV_PIX_FMT_VDA = 120,
    AV_PIX_FMT_YA16BE = 121,
    AV_PIX_FMT_YA16LE = 122,
    AV_PIX_FMT_GBRAP_LIBAV = 123,
    AV_PIX_FMT_GBRAP16BE_LIBAV = 124,
    AV_PIX_FMT_GBRAP16LE_LIBAV = 125,
    AV_PIX_FMT_QSV = 126,
    AV_PIX_FMT_MMAL = 127,
    AV_PIX_FMT_D3D11VA_VLD = 128,
    AV_PIX_FMT_RGBA64BE = 291,
    AV_PIX_FMT_RGBA64LE = 292,
    AV_PIX_FMT_BGRA64BE = 293,
    AV_PIX_FMT_BGRA64LE = 294,
    AV_PIX_FMT_0RGB = 295,
    AV_PIX_FMT_RGB0 = 296,
    AV_PIX_FMT_0BGR = 297,
    AV_PIX_FMT_BGR0 = 298,
    AV_PIX_FMT_YUVA444P = 299,
    AV_PIX_FMT_YUVA422P = 300,
    AV_PIX_FMT_YUV420P12BE = 301,
    AV_PIX_FMT_YUV420P12LE = 302,
    AV_PIX_FMT_YUV420P14BE = 303,
    AV_PIX_FMT_YUV420P14LE = 304,
    AV_PIX_FMT_YUV422P12BE = 305,
    AV_PIX_FMT_YUV422P12LE = 306,
    AV_PIX_FMT_YUV422P14BE = 307,
    AV_PIX_FMT_YUV422P14LE = 308,
    AV_PIX_FMT_YUV444P12BE = 309,
    AV_PIX_FMT_YUV444P12LE = 310,
    AV_PIX_FMT_YUV444P14BE = 311,
    AV_PIX_FMT_YUV444P14LE = 312,
    AV_PIX_FMT_GBRP12BE = 313,
    AV_PIX_FMT_GBRP12LE = 314,
    AV_PIX_FMT_GBRP14BE = 315,
    AV_PIX_FMT_GBRP14LE = 316,
    AV_PIX_FMT_GBRAP = 317,
    AV_PIX_FMT_GBRAP16BE = 318,
    AV_PIX_FMT_GBRAP16LE = 319,
    AV_PIX_FMT_YUVJ411P = 320,
    AV_PIX_FMT_BAYER_BGGR8 = 321,
    AV_PIX_FMT_BAYER_RGGB8 = 322,
    AV_PIX_FMT_BAYER_GBRG8 = 323,
    AV_PIX_FMT_BAYER_GRBG8 = 324,
    AV_PIX_FMT_BAYER_BGGR16LE = 325,
    AV_PIX_FMT_BAYER_BGGR16BE = 326,
    AV_PIX_FMT_BAYER_RGGB16LE = 327,
    AV_PIX_FMT_BAYER_RGGB16BE = 328,
    AV_PIX_FMT_BAYER_GBRG16LE = 329,
    AV_PIX_FMT_BAYER_GBRG16BE = 330,
    AV_PIX_FMT_BAYER_GRBG16LE = 331,
    AV_PIX_FMT_BAYER_GRBG16BE = 332,
    AV_PIX_FMT_YUV440P10LE = 333,
    AV_PIX_FMT_YUV440P10BE = 334,
    AV_PIX_FMT_YUV440P12LE = 335,
    AV_PIX_FMT_YUV440P12BE = 336,
    AV_PIX_FMT_AYUV64LE = 337,
    AV_PIX_FMT_AYUV64BE = 338,
    AV_PIX_FMT_VIDEOTOOLBOX = 339,
    AV_PIX_FMT_NB = 340,
}
#[repr(u32)]
/**
  * Chromaticity coordinates of the source primaries.
  */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorPrimaries {
    AVCOL_PRI_RESERVED0 = 0,
    AVCOL_PRI_BT709 = 1,
    AVCOL_PRI_UNSPECIFIED = 2,
    AVCOL_PRI_RESERVED = 3,
    AVCOL_PRI_BT470M = 4,
    AVCOL_PRI_BT470BG = 5,
    AVCOL_PRI_SMPTE170M = 6,
    AVCOL_PRI_SMPTE240M = 7,
    AVCOL_PRI_FILM = 8,
    AVCOL_PRI_BT2020 = 9,
    AVCOL_PRI_NB = 10,
}
#[repr(u32)]
/**
 * Color Transfer Characteristic.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorTransferCharacteristic {
    AVCOL_TRC_RESERVED0 = 0,
    AVCOL_TRC_BT709 = 1,
    AVCOL_TRC_UNSPECIFIED = 2,
    AVCOL_TRC_RESERVED = 3,
    AVCOL_TRC_GAMMA22 = 4,
    AVCOL_TRC_GAMMA28 = 5,
    AVCOL_TRC_SMPTE170M = 6,
    AVCOL_TRC_SMPTE240M = 7,
    AVCOL_TRC_LINEAR = 8,
    AVCOL_TRC_LOG = 9,
    AVCOL_TRC_LOG_SQRT = 10,
    AVCOL_TRC_IEC61966_2_4 = 11,
    AVCOL_TRC_BT1361_ECG = 12,
    AVCOL_TRC_IEC61966_2_1 = 13,
    AVCOL_TRC_BT2020_10 = 14,
    AVCOL_TRC_BT2020_12 = 15,
    AVCOL_TRC_NB = 16,
}
#[repr(u32)]
/**
 * YUV colorspace type.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorSpace {
    AVCOL_SPC_RGB = 0,
    AVCOL_SPC_BT709 = 1,
    AVCOL_SPC_UNSPECIFIED = 2,
    AVCOL_SPC_RESERVED = 3,
    AVCOL_SPC_FCC = 4,
    AVCOL_SPC_BT470BG = 5,
    AVCOL_SPC_SMPTE170M = 6,
    AVCOL_SPC_SMPTE240M = 7,
    AVCOL_SPC_YCOCG = 8,
    AVCOL_SPC_BT2020_NCL = 9,
    AVCOL_SPC_BT2020_CL = 10,
    AVCOL_SPC_NB = 11,
}
#[repr(u32)]
/**
 * MPEG vs JPEG YUV range.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorRange {
    AVCOL_RANGE_UNSPECIFIED = 0,
    AVCOL_RANGE_MPEG = 1,
    AVCOL_RANGE_JPEG = 2,
    AVCOL_RANGE_NB = 3,
}
#[repr(u32)]
/**
 * Location of chroma samples.
 *
 * Illustration showing the location of the first (top left) chroma sample of the
 * image, the left shows only luma, the right
 * shows the location of the chroma sample, the 2 could be imagined to overlay
 * each other but are drawn separately due to limitations of ASCII
 *
 *                1st 2nd       1st 2nd horizontal luma sample positions
 *                 v   v         v   v
 *                 ______        ______
 *1st luma line > |X   X ...    |3 4 X ...     X are luma samples,
 *                |             |1 2           1-6 are possible chroma positions
 *2nd luma line > |X   X ...    |5 6 X ...     0 is undefined/unknown position
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVChromaLocation {
    AVCHROMA_LOC_UNSPECIFIED = 0,
    AVCHROMA_LOC_LEFT = 1,
    AVCHROMA_LOC_CENTER = 2,
    AVCHROMA_LOC_TOPLEFT = 3,
    AVCHROMA_LOC_TOP = 4,
    AVCHROMA_LOC_BOTTOMLEFT = 5,
    AVCHROMA_LOC_BOTTOM = 6,
    AVCHROMA_LOC_NB = 7,
}
extern "C" {
    /**
 * Compute the length of an integer list.
 *
 * @param elsize  size in bytes of each list element (only 1, 2, 4 or 8)
 * @param term    list terminator (usually 0 or -1)
 * @param list    pointer to the list
 * @return  length of the list, in elements, not counting the terminator
 */
    pub fn av_int_list_length_for_size(elsize: ::std::os::raw::c_uint,
                                       list: *const ::std::os::raw::c_void,
                                       term: u64) -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * Open a file using a UTF-8 filename.
 * The API of this function matches POSIX fopen(), errors are returned through
 * errno.
 */
    pub fn av_fopen_utf8(path: *const ::std::os::raw::c_char,
                         mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    /**
 * Return the fractional representation of the internal time base.
 */
    pub fn av_get_time_base_q() -> AVRational;
}
#[repr(i32)]
/**
 * Audio sample formats
 *
 * - The data described by the sample format is always in native-endian order.
 *   Sample values can be expressed by native C types, hence the lack of a signed
 *   24-bit sample format even though it is a common raw audio data format.
 *
 * - The floating-point formats are based on full volume being in the range
 *   [-1.0, 1.0]. Any values outside this range are beyond full volume level.
 *
 * - The data layout as used in av_samples_fill_arrays() and elsewhere in FFmpeg
 *   (such as AVFrame in libavcodec) is as follows:
 *
 * @par
 * For planar sample formats, each audio channel is in a separate data plane,
 * and linesize is the buffer size, in bytes, for a single plane. All data
 * planes must be the same size. For packed sample formats, only the first data
 * plane is used, and samples for each channel are interleaved. In this case,
 * linesize is the buffer size, in bytes, for the 1 plane.
 *
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVSampleFormat {
    AV_SAMPLE_FMT_NONE = -1,
    AV_SAMPLE_FMT_U8 = 0,
    AV_SAMPLE_FMT_S16 = 1,
    AV_SAMPLE_FMT_S32 = 2,
    AV_SAMPLE_FMT_FLT = 3,
    AV_SAMPLE_FMT_DBL = 4,
    AV_SAMPLE_FMT_U8P = 5,
    AV_SAMPLE_FMT_S16P = 6,
    AV_SAMPLE_FMT_S32P = 7,
    AV_SAMPLE_FMT_FLTP = 8,
    AV_SAMPLE_FMT_DBLP = 9,
    AV_SAMPLE_FMT_NB = 10,
}
extern "C" {
    /**
 * Return the name of sample_fmt, or NULL if sample_fmt is not
 * recognized.
 */
    pub fn av_get_sample_fmt_name(sample_fmt: AVSampleFormat)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Return a sample format corresponding to name, or AV_SAMPLE_FMT_NONE
 * on error.
 */
    pub fn av_get_sample_fmt(name: *const ::std::os::raw::c_char)
     -> AVSampleFormat;
}
extern "C" {
    /**
 * Return the planar<->packed alternative form of the given sample format, or
 * AV_SAMPLE_FMT_NONE on error. If the passed sample_fmt is already in the
 * requested planar/packed format, the format returned is the same as the
 * input.
 */
    pub fn av_get_alt_sample_fmt(sample_fmt: AVSampleFormat,
                                 planar: ::std::os::raw::c_int)
     -> AVSampleFormat;
}
extern "C" {
    /**
 * Get the packed alternative form of the given sample format.
 *
 * If the passed sample_fmt is already in packed format, the format returned is
 * the same as the input.
 *
 * @return  the packed alternative form of the given sample format or
            AV_SAMPLE_FMT_NONE on error.
 */
    pub fn av_get_packed_sample_fmt(sample_fmt: AVSampleFormat)
     -> AVSampleFormat;
}
extern "C" {
    /**
 * Get the planar alternative form of the given sample format.
 *
 * If the passed sample_fmt is already in planar format, the format returned is
 * the same as the input.
 *
 * @return  the planar alternative form of the given sample format or
            AV_SAMPLE_FMT_NONE on error.
 */
    pub fn av_get_planar_sample_fmt(sample_fmt: AVSampleFormat)
     -> AVSampleFormat;
}
extern "C" {
    /**
 * Generate a string corresponding to the sample format with
 * sample_fmt, or a header if sample_fmt is negative.
 *
 * @param buf the buffer where to write the string
 * @param buf_size the size of buf
 * @param sample_fmt the number of the sample format to print the
 * corresponding info string, or a negative value to print the
 * corresponding header.
 * @return the pointer to the filled buffer or NULL if sample_fmt is
 * unknown or in case of other errors
 */
    pub fn av_get_sample_fmt_string(buf: *mut ::std::os::raw::c_char,
                                    buf_size: ::std::os::raw::c_int,
                                    sample_fmt: AVSampleFormat)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Return number of bytes per sample.
 *
 * @param sample_fmt the sample format
 * @return number of bytes per sample or zero if unknown for the given
 * sample format
 */
    pub fn av_get_bytes_per_sample(sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Check if the sample format is planar.
 *
 * @param sample_fmt the sample format to inspect
 * @return 1 if the sample format is planar, 0 if it is interleaved
 */
    pub fn av_sample_fmt_is_planar(sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get the required buffer size for the given audio parameters.
 *
 * @param[out] linesize calculated linesize, may be NULL
 * @param nb_channels   the number of channels
 * @param nb_samples    the number of samples in a single channel
 * @param sample_fmt    the sample format
 * @param align         buffer size alignment (0 = default, 1 = no alignment)
 * @return              required buffer size, or negative error code on failure
 */
    pub fn av_samples_get_buffer_size(linesize: *mut ::std::os::raw::c_int,
                                      nb_channels: ::std::os::raw::c_int,
                                      nb_samples: ::std::os::raw::c_int,
                                      sample_fmt: AVSampleFormat,
                                      align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Fill plane data pointers and linesize for samples with sample
 * format sample_fmt.
 *
 * The audio_data array is filled with the pointers to the samples data planes:
 * for planar, set the start point of each channel's data within the buffer,
 * for packed, set the start point of the entire buffer only.
 *
 * The value pointed to by linesize is set to the aligned size of each
 * channel's data buffer for planar layout, or to the aligned size of the
 * buffer for all channels for packed layout.
 *
 * The buffer in buf must be big enough to contain all the samples
 * (use av_samples_get_buffer_size() to compute its minimum size),
 * otherwise the audio_data pointers will point to invalid data.
 *
 * @see enum AVSampleFormat
 * The documentation for AVSampleFormat describes the data layout.
 *
 * @param[out] audio_data  array to be filled with the pointer for each channel
 * @param[out] linesize    calculated linesize, may be NULL
 * @param buf              the pointer to a buffer containing the samples
 * @param nb_channels      the number of channels
 * @param nb_samples       the number of samples in a single channel
 * @param sample_fmt       the sample format
 * @param align            buffer size alignment (0 = default, 1 = no alignment)
 * @return                 >=0 on success or a negative error code on failure
 * @todo return minimum size in bytes required for the buffer in case
 * of success at the next bump
 */
    pub fn av_samples_fill_arrays(audio_data: *mut *mut u8,
                                  linesize: *mut ::std::os::raw::c_int,
                                  buf: *const u8,
                                  nb_channels: ::std::os::raw::c_int,
                                  nb_samples: ::std::os::raw::c_int,
                                  sample_fmt: AVSampleFormat,
                                  align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Allocate a samples buffer for nb_samples samples, and fill data pointers and
 * linesize accordingly.
 * The allocated samples buffer can be freed by using av_freep(&audio_data[0])
 * Allocated data will be initialized to silence.
 *
 * @see enum AVSampleFormat
 * The documentation for AVSampleFormat describes the data layout.
 *
 * @param[out] audio_data  array to be filled with the pointer for each channel
 * @param[out] linesize    aligned size for audio buffer(s), may be NULL
 * @param nb_channels      number of audio channels
 * @param nb_samples       number of samples per channel
 * @param align            buffer size alignment (0 = default, 1 = no alignment)
 * @return                 >=0 on success or a negative error code on failure
 * @todo return the size of the allocated buffer in case of success at the next bump
 * @see av_samples_fill_arrays()
 * @see av_samples_alloc_array_and_samples()
 */
    pub fn av_samples_alloc(audio_data: *mut *mut u8,
                            linesize: *mut ::std::os::raw::c_int,
                            nb_channels: ::std::os::raw::c_int,
                            nb_samples: ::std::os::raw::c_int,
                            sample_fmt: AVSampleFormat,
                            align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Allocate a data pointers array, samples buffer for nb_samples
 * samples, and fill data pointers and linesize accordingly.
 *
 * This is the same as av_samples_alloc(), but also allocates the data
 * pointers array.
 *
 * @see av_samples_alloc()
 */
    pub fn av_samples_alloc_array_and_samples(audio_data: *mut *mut *mut u8,
                                              linesize:
                                                  *mut ::std::os::raw::c_int,
                                              nb_channels:
                                                  ::std::os::raw::c_int,
                                              nb_samples:
                                                  ::std::os::raw::c_int,
                                              sample_fmt: AVSampleFormat,
                                              align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy samples from src to dst.
 *
 * @param dst destination array of pointers to data planes
 * @param src source array of pointers to data planes
 * @param dst_offset offset in samples at which the data will be written to dst
 * @param src_offset offset in samples at which the data will be read from src
 * @param nb_samples number of samples to be copied
 * @param nb_channels number of audio channels
 * @param sample_fmt audio sample format
 */
    pub fn av_samples_copy(dst: *mut *mut u8, src: *const *const u8,
                           dst_offset: ::std::os::raw::c_int,
                           src_offset: ::std::os::raw::c_int,
                           nb_samples: ::std::os::raw::c_int,
                           nb_channels: ::std::os::raw::c_int,
                           sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Fill an audio buffer with silence.
 *
 * @param audio_data  array of pointers to data planes
 * @param offset      offset in samples at which to start filling
 * @param nb_samples  number of samples to fill
 * @param nb_channels number of audio channels
 * @param sample_fmt  audio sample format
 */
    pub fn av_samples_set_silence(audio_data: *mut *mut u8,
                                  offset: ::std::os::raw::c_int,
                                  nb_samples: ::std::os::raw::c_int,
                                  nb_channels: ::std::os::raw::c_int,
                                  sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBuffer([u8; 0]);
/**
 * A reference to a data buffer.
 *
 * The size of this struct is not a part of the public ABI and it is not meant
 * to be allocated directly.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVBufferRef {
    pub buffer: *mut AVBuffer,
    /**
     * The data buffer. It is considered writable if and only if
     * this is the only reference to the buffer, in which case
     * av_buffer_is_writable() returns 1.
     */
    pub data: *mut u8,
    /**
     * Size of data in bytes.
     */
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVBufferRef() {
    assert_eq!(::std::mem::size_of::<AVBufferRef>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVBufferRef>() , 8usize);
}
impl Clone for AVBufferRef {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /**
 * Allocate an AVBuffer of the given size using av_malloc().
 *
 * @return an AVBufferRef of given size or NULL when out of memory
 */
    pub fn av_buffer_alloc(size: ::std::os::raw::c_int) -> *mut AVBufferRef;
}
extern "C" {
    /**
 * Same as av_buffer_alloc(), except the returned buffer will be initialized
 * to zero.
 */
    pub fn av_buffer_allocz(size: ::std::os::raw::c_int) -> *mut AVBufferRef;
}
extern "C" {
    /**
 * Create an AVBuffer from an existing array.
 *
 * If this function is successful, data is owned by the AVBuffer. The caller may
 * only access data through the returned AVBufferRef and references derived from
 * it.
 * If this function fails, data is left untouched.
 * @param data   data array
 * @param size   size of data in bytes
 * @param free   a callback for freeing this buffer's data
 * @param opaque parameter to be got for processing or passed to free
 * @param flags  a combination of AV_BUFFER_FLAG_*
 *
 * @return an AVBufferRef referring to data on success, NULL on failure.
 */
    pub fn av_buffer_create(data: *mut u8, size: ::std::os::raw::c_int,
                            free:
                                ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                               *mut ::std::os::raw::c_void,
                                                                           data:
                                                                               *mut u8)>,
                            opaque: *mut ::std::os::raw::c_void,
                            flags: ::std::os::raw::c_int) -> *mut AVBufferRef;
}
extern "C" {
    /**
 * Default free callback, which calls av_free() on the buffer data.
 * This function is meant to be passed to av_buffer_create(), not called
 * directly.
 */
    pub fn av_buffer_default_free(opaque: *mut ::std::os::raw::c_void,
                                  data: *mut u8);
}
extern "C" {
    /**
 * Create a new reference to an AVBuffer.
 *
 * @return a new AVBufferRef referring to the same AVBuffer as buf or NULL on
 * failure.
 */
    pub fn av_buffer_ref(buf: *mut AVBufferRef) -> *mut AVBufferRef;
}
extern "C" {
    /**
 * Free a given reference and automatically free the buffer if there are no more
 * references to it.
 *
 * @param buf the reference to be freed. The pointer is set to NULL on return.
 */
    pub fn av_buffer_unref(buf: *mut *mut AVBufferRef);
}
extern "C" {
    /**
 * @return 1 if the caller may write to the data referred to by buf (which is
 * true if and only if buf is the only reference to the underlying AVBuffer).
 * Return 0 otherwise.
 * A positive answer is valid until av_buffer_ref() is called on buf.
 */
    pub fn av_buffer_is_writable(buf: *const AVBufferRef)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @return the opaque parameter set by av_buffer_create.
 */
    pub fn av_buffer_get_opaque(buf: *const AVBufferRef)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_buffer_get_ref_count(buf: *const AVBufferRef)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Create a writable reference from a given buffer reference, avoiding data copy
 * if possible.
 *
 * @param buf buffer reference to make writable. On success, buf is either left
 *            untouched, or it is unreferenced and a new writable AVBufferRef is
 *            written in its place. On failure, buf is left untouched.
 * @return 0 on success, a negative AVERROR on failure.
 */
    pub fn av_buffer_make_writable(buf: *mut *mut AVBufferRef)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Reallocate a given buffer.
 *
 * @param buf  a buffer reference to reallocate. On success, buf will be
 *             unreferenced and a new reference with the required size will be
 *             written in its place. On failure buf will be left untouched. *buf
 *             may be NULL, then a new buffer is allocated.
 * @param size required new buffer size.
 * @return 0 on success, a negative AVERROR on failure.
 *
 * @note the buffer is actually reallocated with av_realloc() only if it was
 * initially allocated through av_buffer_realloc(NULL) and there is only one
 * reference to it (i.e. the one passed to this function). In all other cases
 * a new buffer is allocated and the data is copied.
 */
    pub fn av_buffer_realloc(buf: *mut *mut AVBufferRef,
                             size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBufferPool([u8; 0]);
extern "C" {
    /**
 * Allocate and initialize a buffer pool.
 *
 * @param size size of each buffer in this pool
 * @param alloc a function that will be used to allocate new buffers when the
 * pool is empty. May be NULL, then the default allocator will be used
 * (av_buffer_alloc()).
 * @return newly created buffer pool on success, NULL on error.
 */
    pub fn av_buffer_pool_init(size: ::std::os::raw::c_int,
                               alloc:
                                   ::std::option::Option<unsafe extern "C" fn(size:
                                                                                  ::std::os::raw::c_int)
                                                             ->
                                                                 *mut AVBufferRef>)
     -> *mut AVBufferPool;
}
extern "C" {
    /**
 * Mark the pool as being available for freeing. It will actually be freed only
 * once all the allocated buffers associated with the pool are released. Thus it
 * is safe to call this function while some of the allocated buffers are still
 * in use.
 *
 * @param pool pointer to the pool to be freed. It will be set to NULL.
 * @see av_buffer_pool_can_uninit()
 */
    pub fn av_buffer_pool_uninit(pool: *mut *mut AVBufferPool);
}
extern "C" {
    /**
 * Allocate a new AVBuffer, reusing an old buffer from the pool when available.
 * This function may be called simultaneously from multiple threads.
 *
 * @return a reference to the new buffer on success, NULL on error.
 */
    pub fn av_buffer_pool_get(pool: *mut AVBufferPool) -> *mut AVBufferRef;
}
extern "C" {
    /**
 * Return the flags which specify extensions supported by the CPU.
 * The returned value is affected by av_force_cpu_flags() if that was used
 * before. So av_get_cpu_flags() can easily be used in a application to
 * detect the enabled cpu flags.
 */
    pub fn av_get_cpu_flags() -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Disables cpu detection and forces the specified flags.
 * -1 is a special case that disables forcing of specific flags.
 */
    pub fn av_force_cpu_flags(flags: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Set a mask on flags returned by av_get_cpu_flags().
 * This function is mainly useful for testing.
 * Please use av_force_cpu_flags() and av_get_cpu_flags() instead which are more flexible
 *
 * @warning this function is not thread safe.
 */
    pub fn av_set_cpu_flags_mask(mask: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Parse CPU flags from a string.
 *
 * The returned flags contain the specified flags as well as related unspecified flags.
 *
 * This function exists only for compatibility with libav.
 * Please use av_parse_cpu_caps() when possible.
 * @return a combination of AV_CPU_* flags, negative on error.
 */
    pub fn av_parse_cpu_flags(s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Parse CPU caps from a string and update the given AV_CPU_* flags based on that.
 *
 * @return negative on error.
 */
    pub fn av_parse_cpu_caps(flags: *mut ::std::os::raw::c_uint,
                             s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @return the number of logical CPU cores present.
 */
    pub fn av_cpu_count() -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVMatrixEncoding {
    AV_MATRIX_ENCODING_NONE = 0,
    AV_MATRIX_ENCODING_DOLBY = 1,
    AV_MATRIX_ENCODING_DPLII = 2,
    AV_MATRIX_ENCODING_DPLIIX = 3,
    AV_MATRIX_ENCODING_DPLIIZ = 4,
    AV_MATRIX_ENCODING_DOLBYEX = 5,
    AV_MATRIX_ENCODING_DOLBYHEADPHONE = 6,
    AV_MATRIX_ENCODING_NB = 7,
}
extern "C" {
    /**
 * Return a channel layout id that matches name, or 0 if no match is found.
 *
 * name can be one or several of the following notations,
 * separated by '+' or '|':
 * - the name of an usual channel layout (mono, stereo, 4.0, quad, 5.0,
 *   5.0(side), 5.1, 5.1(side), 7.1, 7.1(wide), downmix);
 * - the name of a single channel (FL, FR, FC, LFE, BL, BR, FLC, FRC, BC,
 *   SL, SR, TC, TFL, TFC, TFR, TBL, TBC, TBR, DL, DR);
 * - a number of channels, in decimal, optionally followed by 'c', yielding
 *   the default channel layout for that number of channels (@see
 *   av_get_default_channel_layout);
 * - a channel layout mask, in hexadecimal starting with "0x" (see the
 *   AV_CH_* macros).
 *
 * @warning Starting from the next major bump the trailing character
 * 'c' to specify a number of channels will be required, while a
 * channel layout mask could also be specified as a decimal number
 * (if and only if not followed by "c").
 *
 * Example: "stereo+FC" = "2c+FC" = "2c+1c" = "0x7"
 */
    pub fn av_get_channel_layout(name: *const ::std::os::raw::c_char) -> u64;
}
extern "C" {
    /**
 * Return a description of a channel layout.
 * If nb_channels is <= 0, it is guessed from the channel_layout.
 *
 * @param buf put here the string containing the channel layout
 * @param buf_size size in bytes of the buffer
 */
    pub fn av_get_channel_layout_string(buf: *mut ::std::os::raw::c_char,
                                        buf_size: ::std::os::raw::c_int,
                                        nb_channels: ::std::os::raw::c_int,
                                        channel_layout: u64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBPrint([u8; 0]);
extern "C" {
    /**
 * Append a description of a channel layout to a bprint buffer.
 */
    pub fn av_bprint_channel_layout(bp: *mut AVBPrint,
                                    nb_channels: ::std::os::raw::c_int,
                                    channel_layout: u64);
}
extern "C" {
    /**
 * Return the number of channels in the channel layout.
 */
    pub fn av_get_channel_layout_nb_channels(channel_layout: u64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return default channel layout for a given number of channels.
 */
    pub fn av_get_default_channel_layout(nb_channels: ::std::os::raw::c_int)
     -> i64;
}
extern "C" {
    /**
 * Get the index of a channel in channel_layout.
 *
 * @param channel a channel layout describing exactly one channel which must be
 *                present in channel_layout.
 *
 * @return index of channel in channel_layout on success, a negative AVERROR
 *         on error.
 */
    pub fn av_get_channel_layout_channel_index(channel_layout: u64,
                                               channel: u64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get the channel with the given index in channel_layout.
 */
    pub fn av_channel_layout_extract_channel(channel_layout: u64,
                                             index: ::std::os::raw::c_int)
     -> u64;
}
extern "C" {
    /**
 * Get the name of a given channel.
 *
 * @return channel name on success, NULL on error.
 */
    pub fn av_get_channel_name(channel: u64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Get the description of a given channel.
 *
 * @param channel  a channel layout with a single channel
 * @return  channel description on success, NULL on error
 */
    pub fn av_get_channel_description(channel: u64)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Get the value and name of a standard channel layout.
 *
 * @param[in]  index   index in an internal list, starting at 0
 * @param[out] layout  channel layout mask
 * @param[out] name    name of the layout
 * @return  0  if the layout exists,
 *          <0 if index is beyond the limits
 */
    pub fn av_get_standard_channel_layout(index: ::std::os::raw::c_uint,
                                          layout: *mut u64,
                                          name:
                                              *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVDictionaryEntry {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVDictionaryEntry() {
    assert_eq!(::std::mem::size_of::<AVDictionaryEntry>() , 16usize);
    assert_eq!(::std::mem::align_of::<AVDictionaryEntry>() , 8usize);
}
impl Clone for AVDictionaryEntry {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDictionary([u8; 0]);
extern "C" {
    /**
 * Get a dictionary entry with matching key.
 *
 * The returned entry key or value must not be changed, or it will
 * cause undefined behavior.
 *
 * To iterate through all the dictionary entries, you can set the matching key
 * to the null string "" and set the AV_DICT_IGNORE_SUFFIX flag.
 *
 * @param prev Set to the previous matching element to find the next.
 *             If set to NULL the first matching element is returned.
 * @param key matching key
 * @param flags a collection of AV_DICT_* flags controlling how the entry is retrieved
 * @return found entry or NULL in case no matching entry was found in the dictionary
 */
    pub fn av_dict_get(m: *const AVDictionary,
                       key: *const ::std::os::raw::c_char,
                       prev: *const AVDictionaryEntry,
                       flags: ::std::os::raw::c_int)
     -> *mut AVDictionaryEntry;
}
extern "C" {
    /**
 * Get number of entries in dictionary.
 *
 * @param m dictionary
 * @return  number of entries in dictionary
 */
    pub fn av_dict_count(m: *const AVDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Set the given entry in *pm, overwriting an existing entry.
 *
 * Note: If AV_DICT_DONT_STRDUP_KEY or AV_DICT_DONT_STRDUP_VAL is set,
 * these arguments will be freed on error.
 *
 * @param pm pointer to a pointer to a dictionary struct. If *pm is NULL
 * a dictionary struct is allocated and put in *pm.
 * @param key entry key to add to *pm (will be av_strduped depending on flags)
 * @param value entry value to add to *pm (will be av_strduped depending on flags).
 *        Passing a NULL value will cause an existing entry to be deleted.
 * @return >= 0 on success otherwise an error code <0
 */
    pub fn av_dict_set(pm: *mut *mut AVDictionary,
                       key: *const ::std::os::raw::c_char,
                       value: *const ::std::os::raw::c_char,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Convenience wrapper for av_dict_set that converts the value to a string
 * and stores it.
 *
 * Note: If AV_DICT_DONT_STRDUP_KEY is set, key will be freed on error.
 */
    pub fn av_dict_set_int(pm: *mut *mut AVDictionary,
                           key: *const ::std::os::raw::c_char, value: i64,
                           flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Parse the key/value pairs list and add the parsed entries to a dictionary.
 *
 * In case of failure, all the successfully set entries are stored in
 * *pm. You may need to manually free the created dictionary.
 *
 * @param key_val_sep  a 0-terminated list of characters used to separate
 *                     key from value
 * @param pairs_sep    a 0-terminated list of characters used to separate
 *                     two pairs from each other
 * @param flags        flags to use when adding to dictionary.
 *                     AV_DICT_DONT_STRDUP_KEY and AV_DICT_DONT_STRDUP_VAL
 *                     are ignored since the key/value tokens will always
 *                     be duplicated.
 * @return             0 on success, negative AVERROR code on failure
 */
    pub fn av_dict_parse_string(pm: *mut *mut AVDictionary,
                                str: *const ::std::os::raw::c_char,
                                key_val_sep: *const ::std::os::raw::c_char,
                                pairs_sep: *const ::std::os::raw::c_char,
                                flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy entries from one AVDictionary struct into another.
 * @param dst pointer to a pointer to a AVDictionary struct. If *dst is NULL,
 *            this function will allocate a struct for you and put it in *dst
 * @param src pointer to source AVDictionary struct
 * @param flags flags to use when setting entries in *dst
 * @note metadata is read using the AV_DICT_IGNORE_SUFFIX flag
 */
    pub fn av_dict_copy(dst: *mut *mut AVDictionary, src: *const AVDictionary,
                        flags: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Free all the memory allocated for an AVDictionary struct
 * and all keys and values.
 */
    pub fn av_dict_free(m: *mut *mut AVDictionary);
}
extern "C" {
    /**
 * Get dictionary entries as a string.
 *
 * Create a string containing dictionary's entries.
 * Such string may be passed back to av_dict_parse_string().
 * @note String is escaped with backslashes ('\').
 *
 * @param[in]  m             dictionary
 * @param[out] buffer        Pointer to buffer that will be allocated with string containg entries.
 *                           Buffer must be freed by the caller when is no longer needed.
 * @param[in]  key_val_sep   character used to separate key from value
 * @param[in]  pairs_sep     character used to separate two pairs from each other
 * @return                   >= 0 on success, negative on error
 * @warning Separators cannot be neither '\\' nor '\0'. They also cannot be the same.
 */
    pub fn av_dict_get_string(m: *const AVDictionary,
                              buffer: *mut *mut ::std::os::raw::c_char,
                              key_val_sep: ::std::os::raw::c_char,
                              pairs_sep: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
/**
 * @defgroup lavu_frame AVFrame
 * @ingroup lavu_data
 *
 * @{
 * AVFrame is an abstraction for reference-counted raw multimedia data.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVFrameSideDataType {
    AV_FRAME_DATA_PANSCAN = 0,
    AV_FRAME_DATA_A53_CC = 1,
    AV_FRAME_DATA_STEREO3D = 2,
    AV_FRAME_DATA_MATRIXENCODING = 3,
    AV_FRAME_DATA_DOWNMIX_INFO = 4,
    AV_FRAME_DATA_REPLAYGAIN = 5,
    AV_FRAME_DATA_DISPLAYMATRIX = 6,
    AV_FRAME_DATA_AFD = 7,
    AV_FRAME_DATA_MOTION_VECTORS = 8,
    AV_FRAME_DATA_SKIP_SAMPLES = 9,
    AV_FRAME_DATA_AUDIO_SERVICE_TYPE = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVActiveFormatDescription {
    AV_AFD_SAME = 8,
    AV_AFD_4_3 = 9,
    AV_AFD_16_9 = 10,
    AV_AFD_14_9 = 11,
    AV_AFD_4_3_SP_14_9 = 13,
    AV_AFD_16_9_SP_14_9 = 14,
    AV_AFD_SP_4_3 = 15,
}
/**
 * Structure to hold side data for an AVFrame.
 *
 * sizeof(AVFrameSideData) is not a part of the public ABI, so new fields may be added
 * to the end with a minor bump.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrameSideData {
    pub type_: AVFrameSideDataType,
    pub data: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub metadata: *mut AVDictionary,
    pub buf: *mut AVBufferRef,
}
#[test]
fn bindgen_test_layout_AVFrameSideData() {
    assert_eq!(::std::mem::size_of::<AVFrameSideData>() , 40usize);
    assert_eq!(::std::mem::align_of::<AVFrameSideData>() , 8usize);
}
impl Clone for AVFrameSideData {
    fn clone(&self) -> Self { *self }
}
/**
 * This structure describes decoded (raw) audio or video data.
 *
 * AVFrame must be allocated using av_frame_alloc(). Note that this only
 * allocates the AVFrame itself, the buffers for the data must be managed
 * through other means (see below).
 * AVFrame must be freed with av_frame_free().
 *
 * AVFrame is typically allocated once and then reused multiple times to hold
 * different data (e.g. a single AVFrame to hold frames received from a
 * decoder). In such a case, av_frame_unref() will free any references held by
 * the frame and reset it to its original clean state before it
 * is reused again.
 *
 * The data described by an AVFrame is usually reference counted through the
 * AVBuffer API. The underlying buffer references are stored in AVFrame.buf /
 * AVFrame.extended_buf. An AVFrame is considered to be reference counted if at
 * least one reference is set, i.e. if AVFrame.buf[0] != NULL. In such a case,
 * every single data plane must be contained in one of the buffers in
 * AVFrame.buf or AVFrame.extended_buf.
 * There may be a single buffer for all the data, or one separate buffer for
 * each plane, or anything in between.
 *
 * sizeof(AVFrame) is not a part of the public ABI, so new fields may be added
 * to the end with a minor bump.
 * Similarly fields that are marked as to be only accessed by
 * av_opt_ptr() can be reordered. This allows 2 forks to add fields
 * without breaking compatibility with each other.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrame {
    /**
     * pointer to the picture/channel planes.
     * This might be different from the first allocated byte
     *
     * Some decoders access areas outside 0,0 - width,height, please
     * see avcodec_align_dimensions2(). Some filters and swscale can read
     * up to 16 bytes beyond the planes, if these filters are to be used,
     * then 16 extra bytes must be allocated.
     */
    pub data: [*mut u8; 8usize],
    /**
     * For video, size in bytes of each picture line.
     * For audio, size in bytes of each plane.
     *
     * For audio, only linesize[0] may be set. For planar audio, each channel
     * plane must be the same size.
     *
     * For video the linesizes should be multiples of the CPUs alignment
     * preference, this is 16 or 32 for modern desktop CPUs.
     * Some code requires such alignment other code can be slower without
     * correct alignment, for yet other it makes no difference.
     *
     * @note The linesize may be larger than the size of usable data -- there
     * may be extra padding present for performance reasons.
     */
    pub linesize: [::std::os::raw::c_int; 8usize],
    /**
     * pointers to the data planes/channels.
     *
     * For video, this should simply point to data[].
     *
     * For planar audio, each channel has a separate data pointer, and
     * linesize[0] contains the size of each channel buffer.
     * For packed audio, there is just one data pointer, and linesize[0]
     * contains the total size of the buffer for all channels.
     *
     * Note: Both data and extended_data should always be set in a valid frame,
     * but for planar audio with more channels that can fit in data,
     * extended_data must be used in order to access all channels.
     */
    pub extended_data: *mut *mut u8,
    /**
     * width and height of the video frame
     */
    pub width: ::std::os::raw::c_int,
    /**
     * width and height of the video frame
     */
    pub height: ::std::os::raw::c_int,
    /**
     * number of audio samples (per channel) described by this frame
     */
    pub nb_samples: ::std::os::raw::c_int,
    /**
     * format of the frame, -1 if unknown or unset
     * Values correspond to enum AVPixelFormat for video frames,
     * enum AVSampleFormat for audio)
     */
    pub format: ::std::os::raw::c_int,
    /**
     * 1 -> keyframe, 0-> not
     */
    pub key_frame: ::std::os::raw::c_int,
    /**
     * Picture type of the frame.
     */
    pub pict_type: AVPictureType,
    pub base: [*mut u8; 8usize],
    /**
     * Sample aspect ratio for the video frame, 0/1 if unknown/unspecified.
     */
    pub sample_aspect_ratio: AVRational,
    /**
     * Presentation timestamp in time_base units (time when frame should be shown to user).
     */
    pub pts: i64,
    /**
     * PTS copied from the AVPacket that was decoded to produce this frame.
     */
    pub pkt_pts: i64,
    /**
     * DTS copied from the AVPacket that triggered returning this frame. (if frame threading isn't used)
     * This is also the Presentation time of this AVFrame calculated from
     * only AVPacket.dts values without pts values.
     */
    pub pkt_dts: i64,
    /**
     * picture number in bitstream order
     */
    pub coded_picture_number: ::std::os::raw::c_int,
    /**
     * picture number in display order
     */
    pub display_picture_number: ::std::os::raw::c_int,
    /**
     * quality (between 1 (good) and FF_LAMBDA_MAX (bad))
     */
    pub quality: ::std::os::raw::c_int,
    pub reference: ::std::os::raw::c_int,
    /**
     * QP table
     */
    pub qscale_table: *mut i8,
    /**
     * QP store stride
     */
    pub qstride: ::std::os::raw::c_int,
    pub qscale_type: ::std::os::raw::c_int,
    /**
     * mbskip_table[mb]>=1 if MB didn't change
     * stride= mb_width = (width+15)>>4
     */
    pub mbskip_table: *mut u8,
    /**
     * motion vector table
     * @code
     * example:
     * int mv_sample_log2= 4 - motion_subsample_log2;
     * int mb_width= (width+15)>>4;
     * int mv_stride= (mb_width << mv_sample_log2) + 1;
     * motion_val[direction][x + y*mv_stride][0->mv_x, 1->mv_y];
     * @endcode
     */
    pub motion_val: [*mut [::std::os::raw::c_short; 2usize]; 2usize],
    /**
     * macroblock type table
     * mb_type_base + mb_width + 2
     */
    pub mb_type: *mut u32,
    /**
     * DCT coefficients
     */
    pub dct_coeff: *mut ::std::os::raw::c_short,
    /**
     * motion reference frame index
     * the order in which these are stored can depend on the codec.
     */
    pub ref_index: [*mut i8; 2usize],
    /**
     * for some private data of the user
     */
    pub opaque: *mut ::std::os::raw::c_void,
    /**
     * error
     */
    pub error: [u64; 8usize],
    pub type_: ::std::os::raw::c_int,
    /**
     * When decoding, this signals how much the picture must be delayed.
     * extra_delay = repeat_pict / (2*fps)
     */
    pub repeat_pict: ::std::os::raw::c_int,
    /**
     * The content of the picture is interlaced.
     */
    pub interlaced_frame: ::std::os::raw::c_int,
    /**
     * If the content is interlaced, is top field displayed first.
     */
    pub top_field_first: ::std::os::raw::c_int,
    /**
     * Tell user application that palette has changed from previous frame.
     */
    pub palette_has_changed: ::std::os::raw::c_int,
    pub buffer_hints: ::std::os::raw::c_int,
    /**
     * Pan scan.
     */
    pub pan_scan: *mut AVFrame_AVPanScan,
    /**
     * reordered opaque 64bit (generally an integer or a double precision float
     * PTS but can be anything).
     * The user sets AVCodecContext.reordered_opaque to represent the input at
     * that time,
     * the decoder reorders values as needed and sets AVFrame.reordered_opaque
     * to exactly one of the values provided by the user through AVCodecContext.reordered_opaque
     * @deprecated in favor of pkt_pts
     */
    pub reordered_opaque: i64,
    /**
     * @deprecated this field is unused
     */
    pub hwaccel_picture_private: *mut ::std::os::raw::c_void,
    pub owner: *mut AVFrame_AVCodecContext,
    pub thread_opaque: *mut ::std::os::raw::c_void,
    /**
     * log2 of the size of the block which a single vector in motion_val represents:
     * (4->16x16, 3->8x8, 2-> 4x4, 1-> 2x2)
     */
    pub motion_subsample_log2: u8,
    /**
     * Sample rate of the audio data.
     */
    pub sample_rate: ::std::os::raw::c_int,
    /**
     * Channel layout of the audio data.
     */
    pub channel_layout: u64,
    /**
     * AVBuffer references backing the data for this frame. If all elements of
     * this array are NULL, then this frame is not reference counted. This array
     * must be filled contiguously -- if buf[i] is non-NULL then buf[j] must
     * also be non-NULL for all j < i.
     *
     * There may be at most one AVBuffer per data plane, so for video this array
     * always contains all the references. For planar audio with more than
     * AV_NUM_DATA_POINTERS channels, there may be more buffers than can fit in
     * this array. Then the extra AVBufferRef pointers are stored in the
     * extended_buf array.
     */
    pub buf: [*mut AVBufferRef; 8usize],
    /**
     * For planar audio which requires more than AV_NUM_DATA_POINTERS
     * AVBufferRef pointers, this array will hold all the references which
     * cannot fit into AVFrame.buf.
     *
     * Note that this is different from AVFrame.extended_data, which always
     * contains all the pointers. This array only contains the extra pointers,
     * which cannot fit into AVFrame.buf.
     *
     * This array is always allocated using av_malloc() by whoever constructs
     * the frame. It is freed in av_frame_unref().
     */
    pub extended_buf: *mut *mut AVBufferRef,
    /**
     * Number of elements in extended_buf.
     */
    pub nb_extended_buf: ::std::os::raw::c_int,
    pub side_data: *mut *mut AVFrameSideData,
    pub nb_side_data: ::std::os::raw::c_int,
    /**
     * Frame flags, a combination of @ref lavu_frame_flags
     */
    pub flags: ::std::os::raw::c_int,
    /**
     * MPEG vs JPEG YUV range.
     * It must be accessed using av_frame_get_color_range() and
     * av_frame_set_color_range().
     * - encoding: Set by user
     * - decoding: Set by libavcodec
     */
    pub color_range: AVColorRange,
    pub color_primaries: AVColorPrimaries,
    pub color_trc: AVColorTransferCharacteristic,
    /**
     * YUV colorspace type.
     * It must be accessed using av_frame_get_colorspace() and
     * av_frame_set_colorspace().
     * - encoding: Set by user
     * - decoding: Set by libavcodec
     */
    pub colorspace: AVColorSpace,
    pub chroma_location: AVChromaLocation,
    /**
     * frame timestamp estimated using various heuristics, in stream time base
     * Code outside libavutil should access this field using:
     * av_frame_get_best_effort_timestamp(frame)
     * - encoding: unused
     * - decoding: set by libavcodec, read by user.
     */
    pub best_effort_timestamp: i64,
    /**
     * reordered pos from the last AVPacket that has been input into the decoder
     * Code outside libavutil should access this field using:
     * av_frame_get_pkt_pos(frame)
     * - encoding: unused
     * - decoding: Read by user.
     */
    pub pkt_pos: i64,
    /**
     * duration of the corresponding packet, expressed in
     * AVStream->time_base units, 0 if unknown.
     * Code outside libavutil should access this field using:
     * av_frame_get_pkt_duration(frame)
     * - encoding: unused
     * - decoding: Read by user.
     */
    pub pkt_duration: i64,
    /**
     * metadata.
     * Code outside libavutil should access this field using:
     * av_frame_get_metadata(frame)
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub metadata: *mut AVDictionary,
    /**
     * decode error flags of the frame, set to a combination of
     * FF_DECODE_ERROR_xxx flags if the decoder produced a frame, but there
     * were errors during the decoding.
     * Code outside libavutil should access this field using:
     * av_frame_get_decode_error_flags(frame)
     * - encoding: unused
     * - decoding: set by libavcodec, read by user.
     */
    pub decode_error_flags: ::std::os::raw::c_int,
    /**
     * number of audio channels, only used for audio.
     * Code outside libavutil should access this field using:
     * av_frame_get_channels(frame)
     * - encoding: unused
     * - decoding: Read by user.
     */
    pub channels: ::std::os::raw::c_int,
    /**
     * size of the corresponding packet containing the compressed
     * frame. It must be accessed using av_frame_get_pkt_size() and
     * av_frame_set_pkt_size().
     * It is set to a negative value if unknown.
     * - encoding: unused
     * - decoding: set by libavcodec, read by user.
     */
    pub pkt_size: ::std::os::raw::c_int,
    /**
     * Not to be accessed directly from outside libavutil
     */
    pub qp_table_buf: *mut AVBufferRef,
}
/**
 * Pan Scan area.
 * This specifies the area which should be displayed.
 * Note there may be multiple such areas for one frame.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrame_AVPanScan {
    /**
     * id
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub id: ::std::os::raw::c_int,
    /**
     * width and height in 1/16 pel
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    /**
     * position of the top left corner in 1/16 pel for up to 3 fields/frames
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub position: [[i16; 2usize]; 3usize],
}
#[test]
fn bindgen_test_layout_AVFrame_AVPanScan() {
    assert_eq!(::std::mem::size_of::<AVFrame_AVPanScan>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVFrame_AVPanScan>() , 4usize);
}
impl Clone for AVFrame_AVPanScan {
    fn clone(&self) -> Self { *self }
}
/**
 * main external API structure.
 * New fields can be added to the end with minor version bumps.
 * Removal, reordering and changes to existing fields require a major
 * version bump.
 * Please use AVOptions (av_opt* / av_set/get*()) to access these fields from user
 * applications.
 * sizeof(AVCodecContext) must not be used outside libav*.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrame_AVCodecContext {
    /**
     * information on struct for av_log
     * - set by avcodec_alloc_context3
     */
    pub av_class: *const AVClass,
    pub log_level_offset: ::std::os::raw::c_int,
    pub codec_type: AVMediaType,
    pub codec: *const AVFrame_AVCodecContext_AVCodec,
    /**
     * @deprecated this field is not used for anything in libavcodec
     */
    pub codec_name: [::std::os::raw::c_char; 32usize],
    pub codec_id: AVCodecID,
    /**
     * fourcc (LSB first, so "ABCD" -> ('D'<<24) + ('C'<<16) + ('B'<<8) + 'A').
     * This is used to work around some encoder bugs.
     * A demuxer should set this to what is stored in the field used to identify the codec.
     * If there are multiple such fields in a container then the demuxer should choose the one
     * which maximizes the information about the used codec.
     * If the codec tag field in a container is larger than 32 bits then the demuxer should
     * remap the longer ID to 32 bits with a table or other structure. Alternatively a new
     * extra_codec_tag + size could be added but for this a clear advantage must be demonstrated
     * first.
     * - encoding: Set by user, if not then the default based on codec_id will be used.
     * - decoding: Set by user, will be converted to uppercase by libavcodec during init.
     */
    pub codec_tag: ::std::os::raw::c_uint,
    /**
     * @deprecated this field is unused
     */
    pub stream_codec_tag: ::std::os::raw::c_uint,
    pub priv_data: *mut ::std::os::raw::c_void,
    /**
     * Private context used for internal data.
     *
     * Unlike priv_data, this is not codec-specific. It is used in general
     * libavcodec functions.
     */
    pub internal: *mut AVCodecInternal,
    /**
     * Private data of the user, can be used to carry app specific stuff.
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub opaque: *mut ::std::os::raw::c_void,
    /**
     * the average bitrate
     * - encoding: Set by user; unused for constant quantizer encoding.
     * - decoding: Set by user, may be overwritten by libavcodec
     *             if this info is available in the stream
     */
    pub bit_rate: ::std::os::raw::c_int,
    /**
     * number of bits the bitstream is allowed to diverge from the reference.
     *           the reference can be CBR (for CBR pass1) or VBR (for pass2)
     * - encoding: Set by user; unused for constant quantizer encoding.
     * - decoding: unused
     */
    pub bit_rate_tolerance: ::std::os::raw::c_int,
    /**
     * Global quality for codecs which cannot change it per frame.
     * This should be proportional to MPEG-1/2/4 qscale.
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub global_quality: ::std::os::raw::c_int,
    /**
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub compression_level: ::std::os::raw::c_int,
    /**
     * AV_CODEC_FLAG_*.
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub flags: ::std::os::raw::c_int,
    /**
     * AV_CODEC_FLAG2_*
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub flags2: ::std::os::raw::c_int,
    /**
     * some codecs need / can use extradata like Huffman tables.
     * mjpeg: Huffman tables
     * rv10: additional flags
     * mpeg4: global headers (they can be in the bitstream or here)
     * The allocated memory should be AV_INPUT_BUFFER_PADDING_SIZE bytes larger
     * than extradata_size to avoid problems if it is read with the bitstream reader.
     * The bytewise contents of extradata must not depend on the architecture or CPU endianness.
     * - encoding: Set/allocated/freed by libavcodec.
     * - decoding: Set/allocated/freed by user.
     */
    pub extradata: *mut u8,
    pub extradata_size: ::std::os::raw::c_int,
    /**
     * This is the fundamental unit of time (in seconds) in terms
     * of which frame timestamps are represented. For fixed-fps content,
     * timebase should be 1/framerate and timestamp increments should be
     * identically 1.
     * This often, but not always is the inverse of the frame rate or field rate
     * for video.
     * - encoding: MUST be set by user.
     * - decoding: the use of this field for decoding is deprecated.
     *             Use framerate instead.
     */
    pub time_base: AVRational,
    /**
     * For some codecs, the time base is closer to the field rate than the frame rate.
     * Most notably, H.264 and MPEG-2 specify time_base as half of frame duration
     * if no telecine is used ...
     *
     * Set to time_base ticks per frame. Default 1, e.g., H.264/MPEG-2 set it to 2.
     */
    pub ticks_per_frame: ::std::os::raw::c_int,
    /**
     * Codec delay.
     *
     * Encoding: Number of frames delay there will be from the encoder input to
     *           the decoder output. (we assume the decoder matches the spec)
     * Decoding: Number of frames delay in addition to what a standard decoder
     *           as specified in the spec would produce.
     *
     * Video:
     *   Number of frames the decoded output will be delayed relative to the
     *   encoded input.
     *
     * Audio:
     *   For encoding, this field is unused (see initial_padding).
     *
     *   For decoding, this is the number of samples the decoder needs to
     *   output before the decoder's output is valid. When seeking, you should
     *   start decoding this many samples prior to your desired seek point.
     *
     * - encoding: Set by libavcodec.
     * - decoding: Set by libavcodec.
     */
    pub delay: ::std::os::raw::c_int,
    /**
     * picture width / height.
     *
     * @note Those fields may not match the values of the last
     * AVFrame outputted by avcodec_decode_video2 due frame
     * reordering.
     *
     * - encoding: MUST be set by user.
     * - decoding: May be set by the user before opening the decoder if known e.g.
     *             from the container. Some decoders will require the dimensions
     *             to be set by the caller. During decoding, the decoder may
     *             overwrite those values as required while parsing the data.
     */
    pub width: ::std::os::raw::c_int,
    /**
     * picture width / height.
     *
     * @note Those fields may not match the values of the last
     * AVFrame outputted by avcodec_decode_video2 due frame
     * reordering.
     *
     * - encoding: MUST be set by user.
     * - decoding: May be set by the user before opening the decoder if known e.g.
     *             from the container. Some decoders will require the dimensions
     *             to be set by the caller. During decoding, the decoder may
     *             overwrite those values as required while parsing the data.
     */
    pub height: ::std::os::raw::c_int,
    /**
     * Bitstream width / height, may be different from width/height e.g. when
     * the decoded frame is cropped before being output or lowres is enabled.
     *
     * @note Those field may not match the value of the last
     * AVFrame outputted by avcodec_decode_video2 due frame
     * reordering.
     *
     * - encoding: unused
     * - decoding: May be set by the user before opening the decoder if known
     *             e.g. from the container. During decoding, the decoder may
     *             overwrite those values as required while parsing the data.
     */
    pub coded_width: ::std::os::raw::c_int,
    /**
     * Bitstream width / height, may be different from width/height e.g. when
     * the decoded frame is cropped before being output or lowres is enabled.
     *
     * @note Those field may not match the value of the last
     * AVFrame outputted by avcodec_decode_video2 due frame
     * reordering.
     *
     * - encoding: unused
     * - decoding: May be set by the user before opening the decoder if known
     *             e.g. from the container. During decoding, the decoder may
     *             overwrite those values as required while parsing the data.
     */
    pub coded_height: ::std::os::raw::c_int,
    /**
     * the number of pictures in a group of pictures, or 0 for intra_only
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub gop_size: ::std::os::raw::c_int,
    /**
     * Pixel format, see AV_PIX_FMT_xxx.
     * May be set by the demuxer if known from headers.
     * May be overridden by the decoder if it knows better.
     *
     * @note This field may not match the value of the last
     * AVFrame outputted by avcodec_decode_video2 due frame
     * reordering.
     *
     * - encoding: Set by user.
     * - decoding: Set by user if known, overridden by libavcodec while
     *             parsing the data.
     */
    pub pix_fmt: AVPixelFormat,
    /**
     * This option does nothing
     * @deprecated use codec private options instead
     */
    pub me_method: ::std::os::raw::c_int,
    /**
     * If non NULL, 'draw_horiz_band' is called by the libavcodec
     * decoder to draw a horizontal band. It improves cache usage. Not
     * all codecs can do that. You must check the codec capabilities
     * beforehand.
     * When multithreading is used, it may be called from multiple threads
     * at the same time; threads might draw different parts of the same AVFrame,
     * or multiple AVFrames, and there is no guarantee that slices will be drawn
     * in order.
     * The function is also used by hardware acceleration APIs.
     * It is called at least once during frame decoding to pass
     * the data needed for hardware render.
     * In that mode instead of pixel data, AVFrame points to
     * a structure specific to the acceleration API. The application
     * reads the structure and can change some fields to indicate progress
     * or mark state.
     * - encoding: unused
     * - decoding: Set by user.
     * @param height the height of the slice
     * @param y the y position of the slice
     * @param type 1->top field, 2->bottom field, 3->frame
     * @param offset offset into the AVFrame.data from which the slice should be read
     */
    pub draw_horiz_band: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVFrame_AVCodecContext,
                                                                    src:
                                                                        *const AVFrame,
                                                                    offset:
                                                                        *mut ::std::os::raw::c_int,
                                                                    y:
                                                                        ::std::os::raw::c_int,
                                                                    type_:
                                                                        ::std::os::raw::c_int,
                                                                    height:
                                                                        ::std::os::raw::c_int)>,
    /**
     * callback to negotiate the pixelFormat
     * @param fmt is the list of formats which are supported by the codec,
     * it is terminated by -1 as 0 is a valid format, the formats are ordered by quality.
     * The first is always the native one.
     * @note The callback may be called again immediately if initialization for
     * the selected (hardware-accelerated) pixel format failed.
     * @warning Behavior is undefined if the callback returns a value not
     * in the fmt list of formats.
     * @return the chosen format
     * - encoding: unused
     * - decoding: Set by user, if not set the native format will be chosen.
     */
    pub get_format: ::std::option::Option<unsafe extern "C" fn(s:
                                                                   *mut AVFrame_AVCodecContext,
                                                               fmt:
                                                                   *const AVPixelFormat)
                                              -> AVPixelFormat>,
    /**
     * maximum number of B-frames between non-B-frames
     * Note: The output will be delayed by max_b_frames+1 relative to the input.
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub max_b_frames: ::std::os::raw::c_int,
    /**
     * qscale factor between IP and B-frames
     * If > 0 then the last P-frame quantizer will be used (q= lastp_q*factor+offset).
     * If < 0 then normal ratecontrol will be done (q= -normal_q*factor+offset).
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub b_quant_factor: f32,
    /** @deprecated use codec private option instead */
    pub rc_strategy: ::std::os::raw::c_int,
    pub b_frame_strategy: ::std::os::raw::c_int,
    /**
     * qscale offset between IP and B-frames
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub b_quant_offset: f32,
    /**
     * Size of the frame reordering buffer in the decoder.
     * For MPEG-2 it is 1 IPB or 0 low delay IP.
     * - encoding: Set by libavcodec.
     * - decoding: Set by libavcodec.
     */
    pub has_b_frames: ::std::os::raw::c_int,
    /**
     * 0-> h263 quant 1-> mpeg quant
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub mpeg_quant: ::std::os::raw::c_int,
    /**
     * qscale factor between P and I-frames
     * If > 0 then the last p frame quantizer will be used (q= lastp_q*factor+offset).
     * If < 0 then normal ratecontrol will be done (q= -normal_q*factor+offset).
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub i_quant_factor: f32,
    /**
     * qscale offset between P and I-frames
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub i_quant_offset: f32,
    /**
     * luminance masking (0-> disabled)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub lumi_masking: f32,
    /**
     * temporary complexity masking (0-> disabled)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub temporal_cplx_masking: f32,
    /**
     * spatial complexity masking (0-> disabled)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub spatial_cplx_masking: f32,
    /**
     * p block masking (0-> disabled)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub p_masking: f32,
    /**
     * darkness masking (0-> disabled)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub dark_masking: f32,
    /**
     * slice count
     * - encoding: Set by libavcodec.
     * - decoding: Set by user (or 0).
     */
    pub slice_count: ::std::os::raw::c_int,
    /**
     * prediction method (needed for huffyuv)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub prediction_method: ::std::os::raw::c_int,
    /**
     * slice offsets in the frame in bytes
     * - encoding: Set/allocated by libavcodec.
     * - decoding: Set/allocated by user (or NULL).
     */
    pub slice_offset: *mut ::std::os::raw::c_int,
    /**
     * sample aspect ratio (0 if unknown)
     * That is the width of a pixel divided by the height of the pixel.
     * Numerator and denominator must be relatively prime and smaller than 256 for some video standards.
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub sample_aspect_ratio: AVRational,
    /**
     * motion estimation comparison function
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub me_cmp: ::std::os::raw::c_int,
    /**
     * subpixel motion estimation comparison function
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub me_sub_cmp: ::std::os::raw::c_int,
    /**
     * macroblock comparison function (not supported yet)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub mb_cmp: ::std::os::raw::c_int,
    /**
     * interlaced DCT comparison function
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub ildct_cmp: ::std::os::raw::c_int,
    /**
     * ME diamond size & shape
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub dia_size: ::std::os::raw::c_int,
    /**
     * amount of previous MV predictors (2a+1 x 2a+1 square)
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub last_predictor_count: ::std::os::raw::c_int,
    /**
     * prepass for motion estimation
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub pre_me: ::std::os::raw::c_int,
    /**
     * motion estimation prepass comparison function
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub me_pre_cmp: ::std::os::raw::c_int,
    /**
     * ME prepass diamond size & shape
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub pre_dia_size: ::std::os::raw::c_int,
    /**
     * subpel ME quality
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub me_subpel_quality: ::std::os::raw::c_int,
    /**
     * DTG active format information (additional aspect ratio
     * information only used in DVB MPEG-2 transport streams)
     * 0 if not set.
     *
     * - encoding: unused
     * - decoding: Set by decoder.
     * @deprecated Deprecated in favor of AVSideData
     */
    pub dtg_active_format: ::std::os::raw::c_int,
    /**
     * maximum motion estimation search range in subpel units
     * If 0 then no limit.
     *
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub me_range: ::std::os::raw::c_int,
    /**
     * @deprecated use encoder private option instead
     */
    pub intra_quant_bias: ::std::os::raw::c_int,
    /**
     * @deprecated use encoder private option instead
     */
    pub inter_quant_bias: ::std::os::raw::c_int,
    /**
     * slice flags
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub slice_flags: ::std::os::raw::c_int,
    /**
     * XVideo Motion Acceleration
     * - encoding: forbidden
     * - decoding: set by decoder
     * @deprecated XvMC doesn't need it anymore.
     */
    pub xvmc_acceleration: ::std::os::raw::c_int,
    /**
     * macroblock decision mode
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub mb_decision: ::std::os::raw::c_int,
    /**
     * custom intra quantization matrix
     * - encoding: Set by user, can be NULL.
     * - decoding: Set by libavcodec.
     */
    pub intra_matrix: *mut u16,
    /**
     * custom inter quantization matrix
     * - encoding: Set by user, can be NULL.
     * - decoding: Set by libavcodec.
     */
    pub inter_matrix: *mut u16,
    /**
     * scene change detection threshold
     * 0 is default, larger means fewer detected scene changes.
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub scenechange_threshold: ::std::os::raw::c_int,
    /**
     * noise reduction strength
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub noise_reduction: ::std::os::raw::c_int,
    /**
     * @deprecated this field is unused
     */
    pub me_threshold: ::std::os::raw::c_int,
    /**
     * @deprecated this field is unused
     */
    pub mb_threshold: ::std::os::raw::c_int,
    /**
     * precision of the intra DC coefficient - 8
     * - encoding: Set by user.
     * - decoding: Set by libavcodec
     */
    pub intra_dc_precision: ::std::os::raw::c_int,
    /**
     * Number of macroblock rows at the top which are skipped.
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub skip_top: ::std::os::raw::c_int,
    /**
     * Number of macroblock rows at the bottom which are skipped.
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub skip_bottom: ::std::os::raw::c_int,
    /**
     * @deprecated use encoder private options instead
     */
    pub border_masking: f32,
    /**
     * minimum MB lagrange multipler
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub mb_lmin: ::std::os::raw::c_int,
    /**
     * maximum MB lagrange multipler
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub mb_lmax: ::std::os::raw::c_int,
    /**
     *
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub me_penalty_compensation: ::std::os::raw::c_int,
    /**
     *
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub bidir_refine: ::std::os::raw::c_int,
    /**
     *
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub brd_scale: ::std::os::raw::c_int,
    /**
     * minimum GOP size
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub keyint_min: ::std::os::raw::c_int,
    /**
     * number of reference frames
     * - encoding: Set by user.
     * - decoding: Set by lavc.
     */
    pub refs: ::std::os::raw::c_int,
    /**
     * chroma qp offset from luma
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub chromaoffset: ::std::os::raw::c_int,
    /**
     * Multiplied by qscale for each frame and added to scene_change_score.
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub scenechange_factor: ::std::os::raw::c_int,
    /**
     *
     * Note: Value depends upon the compare function used for fullpel ME.
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub mv0_threshold: ::std::os::raw::c_int,
    /**
     * Adjust sensitivity of b_frame_strategy 1.
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub b_sensitivity: ::std::os::raw::c_int,
    /**
     * Chromaticity coordinates of the source primaries.
     * - encoding: Set by user
     * - decoding: Set by libavcodec
     */
    pub color_primaries: AVColorPrimaries,
    /**
     * Color Transfer Characteristic.
     * - encoding: Set by user
     * - decoding: Set by libavcodec
     */
    pub color_trc: AVColorTransferCharacteristic,
    /**
     * YUV colorspace type.
     * - encoding: Set by user
     * - decoding: Set by libavcodec
     */
    pub colorspace: AVColorSpace,
    /**
     * MPEG vs JPEG YUV range.
     * - encoding: Set by user
     * - decoding: Set by libavcodec
     */
    pub color_range: AVColorRange,
    /**
     * This defines the location of chroma samples.
     * - encoding: Set by user
     * - decoding: Set by libavcodec
     */
    pub chroma_sample_location: AVChromaLocation,
    /**
     * Number of slices.
     * Indicates number of picture subdivisions. Used for parallelized
     * decoding.
     * - encoding: Set by user
     * - decoding: unused
     */
    pub slices: ::std::os::raw::c_int,
    /** Field order
     * - encoding: set by libavcodec
     * - decoding: Set by user.
     */
    pub field_order: AVFieldOrder,
    ///< samples per second
    pub sample_rate: ::std::os::raw::c_int,
    ///< number of audio channels
    pub channels: ::std::os::raw::c_int,
    ///< sample format
    pub sample_fmt: AVSampleFormat,
    /**
     * Number of samples per channel in an audio frame.
     *
     * - encoding: set by libavcodec in avcodec_open2(). Each submitted frame
     *   except the last must contain exactly frame_size samples per channel.
     *   May be 0 when the codec has AV_CODEC_CAP_VARIABLE_FRAME_SIZE set, then the
     *   frame size is not restricted.
     * - decoding: may be set by some decoders to indicate constant frame size
     */
    pub frame_size: ::std::os::raw::c_int,
    /**
     * Frame counter, set by libavcodec.
     *
     * - decoding: total number of frames returned from the decoder so far.
     * - encoding: total number of frames passed to the encoder so far.
     *
     *   @note the counter is not incremented if encoding/decoding resulted in
     *   an error.
     */
    pub frame_number: ::std::os::raw::c_int,
    /**
     * number of bytes per packet if constant and known or 0
     * Used by some WAV based audio codecs.
     */
    pub block_align: ::std::os::raw::c_int,
    /**
     * Audio cutoff bandwidth (0 means "automatic")
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub cutoff: ::std::os::raw::c_int,
    /**
     * Decoder should decode to this many channels if it can (0 for default)
     * - encoding: unused
     * - decoding: Set by user.
     * @deprecated Deprecated in favor of request_channel_layout.
     */
    pub request_channels: ::std::os::raw::c_int,
    /**
     * Audio channel layout.
     * - encoding: set by user.
     * - decoding: set by user, may be overwritten by libavcodec.
     */
    pub channel_layout: u64,
    /**
     * Request decoder to use this channel layout if it can (0 for default)
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub request_channel_layout: u64,
    /**
     * Type of service that the audio stream conveys.
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub audio_service_type: AVAudioServiceType,
    /**
     * desired sample format
     * - encoding: Not used.
     * - decoding: Set by user.
     * Decoder will decode to this format if it can.
     */
    pub request_sample_fmt: AVSampleFormat,
    /**
     * Called at the beginning of each frame to get a buffer for it.
     *
     * The function will set AVFrame.data[], AVFrame.linesize[].
     * AVFrame.extended_data[] must also be set, but it should be the same as
     * AVFrame.data[] except for planar audio with more channels than can fit
     * in AVFrame.data[]. In that case, AVFrame.data[] shall still contain as
     * many data pointers as it can hold.
     *
     * if CODEC_CAP_DR1 is not set then get_buffer() must call
     * avcodec_default_get_buffer() instead of providing buffers allocated by
     * some other means.
     *
     * AVFrame.data[] should be 32- or 16-byte-aligned unless the CPU doesn't
     * need it. avcodec_default_get_buffer() aligns the output buffer properly,
     * but if get_buffer() is overridden then alignment considerations should
     * be taken into account.
     *
     * @see avcodec_default_get_buffer()
     *
     * Video:
     *
     * If pic.reference is set then the frame will be read later by libavcodec.
     * avcodec_align_dimensions2() should be used to find the required width and
     * height, as they normally need to be rounded up to the next multiple of 16.
     *
     * If frame multithreading is used and thread_safe_callbacks is set,
     * it may be called from a different thread, but not from more than one at
     * once. Does not need to be reentrant.
     *
     * @see release_buffer(), reget_buffer()
     * @see avcodec_align_dimensions2()
     *
     * Audio:
     *
     * Decoders request a buffer of a particular size by setting
     * AVFrame.nb_samples prior to calling get_buffer(). The decoder may,
     * however, utilize only part of the buffer by setting AVFrame.nb_samples
     * to a smaller value in the output frame.
     *
     * Decoders cannot use the buffer after returning from
     * avcodec_decode_audio4(), so they will not call release_buffer(), as it
     * is assumed to be released immediately upon return. In some rare cases,
     * a decoder may need to call get_buffer() more than once in a single
     * call to avcodec_decode_audio4(). In that case, when get_buffer() is
     * called again after it has already been called once, the previously
     * acquired buffer is assumed to be released at that time and may not be
     * reused by the decoder.
     *
     * As a convenience, av_samples_get_buffer_size() and
     * av_samples_fill_arrays() in libavutil may be used by custom get_buffer()
     * functions to find the required data size and to fill data pointers and
     * linesize. In AVFrame.linesize, only linesize[0] may be set for audio
     * since all planes must be the same size.
     *
     * @see av_samples_get_buffer_size(), av_samples_fill_arrays()
     *
     * - encoding: unused
     * - decoding: Set by libavcodec, user can override.
     *
     * @deprecated use get_buffer2()
     */
    pub get_buffer: ::std::option::Option<unsafe extern "C" fn(c:
                                                                   *mut AVFrame_AVCodecContext,
                                                               pic:
                                                                   *mut AVFrame)
                                              -> ::std::os::raw::c_int>,
    /**
     * Called to release buffers which were allocated with get_buffer.
     * A released buffer can be reused in get_buffer().
     * pic.data[*] must be set to NULL.
     * May be called from a different thread if frame multithreading is used,
     * but not by more than one thread at once, so does not need to be reentrant.
     * - encoding: unused
     * - decoding: Set by libavcodec, user can override.
     *
     * @deprecated custom freeing callbacks should be set from get_buffer2()
     */
    pub release_buffer: ::std::option::Option<unsafe extern "C" fn(c:
                                                                       *mut AVFrame_AVCodecContext,
                                                                   pic:
                                                                       *mut AVFrame)>,
    /**
     * Called at the beginning of a frame to get cr buffer for it.
     * Buffer type (size, hints) must be the same. libavcodec won't check it.
     * libavcodec will pass previous buffer in pic, function should return
     * same buffer or new buffer with old frame "painted" into it.
     * If pic.data[0] == NULL must behave like get_buffer().
     * if CODEC_CAP_DR1 is not set then reget_buffer() must call
     * avcodec_default_reget_buffer() instead of providing buffers allocated by
     * some other means.
     * - encoding: unused
     * - decoding: Set by libavcodec, user can override.
     */
    pub reget_buffer: ::std::option::Option<unsafe extern "C" fn(c:
                                                                     *mut AVFrame_AVCodecContext,
                                                                 pic:
                                                                     *mut AVFrame)
                                                -> ::std::os::raw::c_int>,
    /**
     * This callback is called at the beginning of each frame to get data
     * buffer(s) for it. There may be one contiguous buffer for all the data or
     * there may be a buffer per each data plane or anything in between. What
     * this means is, you may set however many entries in buf[] you feel necessary.
     * Each buffer must be reference-counted using the AVBuffer API (see description
     * of buf[] below).
     *
     * The following fields will be set in the frame before this callback is
     * called:
     * - format
     * - width, height (video only)
     * - sample_rate, channel_layout, nb_samples (audio only)
     * Their values may differ from the corresponding values in
     * AVCodecContext. This callback must use the frame values, not the codec
     * context values, to calculate the required buffer size.
     *
     * This callback must fill the following fields in the frame:
     * - data[]
     * - linesize[]
     * - extended_data:
     *   * if the data is planar audio with more than 8 channels, then this
     *     callback must allocate and fill extended_data to contain all pointers
     *     to all data planes. data[] must hold as many pointers as it can.
     *     extended_data must be allocated with av_malloc() and will be freed in
     *     av_frame_unref().
     *   * otherwise exended_data must point to data
     * - buf[] must contain one or more pointers to AVBufferRef structures. Each of
     *   the frame's data and extended_data pointers must be contained in these. That
     *   is, one AVBufferRef for each allocated chunk of memory, not necessarily one
     *   AVBufferRef per data[] entry. See: av_buffer_create(), av_buffer_alloc(),
     *   and av_buffer_ref().
     * - extended_buf and nb_extended_buf must be allocated with av_malloc() by
     *   this callback and filled with the extra buffers if there are more
     *   buffers than buf[] can hold. extended_buf will be freed in
     *   av_frame_unref().
     *
     * If AV_CODEC_CAP_DR1 is not set then get_buffer2() must call
     * avcodec_default_get_buffer2() instead of providing buffers allocated by
     * some other means.
     *
     * Each data plane must be aligned to the maximum required by the target
     * CPU.
     *
     * @see avcodec_default_get_buffer2()
     *
     * Video:
     *
     * If AV_GET_BUFFER_FLAG_REF is set in flags then the frame may be reused
     * (read and/or written to if it is writable) later by libavcodec.
     *
     * avcodec_align_dimensions2() should be used to find the required width and
     * height, as they normally need to be rounded up to the next multiple of 16.
     *
     * Some decoders do not support linesizes changing between frames.
     *
     * If frame multithreading is used and thread_safe_callbacks is set,
     * this callback may be called from a different thread, but not from more
     * than one at once. Does not need to be reentrant.
     *
     * @see avcodec_align_dimensions2()
     *
     * Audio:
     *
     * Decoders request a buffer of a particular size by setting
     * AVFrame.nb_samples prior to calling get_buffer2(). The decoder may,
     * however, utilize only part of the buffer by setting AVFrame.nb_samples
     * to a smaller value in the output frame.
     *
     * As a convenience, av_samples_get_buffer_size() and
     * av_samples_fill_arrays() in libavutil may be used by custom get_buffer2()
     * functions to find the required data size and to fill data pointers and
     * linesize. In AVFrame.linesize, only linesize[0] may be set for audio
     * since all planes must be the same size.
     *
     * @see av_samples_get_buffer_size(), av_samples_fill_arrays()
     *
     * - encoding: unused
     * - decoding: Set by libavcodec, user can override.
     */
    pub get_buffer2: ::std::option::Option<unsafe extern "C" fn(s:
                                                                    *mut AVFrame_AVCodecContext,
                                                                frame:
                                                                    *mut AVFrame,
                                                                flags:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    /**
     * If non-zero, the decoded audio and video frames returned from
     * avcodec_decode_video2() and avcodec_decode_audio4() are reference-counted
     * and are valid indefinitely. The caller must free them with
     * av_frame_unref() when they are not needed anymore.
     * Otherwise, the decoded frames must not be freed by the caller and are
     * only valid until the next decode call.
     *
     * - encoding: unused
     * - decoding: set by the caller before avcodec_open2().
     */
    pub refcounted_frames: ::std::os::raw::c_int,
    ///< amount of qscale change between easy & hard scenes (0.0-1.0)
    pub qcompress: f32,
    ///< amount of qscale smoothing over time (0.0-1.0)
    pub qblur: f32,
    /**
     * minimum quantizer
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub qmin: ::std::os::raw::c_int,
    /**
     * maximum quantizer
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub qmax: ::std::os::raw::c_int,
    /**
     * maximum quantizer difference between frames
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub max_qdiff: ::std::os::raw::c_int,
    /**
     * @deprecated use encoder private options instead
     */
    pub rc_qsquish: f32,
    pub rc_qmod_amp: f32,
    pub rc_qmod_freq: ::std::os::raw::c_int,
    /**
     * decoder bitstream buffer size
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub rc_buffer_size: ::std::os::raw::c_int,
    /**
     * ratecontrol override, see RcOverride
     * - encoding: Allocated/set/freed by user.
     * - decoding: unused
     */
    pub rc_override_count: ::std::os::raw::c_int,
    pub rc_override: *mut RcOverride,
    /**
     * @deprecated use encoder private options instead
     */
    pub rc_eq: *const ::std::os::raw::c_char,
    /**
     * maximum bitrate
     * - encoding: Set by user.
     * - decoding: Set by user, may be overwritten by libavcodec.
     */
    pub rc_max_rate: ::std::os::raw::c_int,
    /**
     * minimum bitrate
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub rc_min_rate: ::std::os::raw::c_int,
    /**
     * @deprecated use encoder private options instead
     */
    pub rc_buffer_aggressivity: f32,
    pub rc_initial_cplx: f32,
    /**
     * Ratecontrol attempt to use, at maximum, <value> of what can be used without an underflow.
     * - encoding: Set by user.
     * - decoding: unused.
     */
    pub rc_max_available_vbv_use: f32,
    /**
     * Ratecontrol attempt to use, at least, <value> times the amount needed to prevent a vbv overflow.
     * - encoding: Set by user.
     * - decoding: unused.
     */
    pub rc_min_vbv_overflow_use: f32,
    /**
     * Number of bits which should be loaded into the rc buffer before decoding starts.
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub rc_initial_buffer_occupancy: ::std::os::raw::c_int,
    /**
     * coder type
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub coder_type: ::std::os::raw::c_int,
    /**
     * context model
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub context_model: ::std::os::raw::c_int,
    /**
     * @deprecated use encoder private options instead
     */
    pub lmin: ::std::os::raw::c_int,
    /**
     * @deprecated use encoder private options instead
     */
    pub lmax: ::std::os::raw::c_int,
    /**
     * frame skip threshold
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub frame_skip_threshold: ::std::os::raw::c_int,
    /**
     * frame skip factor
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub frame_skip_factor: ::std::os::raw::c_int,
    /**
     * frame skip exponent
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub frame_skip_exp: ::std::os::raw::c_int,
    /**
     * frame skip comparison function
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub frame_skip_cmp: ::std::os::raw::c_int,
    /**
     * trellis RD quantization
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub trellis: ::std::os::raw::c_int,
    /**
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub min_prediction_order: ::std::os::raw::c_int,
    /**
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub max_prediction_order: ::std::os::raw::c_int,
    /**
     * GOP timecode frame start number
     * - encoding: Set by user, in non drop frame format
     * - decoding: Set by libavcodec (timecode in the 25 bits format, -1 if unset)
     */
    pub timecode_frame_start: i64,
    pub rtp_callback: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                     *mut AVFrame_AVCodecContext,
                                                                 data:
                                                                     *mut ::std::os::raw::c_void,
                                                                 size:
                                                                     ::std::os::raw::c_int,
                                                                 mb_nb:
                                                                     ::std::os::raw::c_int)>,
    pub rtp_payload_size: ::std::os::raw::c_int,
    pub mv_bits: ::std::os::raw::c_int,
    pub header_bits: ::std::os::raw::c_int,
    pub i_tex_bits: ::std::os::raw::c_int,
    pub p_tex_bits: ::std::os::raw::c_int,
    pub i_count: ::std::os::raw::c_int,
    pub p_count: ::std::os::raw::c_int,
    pub skip_count: ::std::os::raw::c_int,
    pub misc_bits: ::std::os::raw::c_int,
    /**
     * number of bits used for the previously encoded frame
     * - encoding: Set by libavcodec.
     * - decoding: unused
     */
    pub frame_bits: ::std::os::raw::c_int,
    /**
     * pass1 encoding statistics output buffer
     * - encoding: Set by libavcodec.
     * - decoding: unused
     */
    pub stats_out: *mut ::std::os::raw::c_char,
    /**
     * pass2 encoding statistics input buffer
     * Concatenated stuff from stats_out of pass1 should be placed here.
     * - encoding: Allocated/set/freed by user.
     * - decoding: unused
     */
    pub stats_in: *mut ::std::os::raw::c_char,
    /**
     * Work around bugs in encoders which sometimes cannot be detected automatically.
     * - encoding: Set by user
     * - decoding: Set by user
     */
    pub workaround_bugs: ::std::os::raw::c_int,
    /**
     * strictly follow the standard (MPEG4, ...).
     * - encoding: Set by user.
     * - decoding: Set by user.
     * Setting this to STRICT or higher means the encoder and decoder will
     * generally do stupid things, whereas setting it to unofficial or lower
     * will mean the encoder might produce output that is not supported by all
     * spec-compliant decoders. Decoders don't differentiate between normal,
     * unofficial and experimental (that is, they always try to decode things
     * when they can) unless they are explicitly asked to behave stupidly
     * (=strictly conform to the specs)
     */
    pub strict_std_compliance: ::std::os::raw::c_int,
    /**
     * error concealment flags
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub error_concealment: ::std::os::raw::c_int,
    /**
     * debug
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub debug: ::std::os::raw::c_int,
    /**
     * debug
     * Code outside libavcodec should access this field using AVOptions
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub debug_mv: ::std::os::raw::c_int,
    /**
     * Error recognition; may misdetect some more or less valid parts as errors.
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub err_recognition: ::std::os::raw::c_int,
    /**
     * opaque 64bit number (generally a PTS) that will be reordered and
     * output in AVFrame.reordered_opaque
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub reordered_opaque: i64,
    /**
     * Hardware accelerator in use
     * - encoding: unused.
     * - decoding: Set by libavcodec
     */
    pub hwaccel: *mut AVFrame_AVCodecContext_AVHWAccel,
    /**
     * Hardware accelerator context.
     * For some hardware accelerators, a global context needs to be
     * provided by the user. In that case, this holds display-dependent
     * data FFmpeg cannot instantiate itself. Please refer to the
     * FFmpeg HW accelerator documentation to know how to fill this
     * is. e.g. for VA API, this is a struct vaapi_context.
     * - encoding: unused
     * - decoding: Set by user
     */
    pub hwaccel_context: *mut ::std::os::raw::c_void,
    /**
     * error
     * - encoding: Set by libavcodec if flags & AV_CODEC_FLAG_PSNR.
     * - decoding: unused
     */
    pub error: [u64; 8usize],
    /**
     * DCT algorithm, see FF_DCT_* below
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub dct_algo: ::std::os::raw::c_int,
    /**
     * IDCT algorithm, see FF_IDCT_* below.
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub idct_algo: ::std::os::raw::c_int,
    /**
     * bits per sample/pixel from the demuxer (needed for huffyuv).
     * - encoding: Set by libavcodec.
     * - decoding: Set by user.
     */
    pub bits_per_coded_sample: ::std::os::raw::c_int,
    /**
     * Bits per sample/pixel of internal libavcodec pixel/sample format.
     * - encoding: set by user.
     * - decoding: set by libavcodec.
     */
    pub bits_per_raw_sample: ::std::os::raw::c_int,
    /**
     * low resolution decoding, 1-> 1/2 size, 2->1/4 size
     * - encoding: unused
     * - decoding: Set by user.
     * Code outside libavcodec should access this field using:
     * av_codec_{get,set}_lowres(avctx)
     */
    pub lowres: ::std::os::raw::c_int,
    /**
     * the picture in the bitstream
     * - encoding: Set by libavcodec.
     * - decoding: unused
     *
     * @deprecated use the quality factor packet side data instead
     */
    pub coded_frame: *mut AVFrame,
    /**
     * thread count
     * is used to decide how many independent tasks should be passed to execute()
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub thread_count: ::std::os::raw::c_int,
    /**
     * Which multithreading methods to use.
     * Use of FF_THREAD_FRAME will increase decoding delay by one frame per thread,
     * so clients which cannot provide future frames should not use it.
     *
     * - encoding: Set by user, otherwise the default is used.
     * - decoding: Set by user, otherwise the default is used.
     */
    pub thread_type: ::std::os::raw::c_int,
    /**
     * Which multithreading methods are in use by the codec.
     * - encoding: Set by libavcodec.
     * - decoding: Set by libavcodec.
     */
    pub active_thread_type: ::std::os::raw::c_int,
    /**
     * Set by the client if its custom get_buffer() callback can be called
     * synchronously from another thread, which allows faster multithreaded decoding.
     * draw_horiz_band() will be called from other threads regardless of this setting.
     * Ignored if the default get_buffer() is used.
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub thread_safe_callbacks: ::std::os::raw::c_int,
    /**
     * The codec may call this to execute several independent things.
     * It will return only after finishing all tasks.
     * The user may replace this with some multithreaded implementation,
     * the default implementation will execute the parts serially.
     * @param count the number of things to execute
     * - encoding: Set by libavcodec, user can override.
     * - decoding: Set by libavcodec, user can override.
     */
    pub execute: ::std::option::Option<unsafe extern "C" fn(c:
                                                                *mut AVFrame_AVCodecContext,
                                                            func:
                                                                ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                                               *mut AVFrame_AVCodecContext,
                                                                                                           arg:
                                                                                                               *mut ::std::os::raw::c_void)
                                                                                          ->
                                                                                              ::std::os::raw::c_int>,
                                                            arg2:
                                                                *mut ::std::os::raw::c_void,
                                                            ret:
                                                                *mut ::std::os::raw::c_int,
                                                            count:
                                                                ::std::os::raw::c_int,
                                                            size:
                                                                ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>,
    /**
     * The codec may call this to execute several independent things.
     * It will return only after finishing all tasks.
     * The user may replace this with some multithreaded implementation,
     * the default implementation will execute the parts serially.
     * Also see avcodec_thread_init and e.g. the --enable-pthread configure option.
     * @param c context passed also to func
     * @param count the number of things to execute
     * @param arg2 argument passed unchanged to func
     * @param ret return values of executed functions, must have space for "count" values. May be NULL.
     * @param func function that will be called count times, with jobnr from 0 to count-1.
     *             threadnr will be in the range 0 to c->thread_count-1 < MAX_THREADS and so that no
     *             two instances of func executing at the same time will have the same threadnr.
     * @return always 0 currently, but code should handle a future improvement where when any call to func
     *         returns < 0 no further calls to func may be done and < 0 is returned.
     * - encoding: Set by libavcodec, user can override.
     * - decoding: Set by libavcodec, user can override.
     */
    pub execute2: ::std::option::Option<unsafe extern "C" fn(c:
                                                                 *mut AVFrame_AVCodecContext,
                                                             func:
                                                                 ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                                                *mut AVFrame_AVCodecContext,
                                                                                                            arg:
                                                                                                                *mut ::std::os::raw::c_void,
                                                                                                            jobnr:
                                                                                                                ::std::os::raw::c_int,
                                                                                                            threadnr:
                                                                                                                ::std::os::raw::c_int)
                                                                                           ->
                                                                                               ::std::os::raw::c_int>,
                                                             arg2:
                                                                 *mut ::std::os::raw::c_void,
                                                             ret:
                                                                 *mut ::std::os::raw::c_int,
                                                             count:
                                                                 ::std::os::raw::c_int)
                                            -> ::std::os::raw::c_int>,
    /**
     * @deprecated this field should not be used from outside of lavc
     */
    pub thread_opaque: *mut ::std::os::raw::c_void,
    /**
     * noise vs. sse weight for the nsse comparison function
     * - encoding: Set by user.
     * - decoding: unused
     */
    pub nsse_weight: ::std::os::raw::c_int,
    /**
     * profile
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub profile: ::std::os::raw::c_int,
    /**
     * level
     * - encoding: Set by user.
     * - decoding: Set by libavcodec.
     */
    pub level: ::std::os::raw::c_int,
    /**
     * Skip loop filtering for selected frames.
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub skip_loop_filter: AVDiscard,
    /**
     * Skip IDCT/dequantization for selected frames.
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub skip_idct: AVDiscard,
    /**
     * Skip decoding for selected frames.
     * - encoding: unused
     * - decoding: Set by user.
     */
    pub skip_frame: AVDiscard,
    /**
     * Header containing style information for text subtitles.
     * For SUBTITLE_ASS subtitle type, it should contain the whole ASS
     * [Script Info] and [V4+ Styles] section, plus the [Events] line and
     * the Format line following. It shouldn't include any Dialogue line.
     * - encoding: Set/allocated/freed by user (before avcodec_open2())
     * - decoding: Set/allocated/freed by libavcodec (by avcodec_open2())
     */
    pub subtitle_header: *mut u8,
    pub subtitle_header_size: ::std::os::raw::c_int,
    /**
     * @deprecated use the 'error_rate' private AVOption of the mpegvideo
     * encoders
     */
    pub error_rate: ::std::os::raw::c_int,
    /**
     * @deprecated this field is not supposed to be accessed from outside lavc
     */
    pub pkt: *mut AVPacket,
    /**
     * VBV delay coded in the last frame (in periods of a 27 MHz clock).
     * Used for compliant TS muxing.
     * - encoding: Set by libavcodec.
     * - decoding: unused.
     */
    pub vbv_delay: u64,
    /**
     * Encoding only. Allow encoders to output packets that do not contain any
     * encoded data, only side data.
     *
     * Some encoders need to output such packets, e.g. to update some stream
     * parameters at the end of encoding.
     *
     * All callers are strongly recommended to set this option to 1 and update
     * their code to deal with such packets, since this behaviour may become
     * always enabled in the future (then this option will be deprecated and
     * later removed). To avoid ABI issues when this happens, the callers should
     * use AVOptions to set this field.
     */
    pub side_data_only_packets: ::std::os::raw::c_int,
    /**
     * Audio only. The number of "priming" samples (padding) inserted by the
     * encoder at the beginning of the audio. I.e. this number of leading
     * decoded samples must be discarded by the caller to get the original audio
     * without leading padding.
     *
     * - decoding: unused
     * - encoding: Set by libavcodec. The timestamps on the output packets are
     *             adjusted by the encoder so that they always refer to the
     *             first sample of the data actually contained in the packet,
     *             including any added padding.  E.g. if the timebase is
     *             1/samplerate and the timestamp of the first input sample is
     *             0, the timestamp of the first output packet will be
     *             -initial_padding.
     */
    pub initial_padding: ::std::os::raw::c_int,
    /**
     * - decoding: For codecs that store a framerate value in the compressed
     *             bitstream, the decoder may export it here. { 0, 1} when
     *             unknown.
     * - encoding: unused
     */
    pub framerate: AVRational,
    /**
     * Nominal unaccelerated pixel format, see AV_PIX_FMT_xxx.
     * - encoding: unused.
     * - decoding: Set by libavcodec before calling get_format()
     */
    pub sw_pix_fmt: AVPixelFormat,
    /**
     * Timebase in which pkt_dts/pts and AVPacket.dts/pts are.
     * Code outside libavcodec should access this field using:
     * av_codec_{get,set}_pkt_timebase(avctx)
     * - encoding unused.
     * - decoding set by user.
     */
    pub pkt_timebase: AVRational,
    /**
     * AVCodecDescriptor
     * Code outside libavcodec should access this field using:
     * av_codec_{get,set}_codec_descriptor(avctx)
     * - encoding: unused.
     * - decoding: set by libavcodec.
     */
    pub codec_descriptor: *const AVCodecDescriptor,
    /**
     * Current statistics for PTS correction.
     * - decoding: maintained and used by libavcodec, not intended to be used by user apps
     * - encoding: unused
     */
    pub pts_correction_num_faulty_pts: i64,
    /// Number of incorrect PTS values so far
    pub pts_correction_num_faulty_dts: i64,
    /// Number of incorrect DTS values so far
    pub pts_correction_last_pts: i64,
    /// PTS of the last frame
    pub pts_correction_last_dts: i64,
    /**
     * Character encoding of the input subtitles file.
     * - decoding: set by user
     * - encoding: unused
     */
    pub sub_charenc: *mut ::std::os::raw::c_char,
    /**
     * Subtitles character encoding mode. Formats or codecs might be adjusting
     * this setting (if they are doing the conversion themselves for instance).
     * - decoding: set by libavcodec
     * - encoding: unused
     */
    pub sub_charenc_mode: ::std::os::raw::c_int,
    /**
     * Skip processing alpha if supported by codec.
     * Note that if the format uses pre-multiplied alpha (common with VP6,
     * and recommended due to better video quality/compression)
     * the image will look as if alpha-blended onto a black background.
     * However for formats that do not use pre-multiplied alpha
     * there might be serious artefacts (though e.g. libswscale currently
     * assumes pre-multiplied alpha anyway).
     * Code outside libavcodec should access this field using AVOptions
     *
     * - decoding: set by user
     * - encoding: unused
     */
    pub skip_alpha: ::std::os::raw::c_int,
    /**
     * Number of samples to skip after a discontinuity
     * - decoding: unused
     * - encoding: set by libavcodec
     */
    pub seek_preroll: ::std::os::raw::c_int,
    /**
     * custom intra quantization matrix
     * Code outside libavcodec should access this field using av_codec_g/set_chroma_intra_matrix()
     * - encoding: Set by user, can be NULL.
     * - decoding: unused.
     */
    pub chroma_intra_matrix: *mut u16,
    /**
     * dump format separator.
     * can be ", " or "\n      " or anything else
     * Code outside libavcodec should access this field using AVOptions
     * (NO direct access).
     * - encoding: Set by user.
     * - decoding: Set by user.
     */
    pub dump_separator: *mut u8,
    /**
     * ',' separated list of allowed decoders.
     * If NULL then all are allowed
     * - encoding: unused
     * - decoding: set by user through AVOPtions (NO direct access)
     */
    pub codec_whitelist: *mut ::std::os::raw::c_char,
    pub properties: ::std::os::raw::c_uint,
}
/**
 * AVCodec.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrame_AVCodecContext_AVCodec {
    /**
     * Name of the codec implementation.
     * The name is globally unique among encoders and among decoders (but an
     * encoder and a decoder can share the same name).
     * This is the primary way to find a codec from the user perspective.
     */
    pub name: *const ::std::os::raw::c_char,
    /**
     * Descriptive name for the codec, meant to be more human readable than name.
     * You should use the NULL_IF_CONFIG_SMALL() macro to define it.
     */
    pub long_name: *const ::std::os::raw::c_char,
    pub type_: AVMediaType,
    pub id: AVCodecID,
    /**
     * Codec capabilities.
     * see AV_CODEC_CAP_*
     */
    pub capabilities: ::std::os::raw::c_int,
    ///< array of supported framerates, or NULL if any, array is terminated by {0,0}
    pub supported_framerates: *const AVRational,
    ///< array of supported pixel formats, or NULL if unknown, array is terminated by -1
    pub pix_fmts: *const AVPixelFormat,
    ///< array of supported audio samplerates, or NULL if unknown, array is terminated by 0
    pub supported_samplerates: *const ::std::os::raw::c_int,
    ///< array of supported sample formats, or NULL if unknown, array is terminated by -1
    pub sample_fmts: *const AVSampleFormat,
    ///< array of support channel layouts, or NULL if unknown. array is terminated by 0
    pub channel_layouts: *const u64,
    ///< maximum value for lowres supported by the decoder, no direct access, use av_codec_get_max_lowres()
    pub max_lowres: u8,
    ///< AVClass for the private context
    pub priv_class: *const AVClass,
    ///< array of recognized profiles, or NULL if unknown, array is terminated by {FF_PROFILE_UNKNOWN}
    pub profiles: *const AVProfile,
    /*****************************************************************
     * No fields below this line are part of the public API. They
     * may not be used outside of libavcodec and can be changed and
     * removed at will.
     * New public fields should be added right above.
     *****************************************************************
     */
    pub priv_data_size: ::std::os::raw::c_int,
    pub next: *mut AVFrame_AVCodecContext_AVCodec,
    /**
     * @name Frame-level threading support functions
     * @{
     */
    /**
     * If defined, called on thread contexts when they are created.
     * If the codec allocates writable tables in init(), re-allocate them here.
     * priv_data will be set to a copy of the original.
     */
    pub init_thread_copy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut AVCodecContext)
                                                    -> ::std::os::raw::c_int>,
    /**
     * Copy necessary context variables from a previous thread context to the current one.
     * If not defined, the next thread will start automatically; otherwise, the codec
     * must call ff_thread_finish_setup().
     *
     * dst and src will (rarely) point to the same context, in which case memcpy should be skipped.
     */
    pub update_thread_context: ::std::option::Option<unsafe extern "C" fn(dst:
                                                                              *mut AVCodecContext,
                                                                          src:
                                                                              *const AVCodecContext)
                                                         ->
                                                             ::std::os::raw::c_int>,
    /**
     * Private codec-specific defaults.
     */
    pub defaults: *const AVCodecDefault,
    /**
     * Initialize codec static data, called from avcodec_register().
     */
    pub init_static_data: ::std::option::Option<unsafe extern "C" fn(codec:
                                                                         *mut AVFrame_AVCodecContext_AVCodec)>,
    pub init: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut AVCodecContext)
                                        -> ::std::os::raw::c_int>,
    pub encode_sub: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVCodecContext,
                                                               buf: *mut u8,
                                                               buf_size:
                                                                   ::std::os::raw::c_int,
                                                               sub:
                                                                   *const AVSubtitle)
                                              -> ::std::os::raw::c_int>,
    /**
     * Encode data to an AVPacket.
     *
     * @param      avctx          codec context
     * @param      avpkt          output AVPacket (may contain a user-provided buffer)
     * @param[in]  frame          AVFrame containing the raw data to be encoded
     * @param[out] got_packet_ptr encoder sets to 0 or 1 to indicate that a
     *                            non-empty packet was returned in avpkt.
     * @return 0 on success, negative error code on failure
     */
    pub encode2: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                *mut AVCodecContext,
                                                            avpkt:
                                                                *mut AVPacket,
                                                            frame:
                                                                *const AVFrame,
                                                            got_packet_ptr:
                                                                *mut ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>,
    pub decode: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut AVCodecContext,
                                                           outdata:
                                                               *mut ::std::os::raw::c_void,
                                                           outdata_size:
                                                               *mut ::std::os::raw::c_int,
                                                           avpkt:
                                                               *mut AVPacket)
                                          -> ::std::os::raw::c_int>,
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut AVCodecContext)
                                         -> ::std::os::raw::c_int>,
    /**
     * Flush buffers.
     * Will be called when seeking
     */
    pub flush: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut AVCodecContext)>,
    /**
     * Internal codec capabilities.
     * See FF_CODEC_CAP_* in internal.h
     */
    pub caps_internal: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVFrame_AVCodecContext_AVCodec() {
    assert_eq!(::std::mem::size_of::<AVFrame_AVCodecContext_AVCodec>() ,
               200usize);
    assert_eq!(::std::mem::align_of::<AVFrame_AVCodecContext_AVCodec>() ,
               8usize);
}
impl Clone for AVFrame_AVCodecContext_AVCodec {
    fn clone(&self) -> Self { *self }
}
/**
 * @defgroup lavc_hwaccel AVHWAccel
 * @{
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrame_AVCodecContext_AVHWAccel {
    /**
     * Name of the hardware accelerated codec.
     * The name is globally unique among encoders and among decoders (but an
     * encoder and a decoder can share the same name).
     */
    pub name: *const ::std::os::raw::c_char,
    /**
     * Type of codec implemented by the hardware accelerator.
     *
     * See AVMEDIA_TYPE_xxx
     */
    pub type_: AVMediaType,
    /**
     * Codec implemented by the hardware accelerator.
     *
     * See AV_CODEC_ID_xxx
     */
    pub id: AVCodecID,
    /**
     * Supported pixel format.
     *
     * Only hardware accelerated formats are supported here.
     */
    pub pix_fmt: AVPixelFormat,
    /**
     * Hardware accelerated codec capabilities.
     * see HWACCEL_CODEC_CAP_*
     */
    pub capabilities: ::std::os::raw::c_int,
    /*****************************************************************
     * No fields below this line are part of the public API. They
     * may not be used outside of libavcodec and can be changed and
     * removed at will.
     * New public fields should be added right above.
     *****************************************************************
     */
    pub next: *mut AVFrame_AVCodecContext_AVHWAccel,
    /**
     * Allocate a custom buffer
     */
    pub alloc_frame: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                    *mut AVCodecContext,
                                                                frame:
                                                                    *mut AVFrame)
                                               -> ::std::os::raw::c_int>,
    /**
     * Called at the beginning of each frame or field picture.
     *
     * Meaningful frame information (codec specific) is guaranteed to
     * be parsed at this point. This function is mandatory.
     *
     * Note that buf can be NULL along with buf_size set to 0.
     * Otherwise, this means the whole frame is available at this point.
     *
     * @param avctx the codec context
     * @param buf the frame data buffer base
     * @param buf_size the size of the frame in bytes
     * @return zero if successful, a negative value otherwise
     */
    pub start_frame: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                    *mut AVCodecContext,
                                                                buf:
                                                                    *const u8,
                                                                buf_size: u32)
                                               -> ::std::os::raw::c_int>,
    /**
     * Callback for each slice.
     *
     * Meaningful slice information (codec specific) is guaranteed to
     * be parsed at this point. This function is mandatory.
     * The only exception is XvMC, that works on MB level.
     *
     * @param avctx the codec context
     * @param buf the slice data buffer base
     * @param buf_size the size of the slice in bytes
     * @return zero if successful, a negative value otherwise
     */
    pub decode_slice: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                     *mut AVCodecContext,
                                                                 buf:
                                                                     *const u8,
                                                                 buf_size:
                                                                     u32)
                                                -> ::std::os::raw::c_int>,
    /**
     * Called at the end of each frame or field picture.
     *
     * The whole picture is parsed at this point and can now be sent
     * to the hardware accelerator. This function is mandatory.
     *
     * @param avctx the codec context
     * @return zero if successful, a negative value otherwise
     */
    pub end_frame: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                  *mut AVCodecContext)
                                             -> ::std::os::raw::c_int>,
    /**
     * Size of per-frame hardware accelerator private data.
     *
     * Private data is allocated with av_mallocz() before
     * AVCodecContext.get_buffer() and deallocated after
     * AVCodecContext.release_buffer().
     */
    pub frame_priv_data_size: ::std::os::raw::c_int,
    /**
     * Called for every Macroblock in a slice.
     *
     * XvMC uses it to replace the ff_mpv_decode_mb().
     * Instead of decoding to raw picture, MB parameters are
     * stored in an array provided by the video driver.
     *
     * @param s the mpeg context
     */
    pub decode_mb: ::std::option::Option<unsafe extern "C" fn(s:
                                                                  *mut MpegEncContext)>,
    /**
     * Initialize the hwaccel private data.
     *
     * This will be called from ff_get_format(), after hwaccel and
     * hwaccel_context are set and the hwaccel private data in AVCodecInternal
     * is allocated.
     */
    pub init: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                             *mut AVCodecContext)
                                        -> ::std::os::raw::c_int>,
    /**
     * Uninitialize the hwaccel private data.
     *
     * This will be called from get_format() or avcodec_close(), after hwaccel
     * and hwaccel_context are already uninitialized.
     */
    pub uninit: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                               *mut AVCodecContext)
                                          -> ::std::os::raw::c_int>,
    /**
     * Size of the private data to allocate in
     * AVCodecInternal.hwaccel_priv_data.
     */
    pub priv_data_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVFrame_AVCodecContext_AVHWAccel() {
    assert_eq!(::std::mem::size_of::<AVFrame_AVCodecContext_AVHWAccel>() ,
               104usize);
    assert_eq!(::std::mem::align_of::<AVFrame_AVCodecContext_AVHWAccel>() ,
               8usize);
}
impl Clone for AVFrame_AVCodecContext_AVHWAccel {
    fn clone(&self) -> Self { *self }
}
impl Clone for AVFrame_AVCodecContext {
    fn clone(&self) -> Self { *self }
}
impl Clone for AVFrame {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /**
 * Accessors for some AVFrame fields.
 * The position of these field in the structure is not part of the ABI,
 * they should not be accessed directly outside libavutil.
 */
    pub fn av_frame_get_best_effort_timestamp(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_best_effort_timestamp(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_pkt_duration(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_pkt_duration(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_pkt_pos(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_pkt_pos(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_channel_layout(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_channel_layout(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_channels(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_channels(frame: *mut AVFrame,
                                 val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_frame_get_sample_rate(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_sample_rate(frame: *mut AVFrame,
                                    val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_frame_get_metadata(frame: *const AVFrame) -> *mut AVDictionary;
}
extern "C" {
    pub fn av_frame_set_metadata(frame: *mut AVFrame, val: *mut AVDictionary);
}
extern "C" {
    pub fn av_frame_get_decode_error_flags(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_decode_error_flags(frame: *mut AVFrame,
                                           val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_frame_get_pkt_size(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_pkt_size(frame: *mut AVFrame,
                                 val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn avpriv_frame_get_metadatap(frame: *mut AVFrame)
     -> *mut *mut AVDictionary;
}
extern "C" {
    pub fn av_frame_get_qp_table(f: *mut AVFrame,
                                 stride: *mut ::std::os::raw::c_int,
                                 type_: *mut ::std::os::raw::c_int)
     -> *mut i8;
}
extern "C" {
    pub fn av_frame_set_qp_table(f: *mut AVFrame, buf: *mut AVBufferRef,
                                 stride: ::std::os::raw::c_int,
                                 type_: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_get_colorspace(frame: *const AVFrame) -> AVColorSpace;
}
extern "C" {
    pub fn av_frame_set_colorspace(frame: *mut AVFrame, val: AVColorSpace);
}
extern "C" {
    pub fn av_frame_get_color_range(frame: *const AVFrame) -> AVColorRange;
}
extern "C" {
    pub fn av_frame_set_color_range(frame: *mut AVFrame, val: AVColorRange);
}
extern "C" {
    /**
 * Get the name of a colorspace.
 * @return a static string identifying the colorspace; can be NULL.
 */
    pub fn av_get_colorspace_name(val: AVColorSpace)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Allocate an AVFrame and set its fields to default values.  The resulting
 * struct must be freed using av_frame_free().
 *
 * @return An AVFrame filled with default values or NULL on failure.
 *
 * @note this only allocates the AVFrame itself, not the data buffers. Those
 * must be allocated through other means, e.g. with av_frame_get_buffer() or
 * manually.
 */
    pub fn av_frame_alloc() -> *mut AVFrame;
}
extern "C" {
    /**
 * Free the frame and any dynamically allocated objects in it,
 * e.g. extended_data. If the frame is reference counted, it will be
 * unreferenced first.
 *
 * @param frame frame to be freed. The pointer will be set to NULL.
 */
    pub fn av_frame_free(frame: *mut *mut AVFrame);
}
extern "C" {
    /**
 * Set up a new reference to the data described by the source frame.
 *
 * Copy frame properties from src to dst and create a new reference for each
 * AVBufferRef from src.
 *
 * If src is not reference counted, new buffers are allocated and the data is
 * copied.
 *
 * @return 0 on success, a negative AVERROR on error
 */
    pub fn av_frame_ref(dst: *mut AVFrame, src: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Create a new frame that references the same data as src.
 *
 * This is a shortcut for av_frame_alloc()+av_frame_ref().
 *
 * @return newly created AVFrame on success, NULL on error.
 */
    pub fn av_frame_clone(src: *const AVFrame) -> *mut AVFrame;
}
extern "C" {
    /**
 * Unreference all the buffers referenced by frame and reset the frame fields.
 */
    pub fn av_frame_unref(frame: *mut AVFrame);
}
extern "C" {
    /**
 * Move everything contained in src to dst and reset src.
 */
    pub fn av_frame_move_ref(dst: *mut AVFrame, src: *mut AVFrame);
}
extern "C" {
    /**
 * Allocate new buffer(s) for audio or video data.
 *
 * The following fields must be set on frame before calling this function:
 * - format (pixel format for video, sample format for audio)
 * - width and height for video
 * - nb_samples and channel_layout for audio
 *
 * This function will fill AVFrame.data and AVFrame.buf arrays and, if
 * necessary, allocate and fill AVFrame.extended_data and AVFrame.extended_buf.
 * For planar formats, one buffer will be allocated for each plane.
 *
 * @param frame frame in which to store the new buffers.
 * @param align required buffer size alignment
 *
 * @return 0 on success, a negative AVERROR on error.
 */
    pub fn av_frame_get_buffer(frame: *mut AVFrame,
                               align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Check if the frame data is writable.
 *
 * @return A positive value if the frame data is writable (which is true if and
 * only if each of the underlying buffers has only one reference, namely the one
 * stored in this frame). Return 0 otherwise.
 *
 * If 1 is returned the answer is valid until av_buffer_ref() is called on any
 * of the underlying AVBufferRefs (e.g. through av_frame_ref() or directly).
 *
 * @see av_frame_make_writable(), av_buffer_is_writable()
 */
    pub fn av_frame_is_writable(frame: *mut AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Ensure that the frame data is writable, avoiding data copy if possible.
 *
 * Do nothing if the frame is writable, allocate new buffers and copy the data
 * if it is not.
 *
 * @return 0 on success, a negative AVERROR on error.
 *
 * @see av_frame_is_writable(), av_buffer_is_writable(),
 * av_buffer_make_writable()
 */
    pub fn av_frame_make_writable(frame: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy the frame data from src to dst.
 *
 * This function does not allocate anything, dst must be already initialized and
 * allocated with the same parameters as src.
 *
 * This function only copies the frame data (i.e. the contents of the data /
 * extended data arrays), not any other properties.
 *
 * @return >= 0 on success, a negative AVERROR on error.
 */
    pub fn av_frame_copy(dst: *mut AVFrame, src: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy only "metadata" fields from src to dst.
 *
 * Metadata for the purpose of this function are those fields that do not affect
 * the data layout in the buffers.  E.g. pts, sample rate (for audio) or sample
 * aspect ratio (for video), but not width/height or channel layout.
 * Side data is also copied.
 */
    pub fn av_frame_copy_props(dst: *mut AVFrame, src: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get the buffer reference a given data plane is stored in.
 *
 * @param plane index of the data plane of interest in frame->extended_data.
 *
 * @return the buffer reference that contains the plane or NULL if the input
 * frame is not valid.
 */
    pub fn av_frame_get_plane_buffer(frame: *mut AVFrame,
                                     plane: ::std::os::raw::c_int)
     -> *mut AVBufferRef;
}
extern "C" {
    /**
 * Add a new side data to a frame.
 *
 * @param frame a frame to which the side data should be added
 * @param type type of the added side data
 * @param size size of the side data
 *
 * @return newly added side data on success, NULL on error
 */
    pub fn av_frame_new_side_data(frame: *mut AVFrame,
                                  type_: AVFrameSideDataType,
                                  size: ::std::os::raw::c_int)
     -> *mut AVFrameSideData;
}
extern "C" {
    /**
 * @return a pointer to the side data of a given type on success, NULL if there
 * is no side data with such type in this frame.
 */
    pub fn av_frame_get_side_data(frame: *const AVFrame,
                                  type_: AVFrameSideDataType)
     -> *mut AVFrameSideData;
}
extern "C" {
    /**
 * If side data of the supplied type exists in the frame, free it and remove it
 * from the frame.
 */
    pub fn av_frame_remove_side_data(frame: *mut AVFrame,
                                     type_: AVFrameSideDataType);
}
extern "C" {
    /**
 * @return a string identifying the side data type
 */
    pub fn av_frame_side_data_name(type_: AVFrameSideDataType)
     -> *const ::std::os::raw::c_char;
}
pub const AVCodecID_AV_CODEC_ID_PCM_S16LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_AUDIO;
pub const AVCodecID_AV_CODEC_ID_VIMA: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_VIMA;
pub const AVCodecID_AV_CODEC_ID_DVD_SUBTITLE: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_SUBTITLE;
pub const AVCodecID_AV_CODEC_ID_TTF: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_UNKNOWN;
pub const AVCodecID_CODEC_ID_NONE: AVCodecID = AVCodecID::AV_CODEC_ID_NONE;
pub const AVCodecID_CODEC_ID_MPEG1VIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_MPEG1VIDEO;
pub const AVCodecID_CODEC_ID_MPEG2VIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_MPEG2VIDEO;
pub const AVCodecID_CODEC_ID_MPEG2VIDEO_XVMC: AVCodecID =
    AVCodecID::AV_CODEC_ID_MPEG2VIDEO_XVMC;
pub const AVCodecID_CODEC_ID_H261: AVCodecID = AVCodecID::AV_CODEC_ID_H261;
pub const AVCodecID_CODEC_ID_H263: AVCodecID = AVCodecID::AV_CODEC_ID_H263;
pub const AVCodecID_CODEC_ID_RV10: AVCodecID = AVCodecID::AV_CODEC_ID_RV10;
pub const AVCodecID_CODEC_ID_RV20: AVCodecID = AVCodecID::AV_CODEC_ID_RV20;
pub const AVCodecID_CODEC_ID_MJPEG: AVCodecID = AVCodecID::AV_CODEC_ID_MJPEG;
pub const AVCodecID_CODEC_ID_MJPEGB: AVCodecID =
    AVCodecID::AV_CODEC_ID_MJPEGB;
pub const AVCodecID_CODEC_ID_LJPEG: AVCodecID = AVCodecID::AV_CODEC_ID_LJPEG;
pub const AVCodecID_CODEC_ID_SP5X: AVCodecID = AVCodecID::AV_CODEC_ID_SP5X;
pub const AVCodecID_CODEC_ID_JPEGLS: AVCodecID =
    AVCodecID::AV_CODEC_ID_JPEGLS;
pub const AVCodecID_CODEC_ID_MPEG4: AVCodecID = AVCodecID::AV_CODEC_ID_MPEG4;
pub const AVCodecID_CODEC_ID_RAWVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_RAWVIDEO;
pub const AVCodecID_CODEC_ID_MSMPEG4V1: AVCodecID =
    AVCodecID::AV_CODEC_ID_MSMPEG4V1;
pub const AVCodecID_CODEC_ID_MSMPEG4V2: AVCodecID =
    AVCodecID::AV_CODEC_ID_MSMPEG4V2;
pub const AVCodecID_CODEC_ID_MSMPEG4V3: AVCodecID =
    AVCodecID::AV_CODEC_ID_MSMPEG4V3;
pub const AVCodecID_CODEC_ID_WMV1: AVCodecID = AVCodecID::AV_CODEC_ID_WMV1;
pub const AVCodecID_CODEC_ID_WMV2: AVCodecID = AVCodecID::AV_CODEC_ID_WMV2;
pub const AVCodecID_CODEC_ID_H263P: AVCodecID = AVCodecID::AV_CODEC_ID_H263P;
pub const AVCodecID_CODEC_ID_H263I: AVCodecID = AVCodecID::AV_CODEC_ID_H263I;
pub const AVCodecID_CODEC_ID_FLV1: AVCodecID = AVCodecID::AV_CODEC_ID_FLV1;
pub const AVCodecID_CODEC_ID_SVQ1: AVCodecID = AVCodecID::AV_CODEC_ID_SVQ1;
pub const AVCodecID_CODEC_ID_SVQ3: AVCodecID = AVCodecID::AV_CODEC_ID_SVQ3;
pub const AVCodecID_CODEC_ID_DVVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_DVVIDEO;
pub const AVCodecID_CODEC_ID_HUFFYUV: AVCodecID =
    AVCodecID::AV_CODEC_ID_HUFFYUV;
pub const AVCodecID_CODEC_ID_CYUV: AVCodecID = AVCodecID::AV_CODEC_ID_CYUV;
pub const AVCodecID_CODEC_ID_H264: AVCodecID = AVCodecID::AV_CODEC_ID_H264;
pub const AVCodecID_CODEC_ID_INDEO3: AVCodecID =
    AVCodecID::AV_CODEC_ID_INDEO3;
pub const AVCodecID_CODEC_ID_VP3: AVCodecID = AVCodecID::AV_CODEC_ID_VP3;
pub const AVCodecID_CODEC_ID_THEORA: AVCodecID =
    AVCodecID::AV_CODEC_ID_THEORA;
pub const AVCodecID_CODEC_ID_ASV1: AVCodecID = AVCodecID::AV_CODEC_ID_ASV1;
pub const AVCodecID_CODEC_ID_ASV2: AVCodecID = AVCodecID::AV_CODEC_ID_ASV2;
pub const AVCodecID_CODEC_ID_FFV1: AVCodecID = AVCodecID::AV_CODEC_ID_FFV1;
pub const AVCodecID_CODEC_ID_4XM: AVCodecID = AVCodecID::AV_CODEC_ID_4XM;
pub const AVCodecID_CODEC_ID_VCR1: AVCodecID = AVCodecID::AV_CODEC_ID_VCR1;
pub const AVCodecID_CODEC_ID_CLJR: AVCodecID = AVCodecID::AV_CODEC_ID_CLJR;
pub const AVCodecID_CODEC_ID_MDEC: AVCodecID = AVCodecID::AV_CODEC_ID_MDEC;
pub const AVCodecID_CODEC_ID_ROQ: AVCodecID = AVCodecID::AV_CODEC_ID_ROQ;
pub const AVCodecID_CODEC_ID_INTERPLAY_VIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_INTERPLAY_VIDEO;
pub const AVCodecID_CODEC_ID_XAN_WC3: AVCodecID =
    AVCodecID::AV_CODEC_ID_XAN_WC3;
pub const AVCodecID_CODEC_ID_XAN_WC4: AVCodecID =
    AVCodecID::AV_CODEC_ID_XAN_WC4;
pub const AVCodecID_CODEC_ID_RPZA: AVCodecID = AVCodecID::AV_CODEC_ID_RPZA;
pub const AVCodecID_CODEC_ID_CINEPAK: AVCodecID =
    AVCodecID::AV_CODEC_ID_CINEPAK;
pub const AVCodecID_CODEC_ID_WS_VQA: AVCodecID =
    AVCodecID::AV_CODEC_ID_WS_VQA;
pub const AVCodecID_CODEC_ID_MSRLE: AVCodecID = AVCodecID::AV_CODEC_ID_MSRLE;
pub const AVCodecID_CODEC_ID_MSVIDEO1: AVCodecID =
    AVCodecID::AV_CODEC_ID_MSVIDEO1;
pub const AVCodecID_CODEC_ID_IDCIN: AVCodecID = AVCodecID::AV_CODEC_ID_IDCIN;
pub const AVCodecID_CODEC_ID_8BPS: AVCodecID = AVCodecID::AV_CODEC_ID_8BPS;
pub const AVCodecID_CODEC_ID_SMC: AVCodecID = AVCodecID::AV_CODEC_ID_SMC;
pub const AVCodecID_CODEC_ID_FLIC: AVCodecID = AVCodecID::AV_CODEC_ID_FLIC;
pub const AVCodecID_CODEC_ID_TRUEMOTION1: AVCodecID =
    AVCodecID::AV_CODEC_ID_TRUEMOTION1;
pub const AVCodecID_CODEC_ID_VMDVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_VMDVIDEO;
pub const AVCodecID_CODEC_ID_MSZH: AVCodecID = AVCodecID::AV_CODEC_ID_MSZH;
pub const AVCodecID_CODEC_ID_ZLIB: AVCodecID = AVCodecID::AV_CODEC_ID_ZLIB;
pub const AVCodecID_CODEC_ID_QTRLE: AVCodecID = AVCodecID::AV_CODEC_ID_QTRLE;
pub const AVCodecID_CODEC_ID_TSCC: AVCodecID = AVCodecID::AV_CODEC_ID_TSCC;
pub const AVCodecID_CODEC_ID_ULTI: AVCodecID = AVCodecID::AV_CODEC_ID_ULTI;
pub const AVCodecID_CODEC_ID_QDRAW: AVCodecID = AVCodecID::AV_CODEC_ID_QDRAW;
pub const AVCodecID_CODEC_ID_VIXL: AVCodecID = AVCodecID::AV_CODEC_ID_VIXL;
pub const AVCodecID_CODEC_ID_QPEG: AVCodecID = AVCodecID::AV_CODEC_ID_QPEG;
pub const AVCodecID_CODEC_ID_PNG: AVCodecID = AVCodecID::AV_CODEC_ID_PNG;
pub const AVCodecID_CODEC_ID_PPM: AVCodecID = AVCodecID::AV_CODEC_ID_PPM;
pub const AVCodecID_CODEC_ID_PBM: AVCodecID = AVCodecID::AV_CODEC_ID_PBM;
pub const AVCodecID_CODEC_ID_PGM: AVCodecID = AVCodecID::AV_CODEC_ID_PGM;
pub const AVCodecID_CODEC_ID_PGMYUV: AVCodecID =
    AVCodecID::AV_CODEC_ID_PGMYUV;
pub const AVCodecID_CODEC_ID_PAM: AVCodecID = AVCodecID::AV_CODEC_ID_PAM;
pub const AVCodecID_CODEC_ID_FFVHUFF: AVCodecID =
    AVCodecID::AV_CODEC_ID_FFVHUFF;
pub const AVCodecID_CODEC_ID_RV30: AVCodecID = AVCodecID::AV_CODEC_ID_RV30;
pub const AVCodecID_CODEC_ID_RV40: AVCodecID = AVCodecID::AV_CODEC_ID_RV40;
pub const AVCodecID_CODEC_ID_VC1: AVCodecID = AVCodecID::AV_CODEC_ID_VC1;
pub const AVCodecID_CODEC_ID_WMV3: AVCodecID = AVCodecID::AV_CODEC_ID_WMV3;
pub const AVCodecID_CODEC_ID_LOCO: AVCodecID = AVCodecID::AV_CODEC_ID_LOCO;
pub const AVCodecID_CODEC_ID_WNV1: AVCodecID = AVCodecID::AV_CODEC_ID_WNV1;
pub const AVCodecID_CODEC_ID_AASC: AVCodecID = AVCodecID::AV_CODEC_ID_AASC;
pub const AVCodecID_CODEC_ID_INDEO2: AVCodecID =
    AVCodecID::AV_CODEC_ID_INDEO2;
pub const AVCodecID_CODEC_ID_FRAPS: AVCodecID = AVCodecID::AV_CODEC_ID_FRAPS;
pub const AVCodecID_CODEC_ID_TRUEMOTION2: AVCodecID =
    AVCodecID::AV_CODEC_ID_TRUEMOTION2;
pub const AVCodecID_CODEC_ID_BMP: AVCodecID = AVCodecID::AV_CODEC_ID_BMP;
pub const AVCodecID_CODEC_ID_CSCD: AVCodecID = AVCodecID::AV_CODEC_ID_CSCD;
pub const AVCodecID_CODEC_ID_MMVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_MMVIDEO;
pub const AVCodecID_CODEC_ID_ZMBV: AVCodecID = AVCodecID::AV_CODEC_ID_ZMBV;
pub const AVCodecID_CODEC_ID_AVS: AVCodecID = AVCodecID::AV_CODEC_ID_AVS;
pub const AVCodecID_CODEC_ID_SMACKVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_SMACKVIDEO;
pub const AVCodecID_CODEC_ID_NUV: AVCodecID = AVCodecID::AV_CODEC_ID_NUV;
pub const AVCodecID_CODEC_ID_KMVC: AVCodecID = AVCodecID::AV_CODEC_ID_KMVC;
pub const AVCodecID_CODEC_ID_FLASHSV: AVCodecID =
    AVCodecID::AV_CODEC_ID_FLASHSV;
pub const AVCodecID_CODEC_ID_CAVS: AVCodecID = AVCodecID::AV_CODEC_ID_CAVS;
pub const AVCodecID_CODEC_ID_JPEG2000: AVCodecID =
    AVCodecID::AV_CODEC_ID_JPEG2000;
pub const AVCodecID_CODEC_ID_VMNC: AVCodecID = AVCodecID::AV_CODEC_ID_VMNC;
pub const AVCodecID_CODEC_ID_VP5: AVCodecID = AVCodecID::AV_CODEC_ID_VP5;
pub const AVCodecID_CODEC_ID_VP6: AVCodecID = AVCodecID::AV_CODEC_ID_VP6;
pub const AVCodecID_CODEC_ID_VP6F: AVCodecID = AVCodecID::AV_CODEC_ID_VP6F;
pub const AVCodecID_CODEC_ID_TARGA: AVCodecID = AVCodecID::AV_CODEC_ID_TARGA;
pub const AVCodecID_CODEC_ID_DSICINVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_DSICINVIDEO;
pub const AVCodecID_CODEC_ID_TIERTEXSEQVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_TIERTEXSEQVIDEO;
pub const AVCodecID_CODEC_ID_TIFF: AVCodecID = AVCodecID::AV_CODEC_ID_TIFF;
pub const AVCodecID_CODEC_ID_GIF: AVCodecID = AVCodecID::AV_CODEC_ID_GIF;
pub const AVCodecID_CODEC_ID_DXA: AVCodecID = AVCodecID::AV_CODEC_ID_DXA;
pub const AVCodecID_CODEC_ID_DNXHD: AVCodecID = AVCodecID::AV_CODEC_ID_DNXHD;
pub const AVCodecID_CODEC_ID_THP: AVCodecID = AVCodecID::AV_CODEC_ID_THP;
pub const AVCodecID_CODEC_ID_SGI: AVCodecID = AVCodecID::AV_CODEC_ID_SGI;
pub const AVCodecID_CODEC_ID_C93: AVCodecID = AVCodecID::AV_CODEC_ID_C93;
pub const AVCodecID_CODEC_ID_BETHSOFTVID: AVCodecID =
    AVCodecID::AV_CODEC_ID_BETHSOFTVID;
pub const AVCodecID_CODEC_ID_PTX: AVCodecID = AVCodecID::AV_CODEC_ID_PTX;
pub const AVCodecID_CODEC_ID_TXD: AVCodecID = AVCodecID::AV_CODEC_ID_TXD;
pub const AVCodecID_CODEC_ID_VP6A: AVCodecID = AVCodecID::AV_CODEC_ID_VP6A;
pub const AVCodecID_CODEC_ID_AMV: AVCodecID = AVCodecID::AV_CODEC_ID_AMV;
pub const AVCodecID_CODEC_ID_VB: AVCodecID = AVCodecID::AV_CODEC_ID_VB;
pub const AVCodecID_CODEC_ID_PCX: AVCodecID = AVCodecID::AV_CODEC_ID_PCX;
pub const AVCodecID_CODEC_ID_SUNRAST: AVCodecID =
    AVCodecID::AV_CODEC_ID_SUNRAST;
pub const AVCodecID_CODEC_ID_INDEO4: AVCodecID =
    AVCodecID::AV_CODEC_ID_INDEO4;
pub const AVCodecID_CODEC_ID_INDEO5: AVCodecID =
    AVCodecID::AV_CODEC_ID_INDEO5;
pub const AVCodecID_CODEC_ID_MIMIC: AVCodecID = AVCodecID::AV_CODEC_ID_MIMIC;
pub const AVCodecID_CODEC_ID_RL2: AVCodecID = AVCodecID::AV_CODEC_ID_RL2;
pub const AVCodecID_CODEC_ID_ESCAPE124: AVCodecID =
    AVCodecID::AV_CODEC_ID_ESCAPE124;
pub const AVCodecID_CODEC_ID_DIRAC: AVCodecID = AVCodecID::AV_CODEC_ID_DIRAC;
pub const AVCodecID_CODEC_ID_BFI: AVCodecID = AVCodecID::AV_CODEC_ID_BFI;
pub const AVCodecID_CODEC_ID_CMV: AVCodecID = AVCodecID::AV_CODEC_ID_CMV;
pub const AVCodecID_CODEC_ID_MOTIONPIXELS: AVCodecID =
    AVCodecID::AV_CODEC_ID_MOTIONPIXELS;
pub const AVCodecID_CODEC_ID_TGV: AVCodecID = AVCodecID::AV_CODEC_ID_TGV;
pub const AVCodecID_CODEC_ID_TGQ: AVCodecID = AVCodecID::AV_CODEC_ID_TGQ;
pub const AVCodecID_CODEC_ID_TQI: AVCodecID = AVCodecID::AV_CODEC_ID_TQI;
pub const AVCodecID_CODEC_ID_AURA: AVCodecID = AVCodecID::AV_CODEC_ID_AURA;
pub const AVCodecID_CODEC_ID_AURA2: AVCodecID = AVCodecID::AV_CODEC_ID_AURA2;
pub const AVCodecID_CODEC_ID_V210X: AVCodecID = AVCodecID::AV_CODEC_ID_V210X;
pub const AVCodecID_CODEC_ID_TMV: AVCodecID = AVCodecID::AV_CODEC_ID_TMV;
pub const AVCodecID_CODEC_ID_V210: AVCodecID = AVCodecID::AV_CODEC_ID_V210;
pub const AVCodecID_CODEC_ID_DPX: AVCodecID = AVCodecID::AV_CODEC_ID_DPX;
pub const AVCodecID_CODEC_ID_MAD: AVCodecID = AVCodecID::AV_CODEC_ID_MAD;
pub const AVCodecID_CODEC_ID_FRWU: AVCodecID = AVCodecID::AV_CODEC_ID_FRWU;
pub const AVCodecID_CODEC_ID_FLASHSV2: AVCodecID =
    AVCodecID::AV_CODEC_ID_FLASHSV2;
pub const AVCodecID_CODEC_ID_CDGRAPHICS: AVCodecID =
    AVCodecID::AV_CODEC_ID_CDGRAPHICS;
pub const AVCodecID_CODEC_ID_R210: AVCodecID = AVCodecID::AV_CODEC_ID_R210;
pub const AVCodecID_CODEC_ID_ANM: AVCodecID = AVCodecID::AV_CODEC_ID_ANM;
pub const AVCodecID_CODEC_ID_BINKVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_BINKVIDEO;
pub const AVCodecID_CODEC_ID_IFF_ILBM: AVCodecID =
    AVCodecID::AV_CODEC_ID_IFF_ILBM;
pub const AVCodecID_CODEC_ID_IFF_BYTERUN1: AVCodecID =
    AVCodecID::AV_CODEC_ID_IFF_BYTERUN1;
pub const AVCodecID_CODEC_ID_KGV1: AVCodecID = AVCodecID::AV_CODEC_ID_KGV1;
pub const AVCodecID_CODEC_ID_YOP: AVCodecID = AVCodecID::AV_CODEC_ID_YOP;
pub const AVCodecID_CODEC_ID_VP8: AVCodecID = AVCodecID::AV_CODEC_ID_VP8;
pub const AVCodecID_CODEC_ID_PICTOR: AVCodecID =
    AVCodecID::AV_CODEC_ID_PICTOR;
pub const AVCodecID_CODEC_ID_ANSI: AVCodecID = AVCodecID::AV_CODEC_ID_ANSI;
pub const AVCodecID_CODEC_ID_A64_MULTI: AVCodecID =
    AVCodecID::AV_CODEC_ID_A64_MULTI;
pub const AVCodecID_CODEC_ID_A64_MULTI5: AVCodecID =
    AVCodecID::AV_CODEC_ID_A64_MULTI5;
pub const AVCodecID_CODEC_ID_R10K: AVCodecID = AVCodecID::AV_CODEC_ID_R10K;
pub const AVCodecID_CODEC_ID_MXPEG: AVCodecID = AVCodecID::AV_CODEC_ID_MXPEG;
pub const AVCodecID_CODEC_ID_LAGARITH: AVCodecID =
    AVCodecID::AV_CODEC_ID_LAGARITH;
pub const AVCodecID_CODEC_ID_PRORES: AVCodecID =
    AVCodecID::AV_CODEC_ID_PRORES;
pub const AVCodecID_CODEC_ID_JV: AVCodecID = AVCodecID::AV_CODEC_ID_JV;
pub const AVCodecID_CODEC_ID_DFA: AVCodecID = AVCodecID::AV_CODEC_ID_DFA;
pub const AVCodecID_CODEC_ID_WMV3IMAGE: AVCodecID =
    AVCodecID::AV_CODEC_ID_WMV3IMAGE;
pub const AVCodecID_CODEC_ID_VC1IMAGE: AVCodecID =
    AVCodecID::AV_CODEC_ID_VC1IMAGE;
pub const AVCodecID_CODEC_ID_UTVIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_UTVIDEO;
pub const AVCodecID_CODEC_ID_BMV_VIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_BMV_VIDEO;
pub const AVCodecID_CODEC_ID_VBLE: AVCodecID = AVCodecID::AV_CODEC_ID_VBLE;
pub const AVCodecID_CODEC_ID_DXTORY: AVCodecID =
    AVCodecID::AV_CODEC_ID_DXTORY;
pub const AVCodecID_CODEC_ID_V410: AVCodecID = AVCodecID::AV_CODEC_ID_V410;
pub const AVCodecID_CODEC_ID_XWD: AVCodecID = AVCodecID::AV_CODEC_ID_XWD;
pub const AVCodecID_CODEC_ID_CDXL: AVCodecID = AVCodecID::AV_CODEC_ID_CDXL;
pub const AVCodecID_CODEC_ID_XBM: AVCodecID = AVCodecID::AV_CODEC_ID_XBM;
pub const AVCodecID_CODEC_ID_ZEROCODEC: AVCodecID =
    AVCodecID::AV_CODEC_ID_ZEROCODEC;
pub const AVCodecID_CODEC_ID_MSS1: AVCodecID = AVCodecID::AV_CODEC_ID_MSS1;
pub const AVCodecID_CODEC_ID_MSA1: AVCodecID = AVCodecID::AV_CODEC_ID_MSA1;
pub const AVCodecID_CODEC_ID_TSCC2: AVCodecID = AVCodecID::AV_CODEC_ID_TSCC2;
pub const AVCodecID_CODEC_ID_MTS2: AVCodecID = AVCodecID::AV_CODEC_ID_MTS2;
pub const AVCodecID_CODEC_ID_CLLC: AVCodecID = AVCodecID::AV_CODEC_ID_CLLC;
pub const AVCodecID_CODEC_ID_Y41P: AVCodecID = AVCodecID::AV_CODEC_ID_Y41P;
pub const AVCodecID_CODEC_ID_ESCAPE130: AVCodecID =
    AVCodecID::AV_CODEC_ID_ESCAPE130;
pub const AVCodecID_CODEC_ID_EXR: AVCodecID = AVCodecID::AV_CODEC_ID_EXR;
pub const AVCodecID_CODEC_ID_AVRP: AVCodecID = AVCodecID::AV_CODEC_ID_AVRP;
pub const AVCodecID_CODEC_ID_G2M: AVCodecID = AVCodecID::AV_CODEC_ID_G2M;
pub const AVCodecID_CODEC_ID_AVUI: AVCodecID = AVCodecID::AV_CODEC_ID_AVUI;
pub const AVCodecID_CODEC_ID_AYUV: AVCodecID = AVCodecID::AV_CODEC_ID_AYUV;
pub const AVCodecID_CODEC_ID_V308: AVCodecID = AVCodecID::AV_CODEC_ID_V308;
pub const AVCodecID_CODEC_ID_V408: AVCodecID = AVCodecID::AV_CODEC_ID_V408;
pub const AVCodecID_CODEC_ID_YUV4: AVCodecID = AVCodecID::AV_CODEC_ID_YUV4;
pub const AVCodecID_CODEC_ID_SANM: AVCodecID = AVCodecID::AV_CODEC_ID_SANM;
pub const AVCodecID_CODEC_ID_PAF_VIDEO: AVCodecID =
    AVCodecID::AV_CODEC_ID_PAF_VIDEO;
pub const AVCodecID_CODEC_ID_SNOW: AVCodecID = AVCodecID::AV_CODEC_ID_SNOW;
pub const AVCodecID_CODEC_ID_FIRST_AUDIO: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_AUDIO;
pub const AVCodecID_CODEC_ID_PCM_S16LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_AUDIO;
pub const AVCodecID_CODEC_ID_PCM_S16BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S16BE;
pub const AVCodecID_CODEC_ID_PCM_U16LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_U16LE;
pub const AVCodecID_CODEC_ID_PCM_U16BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_U16BE;
pub const AVCodecID_CODEC_ID_PCM_S8: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S8;
pub const AVCodecID_CODEC_ID_PCM_U8: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_U8;
pub const AVCodecID_CODEC_ID_PCM_MULAW: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_MULAW;
pub const AVCodecID_CODEC_ID_PCM_ALAW: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_ALAW;
pub const AVCodecID_CODEC_ID_PCM_S32LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S32LE;
pub const AVCodecID_CODEC_ID_PCM_S32BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S32BE;
pub const AVCodecID_CODEC_ID_PCM_U32LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_U32LE;
pub const AVCodecID_CODEC_ID_PCM_U32BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_U32BE;
pub const AVCodecID_CODEC_ID_PCM_S24LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S24LE;
pub const AVCodecID_CODEC_ID_PCM_S24BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S24BE;
pub const AVCodecID_CODEC_ID_PCM_U24LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_U24LE;
pub const AVCodecID_CODEC_ID_PCM_U24BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_U24BE;
pub const AVCodecID_CODEC_ID_PCM_S24DAUD: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S24DAUD;
pub const AVCodecID_CODEC_ID_PCM_ZORK: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_ZORK;
pub const AVCodecID_CODEC_ID_PCM_S16LE_PLANAR: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S16LE_PLANAR;
pub const AVCodecID_CODEC_ID_PCM_DVD: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_DVD;
pub const AVCodecID_CODEC_ID_PCM_F32BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_F32BE;
pub const AVCodecID_CODEC_ID_PCM_F32LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_F32LE;
pub const AVCodecID_CODEC_ID_PCM_F64BE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_F64BE;
pub const AVCodecID_CODEC_ID_PCM_F64LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_F64LE;
pub const AVCodecID_CODEC_ID_PCM_BLURAY: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_BLURAY;
pub const AVCodecID_CODEC_ID_PCM_LXF: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_LXF;
pub const AVCodecID_CODEC_ID_S302M: AVCodecID = AVCodecID::AV_CODEC_ID_S302M;
pub const AVCodecID_CODEC_ID_PCM_S8_PLANAR: AVCodecID =
    AVCodecID::AV_CODEC_ID_PCM_S8_PLANAR;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_QT: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_QT;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_WAV: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_WAV;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_DK3: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_DK3;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_DK4: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_DK4;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_WS: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_WS;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_SMJPEG: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_SMJPEG;
pub const AVCodecID_CODEC_ID_ADPCM_MS: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_MS;
pub const AVCodecID_CODEC_ID_ADPCM_4XM: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_4XM;
pub const AVCodecID_CODEC_ID_ADPCM_XA: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_XA;
pub const AVCodecID_CODEC_ID_ADPCM_ADX: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_ADX;
pub const AVCodecID_CODEC_ID_ADPCM_EA: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_EA;
pub const AVCodecID_CODEC_ID_ADPCM_G726: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_G726;
pub const AVCodecID_CODEC_ID_ADPCM_CT: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_CT;
pub const AVCodecID_CODEC_ID_ADPCM_SWF: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_SWF;
pub const AVCodecID_CODEC_ID_ADPCM_YAMAHA: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_YAMAHA;
pub const AVCodecID_CODEC_ID_ADPCM_SBPRO_4: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_SBPRO_4;
pub const AVCodecID_CODEC_ID_ADPCM_SBPRO_3: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_SBPRO_3;
pub const AVCodecID_CODEC_ID_ADPCM_SBPRO_2: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_SBPRO_2;
pub const AVCodecID_CODEC_ID_ADPCM_THP: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_THP;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_AMV: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_AMV;
pub const AVCodecID_CODEC_ID_ADPCM_EA_R1: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_EA_R1;
pub const AVCodecID_CODEC_ID_ADPCM_EA_R3: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_EA_R3;
pub const AVCodecID_CODEC_ID_ADPCM_EA_R2: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_EA_R2;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_EA_SEAD: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_EA_SEAD;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_EA_EACS: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_EA_EACS;
pub const AVCodecID_CODEC_ID_ADPCM_EA_XAS: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_EA_XAS;
pub const AVCodecID_CODEC_ID_ADPCM_EA_MAXIS_XA: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_EA_MAXIS_XA;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_ISS: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_ISS;
pub const AVCodecID_CODEC_ID_ADPCM_G722: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_G722;
pub const AVCodecID_CODEC_ID_ADPCM_IMA_APC: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_IMA_APC;
pub const AVCodecID_CODEC_ID_VIMA: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_VIMA;
pub const AVCodecID_CODEC_ID_AMR_NB: AVCodecID =
    AVCodecID::AV_CODEC_ID_AMR_NB;
pub const AVCodecID_CODEC_ID_AMR_WB: AVCodecID =
    AVCodecID::AV_CODEC_ID_AMR_WB;
pub const AVCodecID_CODEC_ID_RA_144: AVCodecID =
    AVCodecID::AV_CODEC_ID_RA_144;
pub const AVCodecID_CODEC_ID_RA_288: AVCodecID =
    AVCodecID::AV_CODEC_ID_RA_288;
pub const AVCodecID_CODEC_ID_ROQ_DPCM: AVCodecID =
    AVCodecID::AV_CODEC_ID_ROQ_DPCM;
pub const AVCodecID_CODEC_ID_INTERPLAY_DPCM: AVCodecID =
    AVCodecID::AV_CODEC_ID_INTERPLAY_DPCM;
pub const AVCodecID_CODEC_ID_XAN_DPCM: AVCodecID =
    AVCodecID::AV_CODEC_ID_XAN_DPCM;
pub const AVCodecID_CODEC_ID_SOL_DPCM: AVCodecID =
    AVCodecID::AV_CODEC_ID_SOL_DPCM;
pub const AVCodecID_CODEC_ID_MP2: AVCodecID = AVCodecID::AV_CODEC_ID_MP2;
pub const AVCodecID_CODEC_ID_MP3: AVCodecID = AVCodecID::AV_CODEC_ID_MP3;
pub const AVCodecID_CODEC_ID_AAC: AVCodecID = AVCodecID::AV_CODEC_ID_AAC;
pub const AVCodecID_CODEC_ID_AC3: AVCodecID = AVCodecID::AV_CODEC_ID_AC3;
pub const AVCodecID_CODEC_ID_DTS: AVCodecID = AVCodecID::AV_CODEC_ID_DTS;
pub const AVCodecID_CODEC_ID_VORBIS: AVCodecID =
    AVCodecID::AV_CODEC_ID_VORBIS;
pub const AVCodecID_CODEC_ID_DVAUDIO: AVCodecID =
    AVCodecID::AV_CODEC_ID_DVAUDIO;
pub const AVCodecID_CODEC_ID_WMAV1: AVCodecID = AVCodecID::AV_CODEC_ID_WMAV1;
pub const AVCodecID_CODEC_ID_WMAV2: AVCodecID = AVCodecID::AV_CODEC_ID_WMAV2;
pub const AVCodecID_CODEC_ID_MACE3: AVCodecID = AVCodecID::AV_CODEC_ID_MACE3;
pub const AVCodecID_CODEC_ID_MACE6: AVCodecID = AVCodecID::AV_CODEC_ID_MACE6;
pub const AVCodecID_CODEC_ID_VMDAUDIO: AVCodecID =
    AVCodecID::AV_CODEC_ID_VMDAUDIO;
pub const AVCodecID_CODEC_ID_FLAC: AVCodecID = AVCodecID::AV_CODEC_ID_FLAC;
pub const AVCodecID_CODEC_ID_MP3ADU: AVCodecID =
    AVCodecID::AV_CODEC_ID_MP3ADU;
pub const AVCodecID_CODEC_ID_MP3ON4: AVCodecID =
    AVCodecID::AV_CODEC_ID_MP3ON4;
pub const AVCodecID_CODEC_ID_SHORTEN: AVCodecID =
    AVCodecID::AV_CODEC_ID_SHORTEN;
pub const AVCodecID_CODEC_ID_ALAC: AVCodecID = AVCodecID::AV_CODEC_ID_ALAC;
pub const AVCodecID_CODEC_ID_WESTWOOD_SND1: AVCodecID =
    AVCodecID::AV_CODEC_ID_WESTWOOD_SND1;
pub const AVCodecID_CODEC_ID_GSM: AVCodecID = AVCodecID::AV_CODEC_ID_GSM;
pub const AVCodecID_CODEC_ID_QDM2: AVCodecID = AVCodecID::AV_CODEC_ID_QDM2;
pub const AVCodecID_CODEC_ID_COOK: AVCodecID = AVCodecID::AV_CODEC_ID_COOK;
pub const AVCodecID_CODEC_ID_TRUESPEECH: AVCodecID =
    AVCodecID::AV_CODEC_ID_TRUESPEECH;
pub const AVCodecID_CODEC_ID_TTA: AVCodecID = AVCodecID::AV_CODEC_ID_TTA;
pub const AVCodecID_CODEC_ID_SMACKAUDIO: AVCodecID =
    AVCodecID::AV_CODEC_ID_SMACKAUDIO;
pub const AVCodecID_CODEC_ID_QCELP: AVCodecID = AVCodecID::AV_CODEC_ID_QCELP;
pub const AVCodecID_CODEC_ID_WAVPACK: AVCodecID =
    AVCodecID::AV_CODEC_ID_WAVPACK;
pub const AVCodecID_CODEC_ID_DSICINAUDIO: AVCodecID =
    AVCodecID::AV_CODEC_ID_DSICINAUDIO;
pub const AVCodecID_CODEC_ID_IMC: AVCodecID = AVCodecID::AV_CODEC_ID_IMC;
pub const AVCodecID_CODEC_ID_MUSEPACK7: AVCodecID =
    AVCodecID::AV_CODEC_ID_MUSEPACK7;
pub const AVCodecID_CODEC_ID_MLP: AVCodecID = AVCodecID::AV_CODEC_ID_MLP;
pub const AVCodecID_CODEC_ID_GSM_MS: AVCodecID =
    AVCodecID::AV_CODEC_ID_GSM_MS;
pub const AVCodecID_CODEC_ID_ATRAC3: AVCodecID =
    AVCodecID::AV_CODEC_ID_ATRAC3;
pub const AVCodecID_CODEC_ID_VOXWARE: AVCodecID =
    AVCodecID::AV_CODEC_ID_VOXWARE;
pub const AVCodecID_CODEC_ID_APE: AVCodecID = AVCodecID::AV_CODEC_ID_APE;
pub const AVCodecID_CODEC_ID_NELLYMOSER: AVCodecID =
    AVCodecID::AV_CODEC_ID_NELLYMOSER;
pub const AVCodecID_CODEC_ID_MUSEPACK8: AVCodecID =
    AVCodecID::AV_CODEC_ID_MUSEPACK8;
pub const AVCodecID_CODEC_ID_SPEEX: AVCodecID = AVCodecID::AV_CODEC_ID_SPEEX;
pub const AVCodecID_CODEC_ID_WMAVOICE: AVCodecID =
    AVCodecID::AV_CODEC_ID_WMAVOICE;
pub const AVCodecID_CODEC_ID_WMAPRO: AVCodecID =
    AVCodecID::AV_CODEC_ID_WMAPRO;
pub const AVCodecID_CODEC_ID_WMALOSSLESS: AVCodecID =
    AVCodecID::AV_CODEC_ID_WMALOSSLESS;
pub const AVCodecID_CODEC_ID_ATRAC3P: AVCodecID =
    AVCodecID::AV_CODEC_ID_ATRAC3P;
pub const AVCodecID_CODEC_ID_EAC3: AVCodecID = AVCodecID::AV_CODEC_ID_EAC3;
pub const AVCodecID_CODEC_ID_SIPR: AVCodecID = AVCodecID::AV_CODEC_ID_SIPR;
pub const AVCodecID_CODEC_ID_MP1: AVCodecID = AVCodecID::AV_CODEC_ID_MP1;
pub const AVCodecID_CODEC_ID_TWINVQ: AVCodecID =
    AVCodecID::AV_CODEC_ID_TWINVQ;
pub const AVCodecID_CODEC_ID_TRUEHD: AVCodecID =
    AVCodecID::AV_CODEC_ID_TRUEHD;
pub const AVCodecID_CODEC_ID_MP4ALS: AVCodecID =
    AVCodecID::AV_CODEC_ID_MP4ALS;
pub const AVCodecID_CODEC_ID_ATRAC1: AVCodecID =
    AVCodecID::AV_CODEC_ID_ATRAC1;
pub const AVCodecID_CODEC_ID_BINKAUDIO_RDFT: AVCodecID =
    AVCodecID::AV_CODEC_ID_BINKAUDIO_RDFT;
pub const AVCodecID_CODEC_ID_BINKAUDIO_DCT: AVCodecID =
    AVCodecID::AV_CODEC_ID_BINKAUDIO_DCT;
pub const AVCodecID_CODEC_ID_AAC_LATM: AVCodecID =
    AVCodecID::AV_CODEC_ID_AAC_LATM;
pub const AVCodecID_CODEC_ID_QDMC: AVCodecID = AVCodecID::AV_CODEC_ID_QDMC;
pub const AVCodecID_CODEC_ID_CELT: AVCodecID = AVCodecID::AV_CODEC_ID_CELT;
pub const AVCodecID_CODEC_ID_G723_1: AVCodecID =
    AVCodecID::AV_CODEC_ID_G723_1;
pub const AVCodecID_CODEC_ID_G729: AVCodecID = AVCodecID::AV_CODEC_ID_G729;
pub const AVCodecID_CODEC_ID_8SVX_EXP: AVCodecID =
    AVCodecID::AV_CODEC_ID_8SVX_EXP;
pub const AVCodecID_CODEC_ID_8SVX_FIB: AVCodecID =
    AVCodecID::AV_CODEC_ID_8SVX_FIB;
pub const AVCodecID_CODEC_ID_BMV_AUDIO: AVCodecID =
    AVCodecID::AV_CODEC_ID_BMV_AUDIO;
pub const AVCodecID_CODEC_ID_RALF: AVCodecID = AVCodecID::AV_CODEC_ID_RALF;
pub const AVCodecID_CODEC_ID_IAC: AVCodecID = AVCodecID::AV_CODEC_ID_IAC;
pub const AVCodecID_CODEC_ID_ILBC: AVCodecID = AVCodecID::AV_CODEC_ID_ILBC;
pub const AVCodecID_CODEC_ID_FFWAVESYNTH: AVCodecID =
    AVCodecID::AV_CODEC_ID_FFWAVESYNTH;
pub const AVCodecID_CODEC_ID_SONIC: AVCodecID = AVCodecID::AV_CODEC_ID_SONIC;
pub const AVCodecID_CODEC_ID_SONIC_LS: AVCodecID =
    AVCodecID::AV_CODEC_ID_SONIC_LS;
pub const AVCodecID_CODEC_ID_PAF_AUDIO: AVCodecID =
    AVCodecID::AV_CODEC_ID_PAF_AUDIO;
pub const AVCodecID_CODEC_ID_OPUS: AVCodecID = AVCodecID::AV_CODEC_ID_OPUS;
pub const AVCodecID_CODEC_ID_FIRST_SUBTITLE: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_SUBTITLE;
pub const AVCodecID_CODEC_ID_DVD_SUBTITLE: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_SUBTITLE;
pub const AVCodecID_CODEC_ID_DVB_SUBTITLE: AVCodecID =
    AVCodecID::AV_CODEC_ID_DVB_SUBTITLE;
pub const AVCodecID_CODEC_ID_TEXT: AVCodecID = AVCodecID::AV_CODEC_ID_TEXT;
pub const AVCodecID_CODEC_ID_XSUB: AVCodecID = AVCodecID::AV_CODEC_ID_XSUB;
pub const AVCodecID_CODEC_ID_SSA: AVCodecID = AVCodecID::AV_CODEC_ID_SSA;
pub const AVCodecID_CODEC_ID_MOV_TEXT: AVCodecID =
    AVCodecID::AV_CODEC_ID_MOV_TEXT;
pub const AVCodecID_CODEC_ID_HDMV_PGS_SUBTITLE: AVCodecID =
    AVCodecID::AV_CODEC_ID_HDMV_PGS_SUBTITLE;
pub const AVCodecID_CODEC_ID_DVB_TELETEXT: AVCodecID =
    AVCodecID::AV_CODEC_ID_DVB_TELETEXT;
pub const AVCodecID_CODEC_ID_SRT: AVCodecID = AVCodecID::AV_CODEC_ID_SRT;
pub const AVCodecID_CODEC_ID_MICRODVD: AVCodecID =
    AVCodecID::AV_CODEC_ID_MICRODVD;
pub const AVCodecID_CODEC_ID_EIA_608: AVCodecID =
    AVCodecID::AV_CODEC_ID_EIA_608;
pub const AVCodecID_CODEC_ID_JACOSUB: AVCodecID =
    AVCodecID::AV_CODEC_ID_JACOSUB;
pub const AVCodecID_CODEC_ID_SAMI: AVCodecID = AVCodecID::AV_CODEC_ID_SAMI;
pub const AVCodecID_CODEC_ID_REALTEXT: AVCodecID =
    AVCodecID::AV_CODEC_ID_REALTEXT;
pub const AVCodecID_CODEC_ID_SUBVIEWER: AVCodecID =
    AVCodecID::AV_CODEC_ID_SUBVIEWER;
pub const AVCodecID_CODEC_ID_FIRST_UNKNOWN: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_UNKNOWN;
pub const AVCodecID_CODEC_ID_TTF: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_UNKNOWN;
pub const AVCodecID_CODEC_ID_BINTEXT: AVCodecID =
    AVCodecID::AV_CODEC_ID_BINTEXT;
pub const AVCodecID_CODEC_ID_XBIN: AVCodecID = AVCodecID::AV_CODEC_ID_XBIN;
pub const AVCodecID_CODEC_ID_IDF: AVCodecID = AVCodecID::AV_CODEC_ID_IDF;
pub const AVCodecID_CODEC_ID_OTF: AVCodecID = AVCodecID::AV_CODEC_ID_OTF;
pub const AVCodecID_CODEC_ID_PROBE: AVCodecID = AVCodecID::AV_CODEC_ID_PROBE;
pub const AVCodecID_CODEC_ID_MPEG2TS: AVCodecID =
    AVCodecID::AV_CODEC_ID_MPEG2TS;
pub const AVCodecID_CODEC_ID_MPEG4SYSTEMS: AVCodecID =
    AVCodecID::AV_CODEC_ID_MPEG4SYSTEMS;
pub const AVCodecID_CODEC_ID_FFMETADATA: AVCodecID =
    AVCodecID::AV_CODEC_ID_FFMETADATA;
#[repr(u32)]
/**
 * Identify the syntax and semantics of the bitstream.
 * The principle is roughly:
 * Two decoders with the same ID can decode the same streams.
 * Two encoders with the same ID can encode compatible streams.
 * There may be slight deviations from the principle due to implementation
 * details.
 *
 * If you add a codec ID to this list, add it so that
 * 1. no value of a existing codec ID changes (that would break ABI),
 * 2. Give it a value which when taken as ASCII is recognized uniquely by a human as this specific codec.
 *    This ensures that 2 forks can independently add AVCodecIDs without producing conflicts.
 *
 * After adding new codec IDs, do not forget to add an entry to the codec
 * descriptor list and bump libavcodec minor version.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVCodecID {
    AV_CODEC_ID_NONE = 0,
    AV_CODEC_ID_MPEG1VIDEO = 1,
    AV_CODEC_ID_MPEG2VIDEO = 2,
    AV_CODEC_ID_MPEG2VIDEO_XVMC = 3,
    AV_CODEC_ID_H261 = 4,
    AV_CODEC_ID_H263 = 5,
    AV_CODEC_ID_RV10 = 6,
    AV_CODEC_ID_RV20 = 7,
    AV_CODEC_ID_MJPEG = 8,
    AV_CODEC_ID_MJPEGB = 9,
    AV_CODEC_ID_LJPEG = 10,
    AV_CODEC_ID_SP5X = 11,
    AV_CODEC_ID_JPEGLS = 12,
    AV_CODEC_ID_MPEG4 = 13,
    AV_CODEC_ID_RAWVIDEO = 14,
    AV_CODEC_ID_MSMPEG4V1 = 15,
    AV_CODEC_ID_MSMPEG4V2 = 16,
    AV_CODEC_ID_MSMPEG4V3 = 17,
    AV_CODEC_ID_WMV1 = 18,
    AV_CODEC_ID_WMV2 = 19,
    AV_CODEC_ID_H263P = 20,
    AV_CODEC_ID_H263I = 21,
    AV_CODEC_ID_FLV1 = 22,
    AV_CODEC_ID_SVQ1 = 23,
    AV_CODEC_ID_SVQ3 = 24,
    AV_CODEC_ID_DVVIDEO = 25,
    AV_CODEC_ID_HUFFYUV = 26,
    AV_CODEC_ID_CYUV = 27,
    AV_CODEC_ID_H264 = 28,
    AV_CODEC_ID_INDEO3 = 29,
    AV_CODEC_ID_VP3 = 30,
    AV_CODEC_ID_THEORA = 31,
    AV_CODEC_ID_ASV1 = 32,
    AV_CODEC_ID_ASV2 = 33,
    AV_CODEC_ID_FFV1 = 34,
    AV_CODEC_ID_4XM = 35,
    AV_CODEC_ID_VCR1 = 36,
    AV_CODEC_ID_CLJR = 37,
    AV_CODEC_ID_MDEC = 38,
    AV_CODEC_ID_ROQ = 39,
    AV_CODEC_ID_INTERPLAY_VIDEO = 40,
    AV_CODEC_ID_XAN_WC3 = 41,
    AV_CODEC_ID_XAN_WC4 = 42,
    AV_CODEC_ID_RPZA = 43,
    AV_CODEC_ID_CINEPAK = 44,
    AV_CODEC_ID_WS_VQA = 45,
    AV_CODEC_ID_MSRLE = 46,
    AV_CODEC_ID_MSVIDEO1 = 47,
    AV_CODEC_ID_IDCIN = 48,
    AV_CODEC_ID_8BPS = 49,
    AV_CODEC_ID_SMC = 50,
    AV_CODEC_ID_FLIC = 51,
    AV_CODEC_ID_TRUEMOTION1 = 52,
    AV_CODEC_ID_VMDVIDEO = 53,
    AV_CODEC_ID_MSZH = 54,
    AV_CODEC_ID_ZLIB = 55,
    AV_CODEC_ID_QTRLE = 56,
    AV_CODEC_ID_TSCC = 57,
    AV_CODEC_ID_ULTI = 58,
    AV_CODEC_ID_QDRAW = 59,
    AV_CODEC_ID_VIXL = 60,
    AV_CODEC_ID_QPEG = 61,
    AV_CODEC_ID_PNG = 62,
    AV_CODEC_ID_PPM = 63,
    AV_CODEC_ID_PBM = 64,
    AV_CODEC_ID_PGM = 65,
    AV_CODEC_ID_PGMYUV = 66,
    AV_CODEC_ID_PAM = 67,
    AV_CODEC_ID_FFVHUFF = 68,
    AV_CODEC_ID_RV30 = 69,
    AV_CODEC_ID_RV40 = 70,
    AV_CODEC_ID_VC1 = 71,
    AV_CODEC_ID_WMV3 = 72,
    AV_CODEC_ID_LOCO = 73,
    AV_CODEC_ID_WNV1 = 74,
    AV_CODEC_ID_AASC = 75,
    AV_CODEC_ID_INDEO2 = 76,
    AV_CODEC_ID_FRAPS = 77,
    AV_CODEC_ID_TRUEMOTION2 = 78,
    AV_CODEC_ID_BMP = 79,
    AV_CODEC_ID_CSCD = 80,
    AV_CODEC_ID_MMVIDEO = 81,
    AV_CODEC_ID_ZMBV = 82,
    AV_CODEC_ID_AVS = 83,
    AV_CODEC_ID_SMACKVIDEO = 84,
    AV_CODEC_ID_NUV = 85,
    AV_CODEC_ID_KMVC = 86,
    AV_CODEC_ID_FLASHSV = 87,
    AV_CODEC_ID_CAVS = 88,
    AV_CODEC_ID_JPEG2000 = 89,
    AV_CODEC_ID_VMNC = 90,
    AV_CODEC_ID_VP5 = 91,
    AV_CODEC_ID_VP6 = 92,
    AV_CODEC_ID_VP6F = 93,
    AV_CODEC_ID_TARGA = 94,
    AV_CODEC_ID_DSICINVIDEO = 95,
    AV_CODEC_ID_TIERTEXSEQVIDEO = 96,
    AV_CODEC_ID_TIFF = 97,
    AV_CODEC_ID_GIF = 98,
    AV_CODEC_ID_DXA = 99,
    AV_CODEC_ID_DNXHD = 100,
    AV_CODEC_ID_THP = 101,
    AV_CODEC_ID_SGI = 102,
    AV_CODEC_ID_C93 = 103,
    AV_CODEC_ID_BETHSOFTVID = 104,
    AV_CODEC_ID_PTX = 105,
    AV_CODEC_ID_TXD = 106,
    AV_CODEC_ID_VP6A = 107,
    AV_CODEC_ID_AMV = 108,
    AV_CODEC_ID_VB = 109,
    AV_CODEC_ID_PCX = 110,
    AV_CODEC_ID_SUNRAST = 111,
    AV_CODEC_ID_INDEO4 = 112,
    AV_CODEC_ID_INDEO5 = 113,
    AV_CODEC_ID_MIMIC = 114,
    AV_CODEC_ID_RL2 = 115,
    AV_CODEC_ID_ESCAPE124 = 116,
    AV_CODEC_ID_DIRAC = 117,
    AV_CODEC_ID_BFI = 118,
    AV_CODEC_ID_CMV = 119,
    AV_CODEC_ID_MOTIONPIXELS = 120,
    AV_CODEC_ID_TGV = 121,
    AV_CODEC_ID_TGQ = 122,
    AV_CODEC_ID_TQI = 123,
    AV_CODEC_ID_AURA = 124,
    AV_CODEC_ID_AURA2 = 125,
    AV_CODEC_ID_V210X = 126,
    AV_CODEC_ID_TMV = 127,
    AV_CODEC_ID_V210 = 128,
    AV_CODEC_ID_DPX = 129,
    AV_CODEC_ID_MAD = 130,
    AV_CODEC_ID_FRWU = 131,
    AV_CODEC_ID_FLASHSV2 = 132,
    AV_CODEC_ID_CDGRAPHICS = 133,
    AV_CODEC_ID_R210 = 134,
    AV_CODEC_ID_ANM = 135,
    AV_CODEC_ID_BINKVIDEO = 136,
    AV_CODEC_ID_IFF_ILBM = 137,
    AV_CODEC_ID_IFF_BYTERUN1 = 138,
    AV_CODEC_ID_KGV1 = 139,
    AV_CODEC_ID_YOP = 140,
    AV_CODEC_ID_VP8 = 141,
    AV_CODEC_ID_PICTOR = 142,
    AV_CODEC_ID_ANSI = 143,
    AV_CODEC_ID_A64_MULTI = 144,
    AV_CODEC_ID_A64_MULTI5 = 145,
    AV_CODEC_ID_R10K = 146,
    AV_CODEC_ID_MXPEG = 147,
    AV_CODEC_ID_LAGARITH = 148,
    AV_CODEC_ID_PRORES = 149,
    AV_CODEC_ID_JV = 150,
    AV_CODEC_ID_DFA = 151,
    AV_CODEC_ID_WMV3IMAGE = 152,
    AV_CODEC_ID_VC1IMAGE = 153,
    AV_CODEC_ID_UTVIDEO = 154,
    AV_CODEC_ID_BMV_VIDEO = 155,
    AV_CODEC_ID_VBLE = 156,
    AV_CODEC_ID_DXTORY = 157,
    AV_CODEC_ID_V410 = 158,
    AV_CODEC_ID_XWD = 159,
    AV_CODEC_ID_CDXL = 160,
    AV_CODEC_ID_XBM = 161,
    AV_CODEC_ID_ZEROCODEC = 162,
    AV_CODEC_ID_MSS1 = 163,
    AV_CODEC_ID_MSA1 = 164,
    AV_CODEC_ID_TSCC2 = 165,
    AV_CODEC_ID_MTS2 = 166,
    AV_CODEC_ID_CLLC = 167,
    AV_CODEC_ID_MSS2 = 168,
    AV_CODEC_ID_VP9 = 169,
    AV_CODEC_ID_AIC = 170,
    AV_CODEC_ID_ESCAPE130_DEPRECATED = 171,
    AV_CODEC_ID_G2M_DEPRECATED = 172,
    AV_CODEC_ID_WEBP_DEPRECATED = 173,
    AV_CODEC_ID_HNM4_VIDEO = 174,
    AV_CODEC_ID_HEVC_DEPRECATED = 175,
    AV_CODEC_ID_FIC = 176,
    AV_CODEC_ID_ALIAS_PIX = 177,
    AV_CODEC_ID_BRENDER_PIX_DEPRECATED = 178,
    AV_CODEC_ID_PAF_VIDEO_DEPRECATED = 179,
    AV_CODEC_ID_EXR_DEPRECATED = 180,
    AV_CODEC_ID_VP7_DEPRECATED = 181,
    AV_CODEC_ID_SANM_DEPRECATED = 182,
    AV_CODEC_ID_SGIRLE_DEPRECATED = 183,
    AV_CODEC_ID_MVC1_DEPRECATED = 184,
    AV_CODEC_ID_MVC2_DEPRECATED = 185,
    AV_CODEC_ID_HQX = 186,
    AV_CODEC_ID_TDSC = 187,
    AV_CODEC_ID_HQ_HQA = 188,
    AV_CODEC_ID_HAP = 189,
    AV_CODEC_ID_DDS = 190,
    AV_CODEC_ID_BRENDER_PIX = 1112557912,
    AV_CODEC_ID_Y41P = 1496592720,
    AV_CODEC_ID_ESCAPE130 = 1160852272,
    AV_CODEC_ID_EXR = 809850962,
    AV_CODEC_ID_AVRP = 1096176208,
    AV_CODEC_ID_012V = 808530518,
    AV_CODEC_ID_G2M = 4665933,
    AV_CODEC_ID_AVUI = 1096176969,
    AV_CODEC_ID_AYUV = 1096373590,
    AV_CODEC_ID_TARGA_Y216 = 1412575542,
    AV_CODEC_ID_V308 = 1446195256,
    AV_CODEC_ID_V408 = 1446260792,
    AV_CODEC_ID_YUV4 = 1498764852,
    AV_CODEC_ID_SANM = 1396788813,
    AV_CODEC_ID_PAF_VIDEO = 1346455126,
    AV_CODEC_ID_AVRN = 1096176238,
    AV_CODEC_ID_CPIA = 1129335105,
    AV_CODEC_ID_XFACE = 1480999235,
    AV_CODEC_ID_SGIRLE = 1397180754,
    AV_CODEC_ID_MVC1 = 1297498929,
    AV_CODEC_ID_MVC2 = 1297498930,
    AV_CODEC_ID_SNOW = 1397641047,
    AV_CODEC_ID_WEBP = 1464156752,
    AV_CODEC_ID_SMVJPEG = 1397577290,
    AV_CODEC_ID_HEVC = 1211250229,
    AV_CODEC_ID_VP7 = 1448097584,
    AV_CODEC_ID_APNG = 1095781959,
    AV_CODEC_ID_FIRST_AUDIO = 65536,
    AV_CODEC_ID_PCM_S16BE = 65537,
    AV_CODEC_ID_PCM_U16LE = 65538,
    AV_CODEC_ID_PCM_U16BE = 65539,
    AV_CODEC_ID_PCM_S8 = 65540,
    AV_CODEC_ID_PCM_U8 = 65541,
    AV_CODEC_ID_PCM_MULAW = 65542,
    AV_CODEC_ID_PCM_ALAW = 65543,
    AV_CODEC_ID_PCM_S32LE = 65544,
    AV_CODEC_ID_PCM_S32BE = 65545,
    AV_CODEC_ID_PCM_U32LE = 65546,
    AV_CODEC_ID_PCM_U32BE = 65547,
    AV_CODEC_ID_PCM_S24LE = 65548,
    AV_CODEC_ID_PCM_S24BE = 65549,
    AV_CODEC_ID_PCM_U24LE = 65550,
    AV_CODEC_ID_PCM_U24BE = 65551,
    AV_CODEC_ID_PCM_S24DAUD = 65552,
    AV_CODEC_ID_PCM_ZORK = 65553,
    AV_CODEC_ID_PCM_S16LE_PLANAR = 65554,
    AV_CODEC_ID_PCM_DVD = 65555,
    AV_CODEC_ID_PCM_F32BE = 65556,
    AV_CODEC_ID_PCM_F32LE = 65557,
    AV_CODEC_ID_PCM_F64BE = 65558,
    AV_CODEC_ID_PCM_F64LE = 65559,
    AV_CODEC_ID_PCM_BLURAY = 65560,
    AV_CODEC_ID_PCM_LXF = 65561,
    AV_CODEC_ID_S302M = 65562,
    AV_CODEC_ID_PCM_S8_PLANAR = 65563,
    AV_CODEC_ID_PCM_S24LE_PLANAR_DEPRECATED = 65564,
    AV_CODEC_ID_PCM_S32LE_PLANAR_DEPRECATED = 65565,
    AV_CODEC_ID_PCM_S16BE_PLANAR_DEPRECATED = 65566,
    AV_CODEC_ID_PCM_S24LE_PLANAR = 407917392,
    AV_CODEC_ID_PCM_S32LE_PLANAR = 542135120,
    AV_CODEC_ID_PCM_S16BE_PLANAR = 1347637264,
    AV_CODEC_ID_ADPCM_IMA_QT = 69632,
    AV_CODEC_ID_ADPCM_IMA_WAV = 69633,
    AV_CODEC_ID_ADPCM_IMA_DK3 = 69634,
    AV_CODEC_ID_ADPCM_IMA_DK4 = 69635,
    AV_CODEC_ID_ADPCM_IMA_WS = 69636,
    AV_CODEC_ID_ADPCM_IMA_SMJPEG = 69637,
    AV_CODEC_ID_ADPCM_MS = 69638,
    AV_CODEC_ID_ADPCM_4XM = 69639,
    AV_CODEC_ID_ADPCM_XA = 69640,
    AV_CODEC_ID_ADPCM_ADX = 69641,
    AV_CODEC_ID_ADPCM_EA = 69642,
    AV_CODEC_ID_ADPCM_G726 = 69643,
    AV_CODEC_ID_ADPCM_CT = 69644,
    AV_CODEC_ID_ADPCM_SWF = 69645,
    AV_CODEC_ID_ADPCM_YAMAHA = 69646,
    AV_CODEC_ID_ADPCM_SBPRO_4 = 69647,
    AV_CODEC_ID_ADPCM_SBPRO_3 = 69648,
    AV_CODEC_ID_ADPCM_SBPRO_2 = 69649,
    AV_CODEC_ID_ADPCM_THP = 69650,
    AV_CODEC_ID_ADPCM_IMA_AMV = 69651,
    AV_CODEC_ID_ADPCM_EA_R1 = 69652,
    AV_CODEC_ID_ADPCM_EA_R3 = 69653,
    AV_CODEC_ID_ADPCM_EA_R2 = 69654,
    AV_CODEC_ID_ADPCM_IMA_EA_SEAD = 69655,
    AV_CODEC_ID_ADPCM_IMA_EA_EACS = 69656,
    AV_CODEC_ID_ADPCM_EA_XAS = 69657,
    AV_CODEC_ID_ADPCM_EA_MAXIS_XA = 69658,
    AV_CODEC_ID_ADPCM_IMA_ISS = 69659,
    AV_CODEC_ID_ADPCM_G722 = 69660,
    AV_CODEC_ID_ADPCM_IMA_APC = 69661,
    AV_CODEC_ID_ADPCM_VIMA_DEPRECATED = 69662,
    AV_CODEC_ID_ADPCM_VIMA = 1447644481,
    AV_CODEC_ID_ADPCM_AFC = 1095123744,
    AV_CODEC_ID_ADPCM_IMA_OKI = 1330333984,
    AV_CODEC_ID_ADPCM_DTK = 1146374944,
    AV_CODEC_ID_ADPCM_IMA_RAD = 1380008992,
    AV_CODEC_ID_ADPCM_G726LE = 909260615,
    AV_CODEC_ID_ADPCM_THP_LE = 1414025292,
    AV_CODEC_ID_AMR_NB = 73728,
    AV_CODEC_ID_AMR_WB = 73729,
    AV_CODEC_ID_RA_144 = 77824,
    AV_CODEC_ID_RA_288 = 77825,
    AV_CODEC_ID_ROQ_DPCM = 81920,
    AV_CODEC_ID_INTERPLAY_DPCM = 81921,
    AV_CODEC_ID_XAN_DPCM = 81922,
    AV_CODEC_ID_SOL_DPCM = 81923,
    AV_CODEC_ID_MP2 = 86016,
    AV_CODEC_ID_MP3 = 86017,
    AV_CODEC_ID_AAC = 86018,
    AV_CODEC_ID_AC3 = 86019,
    AV_CODEC_ID_DTS = 86020,
    AV_CODEC_ID_VORBIS = 86021,
    AV_CODEC_ID_DVAUDIO = 86022,
    AV_CODEC_ID_WMAV1 = 86023,
    AV_CODEC_ID_WMAV2 = 86024,
    AV_CODEC_ID_MACE3 = 86025,
    AV_CODEC_ID_MACE6 = 86026,
    AV_CODEC_ID_VMDAUDIO = 86027,
    AV_CODEC_ID_FLAC = 86028,
    AV_CODEC_ID_MP3ADU = 86029,
    AV_CODEC_ID_MP3ON4 = 86030,
    AV_CODEC_ID_SHORTEN = 86031,
    AV_CODEC_ID_ALAC = 86032,
    AV_CODEC_ID_WESTWOOD_SND1 = 86033,
    AV_CODEC_ID_GSM = 86034,
    AV_CODEC_ID_QDM2 = 86035,
    AV_CODEC_ID_COOK = 86036,
    AV_CODEC_ID_TRUESPEECH = 86037,
    AV_CODEC_ID_TTA = 86038,
    AV_CODEC_ID_SMACKAUDIO = 86039,
    AV_CODEC_ID_QCELP = 86040,
    AV_CODEC_ID_WAVPACK = 86041,
    AV_CODEC_ID_DSICINAUDIO = 86042,
    AV_CODEC_ID_IMC = 86043,
    AV_CODEC_ID_MUSEPACK7 = 86044,
    AV_CODEC_ID_MLP = 86045,
    AV_CODEC_ID_GSM_MS = 86046,
    AV_CODEC_ID_ATRAC3 = 86047,
    AV_CODEC_ID_VOXWARE = 86048,
    AV_CODEC_ID_APE = 86049,
    AV_CODEC_ID_NELLYMOSER = 86050,
    AV_CODEC_ID_MUSEPACK8 = 86051,
    AV_CODEC_ID_SPEEX = 86052,
    AV_CODEC_ID_WMAVOICE = 86053,
    AV_CODEC_ID_WMAPRO = 86054,
    AV_CODEC_ID_WMALOSSLESS = 86055,
    AV_CODEC_ID_ATRAC3P = 86056,
    AV_CODEC_ID_EAC3 = 86057,
    AV_CODEC_ID_SIPR = 86058,
    AV_CODEC_ID_MP1 = 86059,
    AV_CODEC_ID_TWINVQ = 86060,
    AV_CODEC_ID_TRUEHD = 86061,
    AV_CODEC_ID_MP4ALS = 86062,
    AV_CODEC_ID_ATRAC1 = 86063,
    AV_CODEC_ID_BINKAUDIO_RDFT = 86064,
    AV_CODEC_ID_BINKAUDIO_DCT = 86065,
    AV_CODEC_ID_AAC_LATM = 86066,
    AV_CODEC_ID_QDMC = 86067,
    AV_CODEC_ID_CELT = 86068,
    AV_CODEC_ID_G723_1 = 86069,
    AV_CODEC_ID_G729 = 86070,
    AV_CODEC_ID_8SVX_EXP = 86071,
    AV_CODEC_ID_8SVX_FIB = 86072,
    AV_CODEC_ID_BMV_AUDIO = 86073,
    AV_CODEC_ID_RALF = 86074,
    AV_CODEC_ID_IAC = 86075,
    AV_CODEC_ID_ILBC = 86076,
    AV_CODEC_ID_OPUS_DEPRECATED = 86077,
    AV_CODEC_ID_COMFORT_NOISE = 86078,
    AV_CODEC_ID_TAK_DEPRECATED = 86079,
    AV_CODEC_ID_METASOUND = 86080,
    AV_CODEC_ID_PAF_AUDIO_DEPRECATED = 86081,
    AV_CODEC_ID_ON2AVC = 86082,
    AV_CODEC_ID_DSS_SP = 86083,
    AV_CODEC_ID_FFWAVESYNTH = 1179014995,
    AV_CODEC_ID_SONIC = 1397706307,
    AV_CODEC_ID_SONIC_LS = 1397706316,
    AV_CODEC_ID_PAF_AUDIO = 1346455105,
    AV_CODEC_ID_OPUS = 1330664787,
    AV_CODEC_ID_TAK = 1950507339,
    AV_CODEC_ID_EVRC = 1936029283,
    AV_CODEC_ID_SMV = 1936944502,
    AV_CODEC_ID_DSD_LSBF = 1146307660,
    AV_CODEC_ID_DSD_MSBF = 1146307661,
    AV_CODEC_ID_DSD_LSBF_PLANAR = 1146307633,
    AV_CODEC_ID_DSD_MSBF_PLANAR = 1146307640,
    AV_CODEC_ID_4GV = 1932814198,
    AV_CODEC_ID_FIRST_SUBTITLE = 94208,
    AV_CODEC_ID_DVB_SUBTITLE = 94209,
    AV_CODEC_ID_TEXT = 94210,
    AV_CODEC_ID_XSUB = 94211,
    AV_CODEC_ID_SSA = 94212,
    AV_CODEC_ID_MOV_TEXT = 94213,
    AV_CODEC_ID_HDMV_PGS_SUBTITLE = 94214,
    AV_CODEC_ID_DVB_TELETEXT = 94215,
    AV_CODEC_ID_SRT = 94216,
    AV_CODEC_ID_MICRODVD = 1833195076,
    AV_CODEC_ID_EIA_608 = 1664495672,
    AV_CODEC_ID_JACOSUB = 1246975298,
    AV_CODEC_ID_SAMI = 1396788553,
    AV_CODEC_ID_REALTEXT = 1381259348,
    AV_CODEC_ID_STL = 1399870540,
    AV_CODEC_ID_SUBVIEWER1 = 1398953521,
    AV_CODEC_ID_SUBVIEWER = 1400201814,
    AV_CODEC_ID_SUBRIP = 1397909872,
    AV_CODEC_ID_WEBVTT = 1465275476,
    AV_CODEC_ID_MPL2 = 1297108018,
    AV_CODEC_ID_VPLAYER = 1448111218,
    AV_CODEC_ID_PJS = 1349012051,
    AV_CODEC_ID_ASS = 1095979808,
    AV_CODEC_ID_HDMV_TEXT_SUBTITLE = 1111774296,
    AV_CODEC_ID_FIRST_UNKNOWN = 98304,
    AV_CODEC_ID_BINTEXT = 1112823892,
    AV_CODEC_ID_XBIN = 1480739150,
    AV_CODEC_ID_IDF = 4801606,
    AV_CODEC_ID_OTF = 5198918,
    AV_CODEC_ID_SMPTE_KLV = 1263294017,
    AV_CODEC_ID_DVD_NAV = 1145979222,
    AV_CODEC_ID_TIMED_ID3 = 1414087731,
    AV_CODEC_ID_BIN_DATA = 1145132097,
    AV_CODEC_ID_PROBE = 102400,
    AV_CODEC_ID_MPEG2TS = 131072,
    AV_CODEC_ID_MPEG4SYSTEMS = 131073,
    AV_CODEC_ID_FFMETADATA = 135168,
}
/**
 * This struct describes the properties of a single codec described by an
 * AVCodecID.
 * @see avcodec_descriptor_get()
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecDescriptor {
    pub id: AVCodecID,
    pub type_: AVMediaType,
    /**
     * Name of the codec described by this descriptor. It is non-empty and
     * unique for each codec descriptor. It should contain alphanumeric
     * characters and '_' only.
     */
    pub name: *const ::std::os::raw::c_char,
    /**
     * A more descriptive name for this codec. May be NULL.
     */
    pub long_name: *const ::std::os::raw::c_char,
    /**
     * Codec properties, a combination of AV_CODEC_PROP_* flags.
     */
    pub props: ::std::os::raw::c_int,
    /**
     * MIME type(s) associated with the codec.
     * May be NULL; if not, a NULL-terminated array of MIME types.
     * The first item is always non-NULL and is the preferred MIME type.
     */
    pub mime_types: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVCodecDescriptor() {
    assert_eq!(::std::mem::size_of::<AVCodecDescriptor>() , 40usize);
    assert_eq!(::std::mem::align_of::<AVCodecDescriptor>() , 8usize);
}
impl Clone for AVCodecDescriptor {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Motion_Est_ID {
    ME_ZERO = 1,
    ME_FULL = 2,
    ME_LOG = 3,
    ME_PHODS = 4,
    ME_EPZS = 5,
    ME_X1 = 6,
    ME_HEX = 7,
    ME_UMH = 8,
    ME_TESA = 9,
    ME_ITER = 50,
}
#[repr(i32)]
/**
 * @ingroup lavc_decoding
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVDiscard {
    AVDISCARD_NONE = -16,
    AVDISCARD_DEFAULT = 0,
    AVDISCARD_NONREF = 8,
    AVDISCARD_BIDIR = 16,
    AVDISCARD_NONINTRA = 24,
    AVDISCARD_NONKEY = 32,
    AVDISCARD_ALL = 48,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVAudioServiceType {
    AV_AUDIO_SERVICE_TYPE_MAIN = 0,
    AV_AUDIO_SERVICE_TYPE_EFFECTS = 1,
    AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2,
    AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3,
    AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4,
    AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5,
    AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6,
    AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7,
    AV_AUDIO_SERVICE_TYPE_KARAOKE = 8,
    AV_AUDIO_SERVICE_TYPE_NB = 9,
}
/**
 * @ingroup lavc_encoding
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RcOverride {
    pub start_frame: ::std::os::raw::c_int,
    pub end_frame: ::std::os::raw::c_int,
    pub qscale: ::std::os::raw::c_int,
    pub quality_factor: f32,
}
#[test]
fn bindgen_test_layout_RcOverride() {
    assert_eq!(::std::mem::size_of::<RcOverride>() , 16usize);
    assert_eq!(::std::mem::align_of::<RcOverride>() , 4usize);
}
impl Clone for RcOverride {
    fn clone(&self) -> Self { *self }
}
pub type AVPanScan = AVFrame_AVPanScan;
#[repr(u32)]
/**
 * @defgroup lavc_packet AVPacket
 *
 * Types and functions for working with AVPacket.
 * @{
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPacketSideDataType {
    AV_PKT_DATA_PALETTE = 0,
    AV_PKT_DATA_NEW_EXTRADATA = 1,
    AV_PKT_DATA_PARAM_CHANGE = 2,
    AV_PKT_DATA_H263_MB_INFO = 3,
    AV_PKT_DATA_REPLAYGAIN = 4,
    AV_PKT_DATA_DISPLAYMATRIX = 5,
    AV_PKT_DATA_STEREO3D = 6,
    AV_PKT_DATA_AUDIO_SERVICE_TYPE = 7,
    AV_PKT_DATA_QUALITY_STATS = 8,
    AV_PKT_DATA_SKIP_SAMPLES = 70,
    AV_PKT_DATA_JP_DUALMONO = 71,
    AV_PKT_DATA_STRINGS_METADATA = 72,
    AV_PKT_DATA_SUBTITLE_POSITION = 73,
    AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL = 74,
    AV_PKT_DATA_WEBVTT_IDENTIFIER = 75,
    AV_PKT_DATA_WEBVTT_SETTINGS = 76,
    AV_PKT_DATA_METADATA_UPDATE = 77,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVPacketSideData {
    pub data: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub type_: AVPacketSideDataType,
}
#[test]
fn bindgen_test_layout_AVPacketSideData() {
    assert_eq!(::std::mem::size_of::<AVPacketSideData>() , 16usize);
    assert_eq!(::std::mem::align_of::<AVPacketSideData>() , 8usize);
}
impl Clone for AVPacketSideData {
    fn clone(&self) -> Self { *self }
}
/**
 * This structure stores compressed data. It is typically exported by demuxers
 * and then passed as input to decoders, or received as output from encoders and
 * then passed to muxers.
 *
 * For video, it should typically contain one compressed frame. For audio it may
 * contain several compressed frames.
 *
 * AVPacket is one of the few structs in FFmpeg, whose size is a part of public
 * ABI. Thus it may be allocated on stack and no new fields can be added to it
 * without libavcodec and libavformat major bump.
 *
 * The semantics of data ownership depends on the buf or destruct (deprecated)
 * fields. If either is set, the packet data is dynamically allocated and is
 * valid indefinitely until av_free_packet() is called (which in turn calls
 * av_buffer_unref()/the destruct callback to free the data). If neither is set,
 * the packet data is typically backed by some static buffer somewhere and is
 * only valid for a limited time (e.g. until the next read call when demuxing).
 *
 * The side data is always allocated with av_malloc() and is freed in
 * av_free_packet().
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVPacket {
    /**
     * A reference to the reference-counted buffer where the packet data is
     * stored.
     * May be NULL, then the packet data is not reference-counted.
     */
    pub buf: *mut AVBufferRef,
    /**
     * Presentation timestamp in AVStream->time_base units; the time at which
     * the decompressed packet will be presented to the user.
     * Can be AV_NOPTS_VALUE if it is not stored in the file.
     * pts MUST be larger or equal to dts as presentation cannot happen before
     * decompression, unless one wants to view hex dumps. Some formats misuse
     * the terms dts and pts/cts to mean something different. Such timestamps
     * must be converted to true pts/dts before they are stored in AVPacket.
     */
    pub pts: i64,
    /**
     * Decompression timestamp in AVStream->time_base units; the time at which
     * the packet is decompressed.
     * Can be AV_NOPTS_VALUE if it is not stored in the file.
     */
    pub dts: i64,
    pub data: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub stream_index: ::std::os::raw::c_int,
    /**
     * A combination of AV_PKT_FLAG values
     */
    pub flags: ::std::os::raw::c_int,
    /**
     * Additional packet data that can be provided by the container.
     * Packet can contain several types of side information.
     */
    pub side_data: *mut AVPacketSideData,
    pub side_data_elems: ::std::os::raw::c_int,
    /**
     * Duration of this packet in AVStream->time_base units, 0 if unknown.
     * Equals next_pts - this_pts in presentation order.
     */
    pub duration: ::std::os::raw::c_int,
    pub destruct: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut AVPacket)>,
    pub priv_: *mut ::std::os::raw::c_void,
    ///< byte position in stream, -1 if unknown
    pub pos: i64,
    /**
     * Time difference in AVStream->time_base units from the pts of this
     * packet to the point at which the output from the decoder has converged
     * independent from the availability of previous frames. That is, the
     * frames are virtually identical no matter if decoding started from
     * the very first frame or from this keyframe.
     * Is AV_NOPTS_VALUE if unknown.
     * This field is not the display duration of the current packet.
     * This field has no meaning if the packet does not have AV_PKT_FLAG_KEY
     * set.
     *
     * The purpose of this field is to allow seeking in streams that have no
     * keyframes in the conventional sense. It corresponds to the
     * recovery point SEI in H.264 and match_time_delta in NUT. It is also
     * essential for some types of subtitle streams to ensure that all
     * subtitles are correctly displayed after seeking.
     */
    pub convergence_duration: i64,
}
impl Clone for AVPacket {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVSideDataParamChangeFlags {
    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT = 1,
    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 2,
    AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE = 4,
    AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecInternal([u8; 0]);
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVFieldOrder {
    AV_FIELD_UNKNOWN = 0,
    AV_FIELD_PROGRESSIVE = 1,
    AV_FIELD_TT = 2,
    AV_FIELD_BB = 3,
    AV_FIELD_TB = 4,
    AV_FIELD_BT = 5,
}
pub type AVCodecContext = AVFrame_AVCodecContext;
extern "C" {
    pub fn av_codec_get_pkt_timebase(avctx: *const AVCodecContext)
     -> AVRational;
}
extern "C" {
    pub fn av_codec_set_pkt_timebase(avctx: *mut AVCodecContext,
                                     val: AVRational);
}
extern "C" {
    pub fn av_codec_get_codec_descriptor(avctx: *const AVCodecContext)
     -> *const AVCodecDescriptor;
}
extern "C" {
    pub fn av_codec_set_codec_descriptor(avctx: *mut AVCodecContext,
                                         desc: *const AVCodecDescriptor);
}
extern "C" {
    pub fn av_codec_get_codec_properties(avctx: *const AVCodecContext)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn av_codec_get_lowres(avctx: *const AVCodecContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_codec_set_lowres(avctx: *mut AVCodecContext,
                               val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_codec_get_seek_preroll(avctx: *const AVCodecContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_codec_set_seek_preroll(avctx: *mut AVCodecContext,
                                     val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_codec_get_chroma_intra_matrix(avctx: *const AVCodecContext)
     -> *mut u16;
}
extern "C" {
    pub fn av_codec_set_chroma_intra_matrix(avctx: *mut AVCodecContext,
                                            val: *mut u16);
}
/**
 * AVProfile.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVProfile {
    pub profile: ::std::os::raw::c_int,
    ///< short name for the profile
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVProfile() {
    assert_eq!(::std::mem::size_of::<AVProfile>() , 16usize);
    assert_eq!(::std::mem::align_of::<AVProfile>() , 8usize);
}
impl Clone for AVProfile {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecDefault([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVSubtitle {
    pub format: u16,
    pub start_display_time: u32,
    pub end_display_time: u32,
    pub num_rects: ::std::os::raw::c_uint,
    pub rects: *mut *mut AVSubtitleRect,
    ///< Same as packet pts, in AV_TIME_BASE
    pub pts: i64,
}
#[test]
fn bindgen_test_layout_AVSubtitle() {
    assert_eq!(::std::mem::size_of::<AVSubtitle>() , 32usize);
    assert_eq!(::std::mem::align_of::<AVSubtitle>() , 8usize);
}
impl Clone for AVSubtitle {
    fn clone(&self) -> Self { *self }
}
pub type AVCodec = AVFrame_AVCodecContext_AVCodec;
extern "C" {
    pub fn av_codec_get_max_lowres(codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MpegEncContext([u8; 0]);
pub type AVHWAccel = AVFrame_AVCodecContext_AVHWAccel;
/**
 * Picture data structure.
 *
 * Up to four components can be stored into it, the last component is
 * alpha.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVPicture {
    ///< pointers to the image data planes
    pub data: [*mut u8; 8usize],
    ///< number of bytes per line
    pub linesize: [::std::os::raw::c_int; 8usize],
}
#[test]
fn bindgen_test_layout_AVPicture() {
    assert_eq!(::std::mem::size_of::<AVPicture>() , 96usize);
    assert_eq!(::std::mem::align_of::<AVPicture>() , 8usize);
}
impl Clone for AVPicture {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
/**
 * @}
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVSubtitleType {
    SUBTITLE_NONE = 0,
    SUBTITLE_BITMAP = 1,
    SUBTITLE_TEXT = 2,
    SUBTITLE_ASS = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVSubtitleRect {
    ///< top left corner  of pict, undefined when pict is not set
    pub x: ::std::os::raw::c_int,
    ///< top left corner  of pict, undefined when pict is not set
    pub y: ::std::os::raw::c_int,
    ///< width            of pict, undefined when pict is not set
    pub w: ::std::os::raw::c_int,
    ///< height           of pict, undefined when pict is not set
    pub h: ::std::os::raw::c_int,
    ///< number of colors in pict, undefined when pict is not set
    pub nb_colors: ::std::os::raw::c_int,
    /**
     * data+linesize for the bitmap of this subtitle.
     * can be set for text/ass as well once they are rendered
     */
    pub pict: AVPicture,
    pub type_: AVSubtitleType,
    ///< 0 terminated plain UTF-8 text
    pub text: *mut ::std::os::raw::c_char,
    /**
     * 0 terminated ASS/SSA compatible event line.
     * The presentation of this is unaffected by the other values in this
     * struct.
     */
    pub ass: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVSubtitleRect() {
    assert_eq!(::std::mem::size_of::<AVSubtitleRect>() , 152usize);
    assert_eq!(::std::mem::align_of::<AVSubtitleRect>() , 8usize);
}
impl Clone for AVSubtitleRect {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /**
 * If c is NULL, returns the first registered codec,
 * if c is non-NULL, returns the next registered codec after c,
 * or NULL if c is the last one.
 */
    pub fn av_codec_next(c: *const AVCodec) -> *mut AVCodec;
}
extern "C" {
    /**
 * Return the LIBAVCODEC_VERSION_INT constant.
 */
    pub fn avcodec_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * Return the libavcodec build-time configuration.
 */
    pub fn avcodec_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Return the libavcodec license.
 */
    pub fn avcodec_license() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Register the codec codec and initialize libavcodec.
 *
 * @warning either this function or avcodec_register_all() must be called
 * before any other libavcodec functions.
 *
 * @see avcodec_register_all()
 */
    pub fn avcodec_register(codec: *mut AVCodec);
}
extern "C" {
    /**
 * Register all the codecs, parsers and bitstream filters which were enabled at
 * configuration time. If you do not call this function you can select exactly
 * which formats you want to support, by using the individual registration
 * functions.
 *
 * @see avcodec_register
 * @see av_register_codec_parser
 * @see av_register_bitstream_filter
 */
    pub fn avcodec_register_all();
}
extern "C" {
    /**
 * Allocate an AVCodecContext and set its fields to default values. The
 * resulting struct should be freed with avcodec_free_context().
 *
 * @param codec if non-NULL, allocate private data and initialize defaults
 *              for the given codec. It is illegal to then call avcodec_open2()
 *              with a different codec.
 *              If NULL, then the codec-specific defaults won't be initialized,
 *              which may result in suboptimal default settings (this is
 *              important mainly for encoders, e.g. libx264).
 *
 * @return An AVCodecContext filled with default values or NULL on failure.
 * @see avcodec_get_context_defaults
 */
    pub fn avcodec_alloc_context3(codec: *const AVCodec)
     -> *mut AVCodecContext;
}
extern "C" {
    /**
 * Free the codec context and everything associated with it and write NULL to
 * the provided pointer.
 */
    pub fn avcodec_free_context(avctx: *mut *mut AVCodecContext);
}
extern "C" {
    /**
 * Set the fields of the given AVCodecContext to default values corresponding
 * to the given codec (defaults may be codec-dependent).
 *
 * Do not call this function if a non-NULL codec has been passed
 * to avcodec_alloc_context3() that allocated this AVCodecContext.
 * If codec is non-NULL, it is illegal to call avcodec_open2() with a
 * different codec on this AVCodecContext.
 */
    pub fn avcodec_get_context_defaults3(s: *mut AVCodecContext,
                                         codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get the AVClass for AVCodecContext. It can be used in combination with
 * AV_OPT_SEARCH_FAKE_OBJ for examining options.
 *
 * @see av_opt_find().
 */
    pub fn avcodec_get_class() -> *const AVClass;
}
extern "C" {
    /**
 * Get the AVClass for AVFrame. It can be used in combination with
 * AV_OPT_SEARCH_FAKE_OBJ for examining options.
 *
 * @see av_opt_find().
 */
    pub fn avcodec_get_frame_class() -> *const AVClass;
}
extern "C" {
    /**
 * Get the AVClass for AVSubtitleRect. It can be used in combination with
 * AV_OPT_SEARCH_FAKE_OBJ for examining options.
 *
 * @see av_opt_find().
 */
    pub fn avcodec_get_subtitle_rect_class() -> *const AVClass;
}
extern "C" {
    /**
 * Copy the settings of the source AVCodecContext into the destination
 * AVCodecContext. The resulting destination codec context will be
 * unopened, i.e. you are required to call avcodec_open2() before you
 * can use this AVCodecContext to decode/encode video/audio data.
 *
 * @param dest target codec context, should be initialized with
 *             avcodec_alloc_context3(NULL), but otherwise uninitialized
 * @param src source codec context
 * @return AVERROR() on error (e.g. memory allocation error), 0 on success
 */
    pub fn avcodec_copy_context(dest: *mut AVCodecContext,
                                src: *const AVCodecContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @deprecated use av_frame_alloc()
 */
    pub fn avcodec_alloc_frame() -> *mut AVFrame;
}
extern "C" {
    /**
 * Set the fields of the given AVFrame to default values.
 *
 * @param frame The AVFrame of which the fields should be set to default values.
 *
 * @deprecated use av_frame_unref()
 */
    pub fn avcodec_get_frame_defaults(frame: *mut AVFrame);
}
extern "C" {
    /**
 * Free the frame and any dynamically allocated objects in it,
 * e.g. extended_data.
 *
 * @param frame frame to be freed. The pointer will be set to NULL.
 *
 * @warning this function does NOT free the data buffers themselves
 * (it does not know how, since they might have been allocated with
 *  a custom get_buffer()).
 *
 * @deprecated use av_frame_free()
 */
    pub fn avcodec_free_frame(frame: *mut *mut AVFrame);
}
extern "C" {
    /**
 * Initialize the AVCodecContext to use the given AVCodec. Prior to using this
 * function the context has to be allocated with avcodec_alloc_context3().
 *
 * The functions avcodec_find_decoder_by_name(), avcodec_find_encoder_by_name(),
 * avcodec_find_decoder() and avcodec_find_encoder() provide an easy way for
 * retrieving a codec.
 *
 * @warning This function is not thread safe!
 *
 * @note Always call this function before using decoding routines (such as
 * @ref avcodec_decode_video2()).
 *
 * @code
 * avcodec_register_all();
 * av_dict_set(&opts, "b", "2.5M", 0);
 * codec = avcodec_find_decoder(AV_CODEC_ID_H264);
 * if (!codec)
 *     exit(1);
 *
 * context = avcodec_alloc_context3(codec);
 *
 * if (avcodec_open2(context, codec, opts) < 0)
 *     exit(1);
 * @endcode
 *
 * @param avctx The context to initialize.
 * @param codec The codec to open this context for. If a non-NULL codec has been
 *              previously passed to avcodec_alloc_context3() or
 *              avcodec_get_context_defaults3() for this context, then this
 *              parameter MUST be either NULL or equal to the previously passed
 *              codec.
 * @param options A dictionary filled with AVCodecContext and codec-private options.
 *                On return this object will be filled with options that were not found.
 *
 * @return zero on success, a negative value on error
 * @see avcodec_alloc_context3(), avcodec_find_decoder(), avcodec_find_encoder(),
 *      av_dict_set(), av_opt_find().
 */
    pub fn avcodec_open2(avctx: *mut AVCodecContext, codec: *const AVCodec,
                         options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Close a given AVCodecContext and free all the data associated with it
 * (but not the AVCodecContext itself).
 *
 * Calling this function on an AVCodecContext that hasn't been opened will free
 * the codec-specific data allocated in avcodec_alloc_context3() /
 * avcodec_get_context_defaults3() with a non-NULL codec. Subsequent calls will
 * do nothing.
 */
    pub fn avcodec_close(avctx: *mut AVCodecContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Free all allocated data in the given subtitle struct.
 *
 * @param sub AVSubtitle to free.
 */
    pub fn avsubtitle_free(sub: *mut AVSubtitle);
}
extern "C" {
    /**
 * Default packet destructor.
 * @deprecated use the AVBuffer API instead
 */
    pub fn av_destruct_packet(pkt: *mut AVPacket);
}
extern "C" {
    /**
 * Initialize optional fields of a packet with default values.
 *
 * Note, this does not touch the data and size members, which have to be
 * initialized separately.
 *
 * @param pkt packet
 */
    pub fn av_init_packet(pkt: *mut AVPacket);
}
extern "C" {
    /**
 * Allocate the payload of a packet and initialize its fields with
 * default values.
 *
 * @param pkt packet
 * @param size wanted payload size
 * @return 0 if OK, AVERROR_xxx otherwise
 */
    pub fn av_new_packet(pkt: *mut AVPacket, size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Reduce packet size, correctly zeroing padding
 *
 * @param pkt packet
 * @param size new size
 */
    pub fn av_shrink_packet(pkt: *mut AVPacket, size: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Increase packet size, correctly zeroing padding
 *
 * @param pkt packet
 * @param grow_by number of bytes by which to increase the size of the packet
 */
    pub fn av_grow_packet(pkt: *mut AVPacket, grow_by: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Initialize a reference-counted packet from av_malloc()ed data.
 *
 * @param pkt packet to be initialized. This function will set the data, size,
 *        buf and destruct fields, all others are left untouched.
 * @param data Data allocated by av_malloc() to be used as packet data. If this
 *        function returns successfully, the data is owned by the underlying AVBuffer.
 *        The caller may not access the data through other means.
 * @param size size of data in bytes, without the padding. I.e. the full buffer
 *        size is assumed to be size + AV_INPUT_BUFFER_PADDING_SIZE.
 *
 * @return 0 on success, a negative AVERROR on error
 */
    pub fn av_packet_from_data(pkt: *mut AVPacket, data: *mut u8,
                               size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @warning This is a hack - the packet memory allocation stuff is broken. The
 * packet is allocated if it was not really allocated.
 */
    pub fn av_dup_packet(pkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy packet, including contents
 *
 * @return 0 on success, negative AVERROR on fail
 */
    pub fn av_copy_packet(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy packet side data
 *
 * @return 0 on success, negative AVERROR on fail
 */
    pub fn av_copy_packet_side_data(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Free a packet.
 *
 * @param pkt packet to free
 */
    pub fn av_free_packet(pkt: *mut AVPacket);
}
extern "C" {
    /**
 * Allocate new information of a packet.
 *
 * @param pkt packet
 * @param type side information type
 * @param size side information size
 * @return pointer to fresh allocated data or NULL otherwise
 */
    pub fn av_packet_new_side_data(pkt: *mut AVPacket,
                                   type_: AVPacketSideDataType,
                                   size: ::std::os::raw::c_int) -> *mut u8;
}
extern "C" {
    /**
 * Shrink the already allocated side data buffer
 *
 * @param pkt packet
 * @param type side information type
 * @param size new side information size
 * @return 0 on success, < 0 on failure
 */
    pub fn av_packet_shrink_side_data(pkt: *mut AVPacket,
                                      type_: AVPacketSideDataType,
                                      size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get side information from packet.
 *
 * @param pkt packet
 * @param type desired side information type
 * @param size pointer for side information size to store (optional)
 * @return pointer to data if present or NULL otherwise
 */
    pub fn av_packet_get_side_data(pkt: *mut AVPacket,
                                   type_: AVPacketSideDataType,
                                   size: *mut ::std::os::raw::c_int)
     -> *mut u8;
}
extern "C" {
    pub fn av_packet_merge_side_data(pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_split_side_data(pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_side_data_name(type_: AVPacketSideDataType)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Pack a dictionary for use in side_data.
 *
 * @param dict The dictionary to pack.
 * @param size pointer to store the size of the returned data
 * @return pointer to data if successful, NULL otherwise
 */
    pub fn av_packet_pack_dictionary(dict: *mut AVDictionary,
                                     size: *mut ::std::os::raw::c_int)
     -> *mut u8;
}
extern "C" {
    /**
 * Unpack a dictionary from side_data.
 *
 * @param data data from side_data
 * @param size size of the data
 * @param dict the metadata storage dictionary
 * @return 0 on success, < 0 on failure
 */
    pub fn av_packet_unpack_dictionary(data: *const u8,
                                       size: ::std::os::raw::c_int,
                                       dict: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Convenience function to free all the side data stored.
 * All the other fields stay untouched.
 *
 * @param pkt packet
 */
    pub fn av_packet_free_side_data(pkt: *mut AVPacket);
}
extern "C" {
    /**
 * Setup a new reference to the data described by a given packet
 *
 * If src is reference-counted, setup dst as a new reference to the
 * buffer in src. Otherwise allocate a new buffer in dst and copy the
 * data from src into it.
 *
 * All the other fields are copied from src.
 *
 * @see av_packet_unref
 *
 * @param dst Destination packet
 * @param src Source packet
 *
 * @return 0 on success, a negative AVERROR on error.
 */
    pub fn av_packet_ref(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Wipe the packet.
 *
 * Unreference the buffer referenced by the packet and reset the
 * remaining packet fields to their default values.
 *
 * @param pkt The packet to be unreferenced.
 */
    pub fn av_packet_unref(pkt: *mut AVPacket);
}
extern "C" {
    /**
 * Move every field in src to dst and reset src.
 *
 * @see av_packet_unref
 *
 * @param src Source packet, will be reset
 * @param dst Destination packet
 */
    pub fn av_packet_move_ref(dst: *mut AVPacket, src: *mut AVPacket);
}
extern "C" {
    /**
 * Copy only "properties" fields from src to dst.
 *
 * Properties for the purpose of this function are all the fields
 * beside those related to the packet data (buf, data, size)
 *
 * @param dst Destination packet
 * @param src Source packet
 *
 * @return 0 on success AVERROR on failure.
 *
 */
    pub fn av_packet_copy_props(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Convert valid timing fields (timestamps / durations) in a packet from one
 * timebase to another. Timestamps with unknown values (AV_NOPTS_VALUE) will be
 * ignored.
 *
 * @param pkt packet on which the conversion will be performed
 * @param tb_src source timebase, in which the timing fields in pkt are
 *               expressed
 * @param tb_dst destination timebase, to which the timing fields will be
 *               converted
 */
    pub fn av_packet_rescale_ts(pkt: *mut AVPacket, tb_src: AVRational,
                                tb_dst: AVRational);
}
extern "C" {
    /**
 * Find a registered decoder with a matching codec ID.
 *
 * @param id AVCodecID of the requested decoder
 * @return A decoder if one was found, NULL otherwise.
 */
    pub fn avcodec_find_decoder(id: AVCodecID) -> *mut AVCodec;
}
extern "C" {
    /**
 * Find a registered decoder with the specified name.
 *
 * @param name name of the requested decoder
 * @return A decoder if one was found, NULL otherwise.
 */
    pub fn avcodec_find_decoder_by_name(name: *const ::std::os::raw::c_char)
     -> *mut AVCodec;
}
extern "C" {
    pub fn avcodec_default_get_buffer(s: *mut AVCodecContext,
                                      pic: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_default_release_buffer(s: *mut AVCodecContext,
                                          pic: *mut AVFrame);
}
extern "C" {
    pub fn avcodec_default_reget_buffer(s: *mut AVCodecContext,
                                        pic: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * The default callback for AVCodecContext.get_buffer2(). It is made public so
 * it can be called by custom get_buffer2() implementations for decoders without
 * AV_CODEC_CAP_DR1 set.
 */
    pub fn avcodec_default_get_buffer2(s: *mut AVCodecContext,
                                       frame: *mut AVFrame,
                                       flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return the amount of padding in pixels which the get_buffer callback must
 * provide around the edge of the image for codecs which do not have the
 * CODEC_FLAG_EMU_EDGE flag.
 *
 * @return Required padding in pixels.
 *
 * @deprecated CODEC_FLAG_EMU_EDGE is deprecated, so this function is no longer
 * needed
 */
    pub fn avcodec_get_edge_width() -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * Modify width and height values so that they will result in a memory
 * buffer that is acceptable for the codec if you do not use any horizontal
 * padding.
 *
 * May only be used if a codec with AV_CODEC_CAP_DR1 has been opened.
 */
    pub fn avcodec_align_dimensions(s: *mut AVCodecContext,
                                    width: *mut ::std::os::raw::c_int,
                                    height: *mut ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Modify width and height values so that they will result in a memory
 * buffer that is acceptable for the codec if you also ensure that all
 * line sizes are a multiple of the respective linesize_align[i].
 *
 * May only be used if a codec with AV_CODEC_CAP_DR1 has been opened.
 */
    pub fn avcodec_align_dimensions2(s: *mut AVCodecContext,
                                     width: *mut ::std::os::raw::c_int,
                                     height: *mut ::std::os::raw::c_int,
                                     linesize_align:
                                         *mut ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Converts AVChromaLocation to swscale x/y chroma position.
 *
 * The positions represent the chroma (0,0) position in a coordinates system
 * with luma (0,0) representing the origin and luma(1,1) representing 256,256
 *
 * @param xpos  horizontal chroma sample position
 * @param ypos  vertical   chroma sample position
 */
    pub fn avcodec_enum_to_chroma_pos(xpos: *mut ::std::os::raw::c_int,
                                      ypos: *mut ::std::os::raw::c_int,
                                      pos: AVChromaLocation)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Converts swscale x/y chroma position to AVChromaLocation.
 *
 * The positions represent the chroma (0,0) position in a coordinates system
 * with luma (0,0) representing the origin and luma(1,1) representing 256,256
 *
 * @param xpos  horizontal chroma sample position
 * @param ypos  vertical   chroma sample position
 */
    pub fn avcodec_chroma_pos_to_enum(xpos: ::std::os::raw::c_int,
                                      ypos: ::std::os::raw::c_int)
     -> AVChromaLocation;
}
extern "C" {
    /**
 * Wrapper function which calls avcodec_decode_audio4.
 *
 * @deprecated Use avcodec_decode_audio4 instead.
 *
 * Decode the audio frame of size avpkt->size from avpkt->data into samples.
 * Some decoders may support multiple frames in a single AVPacket, such
 * decoders would then just decode the first frame. In this case,
 * avcodec_decode_audio3 has to be called again with an AVPacket that contains
 * the remaining data in order to decode the second frame etc.
 * If no frame
 * could be outputted, frame_size_ptr is zero. Otherwise, it is the
 * decompressed frame size in bytes.
 *
 * @warning You must set frame_size_ptr to the allocated size of the
 * output buffer before calling avcodec_decode_audio3().
 *
 * @warning The input buffer must be FF_INPUT_BUFFER_PADDING_SIZE larger than
 * the actual read bytes because some optimized bitstream readers read 32 or 64
 * bits at once and could read over the end.
 *
 * @warning The end of the input buffer avpkt->data should be set to 0 to ensure that
 * no overreading happens for damaged MPEG streams.
 *
 * @warning You must not provide a custom get_buffer() when using
 * avcodec_decode_audio3().  Doing so will override it with
 * avcodec_default_get_buffer.  Use avcodec_decode_audio4() instead,
 * which does allow the application to provide a custom get_buffer().
 *
 * @note You might have to align the input buffer avpkt->data and output buffer
 * samples. The alignment requirements depend on the CPU: On some CPUs it isn't
 * necessary at all, on others it won't work at all if not aligned and on others
 * it will work but it will have an impact on performance.
 *
 * In practice, avpkt->data should have 4 byte alignment at minimum and
 * samples should be 16 byte aligned unless the CPU doesn't need it
 * (AltiVec and SSE do).
 *
 * @note Codecs which have the CODEC_CAP_DELAY capability set have a delay
 * between input and output, these need to be fed with avpkt->data=NULL,
 * avpkt->size=0 at the end to return the remaining frames.
 *
 * @param avctx the codec context
 * @param[out] samples the output buffer, sample type in avctx->sample_fmt
 *                     If the sample format is planar, each channel plane will
 *                     be the same size, with no padding between channels.
 * @param[in,out] frame_size_ptr the output buffer size in bytes
 * @param[in] avpkt The input AVPacket containing the input buffer.
 *            You can create such packet with av_init_packet() and by then setting
 *            data and size, some decoders might in addition need other fields.
 *            All decoders are designed to use the least fields possible though.
 * @return On error a negative value is returned, otherwise the number of bytes
 * used or zero if no frame data was decompressed (used) from the input AVPacket.
 */
    pub fn avcodec_decode_audio3(avctx: *mut AVCodecContext,
                                 samples: *mut i16,
                                 frame_size_ptr: *mut ::std::os::raw::c_int,
                                 avpkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Decode the audio frame of size avpkt->size from avpkt->data into frame.
 *
 * Some decoders may support multiple frames in a single AVPacket. Such
 * decoders would then just decode the first frame and the return value would be
 * less than the packet size. In this case, avcodec_decode_audio4 has to be
 * called again with an AVPacket containing the remaining data in order to
 * decode the second frame, etc...  Even if no frames are returned, the packet
 * needs to be fed to the decoder with remaining data until it is completely
 * consumed or an error occurs.
 *
 * Some decoders (those marked with AV_CODEC_CAP_DELAY) have a delay between input
 * and output. This means that for some packets they will not immediately
 * produce decoded output and need to be flushed at the end of decoding to get
 * all the decoded data. Flushing is done by calling this function with packets
 * with avpkt->data set to NULL and avpkt->size set to 0 until it stops
 * returning samples. It is safe to flush even those decoders that are not
 * marked with AV_CODEC_CAP_DELAY, then no samples will be returned.
 *
 * @warning The input buffer, avpkt->data must be AV_INPUT_BUFFER_PADDING_SIZE
 *          larger than the actual read bytes because some optimized bitstream
 *          readers read 32 or 64 bits at once and could read over the end.
 *
 * @note The AVCodecContext MUST have been opened with @ref avcodec_open2()
 * before packets may be fed to the decoder.
 *
 * @param      avctx the codec context
 * @param[out] frame The AVFrame in which to store decoded audio samples.
 *                   The decoder will allocate a buffer for the decoded frame by
 *                   calling the AVCodecContext.get_buffer2() callback.
 *                   When AVCodecContext.refcounted_frames is set to 1, the frame is
 *                   reference counted and the returned reference belongs to the
 *                   caller. The caller must release the frame using av_frame_unref()
 *                   when the frame is no longer needed. The caller may safely write
 *                   to the frame if av_frame_is_writable() returns 1.
 *                   When AVCodecContext.refcounted_frames is set to 0, the returned
 *                   reference belongs to the decoder and is valid only until the
 *                   next call to this function or until closing or flushing the
 *                   decoder. The caller may not write to it.
 * @param[out] got_frame_ptr Zero if no frame could be decoded, otherwise it is
 *                           non-zero. Note that this field being set to zero
 *                           does not mean that an error has occurred. For
 *                           decoders with AV_CODEC_CAP_DELAY set, no given decode
 *                           call is guaranteed to produce a frame.
 * @param[in]  avpkt The input AVPacket containing the input buffer.
 *                   At least avpkt->data and avpkt->size should be set. Some
 *                   decoders might also require additional fields to be set.
 * @return A negative error code is returned if an error occurred during
 *         decoding, otherwise the number of bytes consumed from the input
 *         AVPacket is returned.
 */
    pub fn avcodec_decode_audio4(avctx: *mut AVCodecContext,
                                 frame: *mut AVFrame,
                                 got_frame_ptr: *mut ::std::os::raw::c_int,
                                 avpkt: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Decode the video frame of size avpkt->size from avpkt->data into picture.
 * Some decoders may support multiple frames in a single AVPacket, such
 * decoders would then just decode the first frame.
 *
 * @warning The input buffer must be AV_INPUT_BUFFER_PADDING_SIZE larger than
 * the actual read bytes because some optimized bitstream readers read 32 or 64
 * bits at once and could read over the end.
 *
 * @warning The end of the input buffer buf should be set to 0 to ensure that
 * no overreading happens for damaged MPEG streams.
 *
 * @note Codecs which have the AV_CODEC_CAP_DELAY capability set have a delay
 * between input and output, these need to be fed with avpkt->data=NULL,
 * avpkt->size=0 at the end to return the remaining frames.
 *
 * @note The AVCodecContext MUST have been opened with @ref avcodec_open2()
 * before packets may be fed to the decoder.
 *
 * @param avctx the codec context
 * @param[out] picture The AVFrame in which the decoded video frame will be stored.
 *             Use av_frame_alloc() to get an AVFrame. The codec will
 *             allocate memory for the actual bitmap by calling the
 *             AVCodecContext.get_buffer2() callback.
 *             When AVCodecContext.refcounted_frames is set to 1, the frame is
 *             reference counted and the returned reference belongs to the
 *             caller. The caller must release the frame using av_frame_unref()
 *             when the frame is no longer needed. The caller may safely write
 *             to the frame if av_frame_is_writable() returns 1.
 *             When AVCodecContext.refcounted_frames is set to 0, the returned
 *             reference belongs to the decoder and is valid only until the
 *             next call to this function or until closing or flushing the
 *             decoder. The caller may not write to it.
 *
 * @param[in] avpkt The input AVPacket containing the input buffer.
 *            You can create such packet with av_init_packet() and by then setting
 *            data and size, some decoders might in addition need other fields like
 *            flags&AV_PKT_FLAG_KEY. All decoders are designed to use the least
 *            fields possible.
 * @param[in,out] got_picture_ptr Zero if no frame could be decompressed, otherwise, it is nonzero.
 * @return On error a negative value is returned, otherwise the number of bytes
 * used or zero if no frame could be decompressed.
 */
    pub fn avcodec_decode_video2(avctx: *mut AVCodecContext,
                                 picture: *mut AVFrame,
                                 got_picture_ptr: *mut ::std::os::raw::c_int,
                                 avpkt: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Decode a subtitle message.
 * Return a negative value on error, otherwise return the number of bytes used.
 * If no subtitle could be decompressed, got_sub_ptr is zero.
 * Otherwise, the subtitle is stored in *sub.
 * Note that AV_CODEC_CAP_DR1 is not available for subtitle codecs. This is for
 * simplicity, because the performance difference is expect to be negligible
 * and reusing a get_buffer written for video codecs would probably perform badly
 * due to a potentially very different allocation pattern.
 *
 * Some decoders (those marked with CODEC_CAP_DELAY) have a delay between input
 * and output. This means that for some packets they will not immediately
 * produce decoded output and need to be flushed at the end of decoding to get
 * all the decoded data. Flushing is done by calling this function with packets
 * with avpkt->data set to NULL and avpkt->size set to 0 until it stops
 * returning subtitles. It is safe to flush even those decoders that are not
 * marked with CODEC_CAP_DELAY, then no subtitles will be returned.
 *
 * @note The AVCodecContext MUST have been opened with @ref avcodec_open2()
 * before packets may be fed to the decoder.
 *
 * @param avctx the codec context
 * @param[out] sub The Preallocated AVSubtitle in which the decoded subtitle will be stored,
 *                 must be freed with avsubtitle_free if *got_sub_ptr is set.
 * @param[in,out] got_sub_ptr Zero if no subtitle could be decompressed, otherwise, it is nonzero.
 * @param[in] avpkt The input AVPacket containing the input buffer.
 */
    pub fn avcodec_decode_subtitle2(avctx: *mut AVCodecContext,
                                    sub: *mut AVSubtitle,
                                    got_sub_ptr: *mut ::std::os::raw::c_int,
                                    avpkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
/**
 * @defgroup lavc_parsing Frame parsing
 * @{
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPictureStructure {
    AV_PICTURE_STRUCTURE_UNKNOWN = 0,
    AV_PICTURE_STRUCTURE_TOP_FIELD = 1,
    AV_PICTURE_STRUCTURE_BOTTOM_FIELD = 2,
    AV_PICTURE_STRUCTURE_FRAME = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecParserContext {
    pub priv_data: *mut ::std::os::raw::c_void,
    pub parser: *mut AVCodecParserContext_AVCodecParser,
    pub frame_offset: i64,
    pub cur_offset: i64,
    pub next_frame_offset: i64,
    pub pict_type: ::std::os::raw::c_int,
    /**
     * This field is used for proper frame duration computation in lavf.
     * It signals, how much longer the frame duration of the current frame
     * is compared to normal frame duration.
     *
     * frame_duration = (1 + repeat_pict) * time_base
     *
     * It is used by codecs like H.264 to display telecined material.
     */
    pub repeat_pict: ::std::os::raw::c_int,
    pub pts: i64,
    pub dts: i64,
    pub last_pts: i64,
    pub last_dts: i64,
    pub fetch_timestamp: ::std::os::raw::c_int,
    pub cur_frame_start_index: ::std::os::raw::c_int,
    pub cur_frame_offset: [i64; 4usize],
    pub cur_frame_pts: [i64; 4usize],
    pub cur_frame_dts: [i64; 4usize],
    pub flags: ::std::os::raw::c_int,
    ///< byte offset from starting packet start
    pub offset: i64,
    pub cur_frame_end: [i64; 4usize],
    /**
     * Set by parser to 1 for key frames and 0 for non-key frames.
     * It is initialized to -1, so if the parser doesn't set this flag,
     * old-style fallback using AV_PICTURE_TYPE_I picture type as key frames
     * will be used.
     */
    pub key_frame: ::std::os::raw::c_int,
    /**
     * Time difference in stream time base units from the pts of this
     * packet to the point at which the output from the decoder has converged
     * independent from the availability of previous frames. That is, the
     * frames are virtually identical no matter if decoding started from
     * the very first frame or from this keyframe.
     * Is AV_NOPTS_VALUE if unknown.
     * This field is not the display duration of the current frame.
     * This field has no meaning if the packet does not have AV_PKT_FLAG_KEY
     * set.
     *
     * The purpose of this field is to allow seeking in streams that have no
     * keyframes in the conventional sense. It corresponds to the
     * recovery point SEI in H.264 and match_time_delta in NUT. It is also
     * essential for some types of subtitle streams to ensure that all
     * subtitles are correctly displayed after seeking.
     */
    pub convergence_duration: i64,
    /**
     * Synchronization point for start of timestamp generation.
     *
     * Set to >0 for sync point, 0 for no sync point and <0 for undefined
     * (default).
     *
     * For example, this corresponds to presence of H.264 buffering period
     * SEI message.
     */
    pub dts_sync_point: ::std::os::raw::c_int,
    /**
     * Offset of the current timestamp against last timestamp sync point in
     * units of AVCodecContext.time_base.
     *
     * Set to INT_MIN when dts_sync_point unused. Otherwise, it must
     * contain a valid timestamp offset.
     *
     * Note that the timestamp of sync point has usually a nonzero
     * dts_ref_dts_delta, which refers to the previous sync point. Offset of
     * the next frame after timestamp sync point will be usually 1.
     *
     * For example, this corresponds to H.264 cpb_removal_delay.
     */
    pub dts_ref_dts_delta: ::std::os::raw::c_int,
    /**
     * Presentation delay of current frame in units of AVCodecContext.time_base.
     *
     * Set to INT_MIN when dts_sync_point unused. Otherwise, it must
     * contain valid non-negative timestamp delta (presentation time of a frame
     * must not lie in the past).
     *
     * This delay represents the difference between decoding and presentation
     * time of the frame.
     *
     * For example, this corresponds to H.264 dpb_output_delay.
     */
    pub pts_dts_delta: ::std::os::raw::c_int,
    /**
     * Position of the packet in file.
     *
     * Analogous to cur_frame_pts/dts
     */
    pub cur_frame_pos: [i64; 4usize],
    /**
     * Byte position of currently parsed frame in stream.
     */
    pub pos: i64,
    /**
     * Previous frame byte position.
     */
    pub last_pos: i64,
    /**
     * Duration of the current frame.
     * For audio, this is in units of 1 / AVCodecContext.sample_rate.
     * For all other types, this is in units of AVCodecContext.time_base.
     */
    pub duration: ::std::os::raw::c_int,
    pub field_order: AVFieldOrder,
    /**
     * Indicate whether a picture is coded as a frame, top field or bottom field.
     *
     * For example, H.264 field_pic_flag equal to 0 corresponds to
     * AV_PICTURE_STRUCTURE_FRAME. An H.264 picture with field_pic_flag
     * equal to 1 and bottom_field_flag equal to 0 corresponds to
     * AV_PICTURE_STRUCTURE_TOP_FIELD.
     */
    pub picture_structure: AVPictureStructure,
    /**
     * Picture number incremented in presentation or output order.
     * This field may be reinitialized at the first picture of a new sequence.
     *
     * For example, this corresponds to H.264 PicOrderCnt.
     */
    pub output_picture_number: ::std::os::raw::c_int,
    /**
     * Dimensions of the decoded video intended for presentation.
     */
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    /**
     * Dimensions of the coded video.
     */
    pub coded_width: ::std::os::raw::c_int,
    pub coded_height: ::std::os::raw::c_int,
    /**
     * The format of the coded data, corresponds to enum AVPixelFormat for video
     * and for enum AVSampleFormat for audio.
     *
     * Note that a decoder can have considerable freedom in how exactly it
     * decodes the data, so the format reported here might be different from the
     * one returned by a decoder.
     */
    pub format: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecParserContext_AVCodecParser {
    pub codec_ids: [::std::os::raw::c_int; 5usize],
    pub priv_data_size: ::std::os::raw::c_int,
    pub parser_init: ::std::option::Option<unsafe extern "C" fn(s:
                                                                    *mut AVCodecParserContext)
                                               -> ::std::os::raw::c_int>,
    pub parser_parse: ::std::option::Option<unsafe extern "C" fn(s:
                                                                     *mut AVCodecParserContext,
                                                                 avctx:
                                                                     *mut AVCodecContext,
                                                                 poutbuf:
                                                                     *mut *const u8,
                                                                 poutbuf_size:
                                                                     *mut ::std::os::raw::c_int,
                                                                 buf:
                                                                     *const u8,
                                                                 buf_size:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    pub parser_close: ::std::option::Option<unsafe extern "C" fn(s:
                                                                     *mut AVCodecParserContext)>,
    pub split: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                              *mut AVCodecContext,
                                                          buf: *const u8,
                                                          buf_size:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub next: *mut AVCodecParserContext_AVCodecParser,
}
#[test]
fn bindgen_test_layout_AVCodecParserContext_AVCodecParser() {
    assert_eq!(::std::mem::size_of::<AVCodecParserContext_AVCodecParser>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<AVCodecParserContext_AVCodecParser>() ,
               8usize);
}
impl Clone for AVCodecParserContext_AVCodecParser {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_AVCodecParserContext() {
    assert_eq!(::std::mem::size_of::<AVCodecParserContext>() , 352usize);
    assert_eq!(::std::mem::align_of::<AVCodecParserContext>() , 8usize);
}
impl Clone for AVCodecParserContext {
    fn clone(&self) -> Self { *self }
}
pub type AVCodecParser = AVCodecParserContext_AVCodecParser;
extern "C" {
    pub fn av_parser_next(c: *const AVCodecParser) -> *mut AVCodecParser;
}
extern "C" {
    pub fn av_register_codec_parser(parser: *mut AVCodecParser);
}
extern "C" {
    pub fn av_parser_init(codec_id: ::std::os::raw::c_int)
     -> *mut AVCodecParserContext;
}
extern "C" {
    /**
 * Parse a packet.
 *
 * @param s             parser context.
 * @param avctx         codec context.
 * @param poutbuf       set to pointer to parsed buffer or NULL if not yet finished.
 * @param poutbuf_size  set to size of parsed buffer or zero if not yet finished.
 * @param buf           input buffer.
 * @param buf_size      input length, to signal EOF, this should be 0 (so that the last frame can be output).
 * @param pts           input presentation timestamp.
 * @param dts           input decoding timestamp.
 * @param pos           input byte position in stream.
 * @return the number of bytes of the input bitstream used.
 *
 * Example:
 * @code
 *   while(in_len){
 *       len = av_parser_parse2(myparser, AVCodecContext, &data, &size,
 *                                        in_data, in_len,
 *                                        pts, dts, pos);
 *       in_data += len;
 *       in_len  -= len;
 *
 *       if(size)
 *          decode_frame(data, size);
 *   }
 * @endcode
 */
    pub fn av_parser_parse2(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext, poutbuf: *mut *mut u8,
                            poutbuf_size: *mut ::std::os::raw::c_int,
                            buf: *const u8, buf_size: ::std::os::raw::c_int,
                            pts: i64, dts: i64, pos: i64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @return 0 if the output buffer is a subset of the input, 1 if it is allocated and must be freed
 * @deprecated use AVBitStreamFilter
 */
    pub fn av_parser_change(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext, poutbuf: *mut *mut u8,
                            poutbuf_size: *mut ::std::os::raw::c_int,
                            buf: *const u8, buf_size: ::std::os::raw::c_int,
                            keyframe: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_parser_close(s: *mut AVCodecParserContext);
}
extern "C" {
    /**
 * Find a registered encoder with a matching codec ID.
 *
 * @param id AVCodecID of the requested encoder
 * @return An encoder if one was found, NULL otherwise.
 */
    pub fn avcodec_find_encoder(id: AVCodecID) -> *mut AVCodec;
}
extern "C" {
    /**
 * Find a registered encoder with the specified name.
 *
 * @param name name of the requested encoder
 * @return An encoder if one was found, NULL otherwise.
 */
    pub fn avcodec_find_encoder_by_name(name: *const ::std::os::raw::c_char)
     -> *mut AVCodec;
}
extern "C" {
    /**
 * Encode an audio frame from samples into buf.
 *
 * @deprecated Use avcodec_encode_audio2 instead.
 *
 * @note The output buffer should be at least FF_MIN_BUFFER_SIZE bytes large.
 * However, for codecs with avctx->frame_size equal to 0 (e.g. PCM) the user
 * will know how much space is needed because it depends on the value passed
 * in buf_size as described below. In that case a lower value can be used.
 *
 * @param avctx the codec context
 * @param[out] buf the output buffer
 * @param[in] buf_size the output buffer size
 * @param[in] samples the input buffer containing the samples
 * The number of samples read from this buffer is frame_size*channels,
 * both of which are defined in avctx.
 * For codecs which have avctx->frame_size equal to 0 (e.g. PCM) the number of
 * samples read from samples is equal to:
 * buf_size * 8 / (avctx->channels * av_get_bits_per_sample(avctx->codec_id))
 * This also implies that av_get_bits_per_sample() must not return 0 for these
 * codecs.
 * @return On error a negative value is returned, on success zero or the number
 * of bytes used to encode the data read from the input buffer.
 */
    pub fn avcodec_encode_audio(avctx: *mut AVCodecContext, buf: *mut u8,
                                buf_size: ::std::os::raw::c_int,
                                samples: *const ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Encode a frame of audio.
 *
 * Takes input samples from frame and writes the next output packet, if
 * available, to avpkt. The output packet does not necessarily contain data for
 * the most recent frame, as encoders can delay, split, and combine input frames
 * internally as needed.
 *
 * @param avctx     codec context
 * @param avpkt     output AVPacket.
 *                  The user can supply an output buffer by setting
 *                  avpkt->data and avpkt->size prior to calling the
 *                  function, but if the size of the user-provided data is not
 *                  large enough, encoding will fail. If avpkt->data and
 *                  avpkt->size are set, avpkt->destruct must also be set. All
 *                  other AVPacket fields will be reset by the encoder using
 *                  av_init_packet(). If avpkt->data is NULL, the encoder will
 *                  allocate it. The encoder will set avpkt->size to the size
 *                  of the output packet.
 *
 *                  If this function fails or produces no output, avpkt will be
 *                  freed using av_free_packet() (i.e. avpkt->destruct will be
 *                  called to free the user supplied buffer).
 * @param[in] frame AVFrame containing the raw audio data to be encoded.
 *                  May be NULL when flushing an encoder that has the
 *                  AV_CODEC_CAP_DELAY capability set.
 *                  If AV_CODEC_CAP_VARIABLE_FRAME_SIZE is set, then each frame
 *                  can have any number of samples.
 *                  If it is not set, frame->nb_samples must be equal to
 *                  avctx->frame_size for all frames except the last.
 *                  The final frame may be smaller than avctx->frame_size.
 * @param[out] got_packet_ptr This field is set to 1 by libavcodec if the
 *                            output packet is non-empty, and to 0 if it is
 *                            empty. If the function returns an error, the
 *                            packet can be assumed to be invalid, and the
 *                            value of got_packet_ptr is undefined and should
 *                            not be used.
 * @return          0 on success, negative error code on failure
 */
    pub fn avcodec_encode_audio2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *const AVFrame,
                                 got_packet_ptr: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @deprecated use avcodec_encode_video2() instead.
 *
 * Encode a video frame from pict into buf.
 * The input picture should be
 * stored using a specific format, namely avctx.pix_fmt.
 *
 * @param avctx the codec context
 * @param[out] buf the output buffer for the bitstream of encoded frame
 * @param[in] buf_size the size of the output buffer in bytes
 * @param[in] pict the input picture to encode
 * @return On error a negative value is returned, on success zero or the number
 * of bytes used from the output buffer.
 */
    pub fn avcodec_encode_video(avctx: *mut AVCodecContext, buf: *mut u8,
                                buf_size: ::std::os::raw::c_int,
                                pict: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Encode a frame of video.
 *
 * Takes input raw video data from frame and writes the next output packet, if
 * available, to avpkt. The output packet does not necessarily contain data for
 * the most recent frame, as encoders can delay and reorder input frames
 * internally as needed.
 *
 * @param avctx     codec context
 * @param avpkt     output AVPacket.
 *                  The user can supply an output buffer by setting
 *                  avpkt->data and avpkt->size prior to calling the
 *                  function, but if the size of the user-provided data is not
 *                  large enough, encoding will fail. All other AVPacket fields
 *                  will be reset by the encoder using av_init_packet(). If
 *                  avpkt->data is NULL, the encoder will allocate it.
 *                  The encoder will set avpkt->size to the size of the
 *                  output packet. The returned data (if any) belongs to the
 *                  caller, he is responsible for freeing it.
 *
 *                  If this function fails or produces no output, avpkt will be
 *                  freed using av_free_packet() (i.e. avpkt->destruct will be
 *                  called to free the user supplied buffer).
 * @param[in] frame AVFrame containing the raw video data to be encoded.
 *                  May be NULL when flushing an encoder that has the
 *                  AV_CODEC_CAP_DELAY capability set.
 * @param[out] got_packet_ptr This field is set to 1 by libavcodec if the
 *                            output packet is non-empty, and to 0 if it is
 *                            empty. If the function returns an error, the
 *                            packet can be assumed to be invalid, and the
 *                            value of got_packet_ptr is undefined and should
 *                            not be used.
 * @return          0 on success, negative error code on failure
 */
    pub fn avcodec_encode_video2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *const AVFrame,
                                 got_packet_ptr: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_encode_subtitle(avctx: *mut AVCodecContext, buf: *mut u8,
                                   buf_size: ::std::os::raw::c_int,
                                   sub: *const AVSubtitle)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReSampleContext([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVResampleContext([u8; 0]);
extern "C" {
    /**
 *  Initialize audio resampling context.
 *
 * @param output_channels  number of output channels
 * @param input_channels   number of input channels
 * @param output_rate      output sample rate
 * @param input_rate       input sample rate
 * @param sample_fmt_out   requested output sample format
 * @param sample_fmt_in    input sample format
 * @param filter_length    length of each FIR filter in the filterbank relative to the cutoff frequency
 * @param log2_phase_count log2 of the number of entries in the polyphase filterbank
 * @param linear           if 1 then the used FIR filter will be linearly interpolated
                           between the 2 closest, if 0 the closest will be used
 * @param cutoff           cutoff frequency, 1.0 corresponds to half the output sampling rate
 * @return allocated ReSampleContext, NULL if error occurred
 */
    pub fn av_audio_resample_init(output_channels: ::std::os::raw::c_int,
                                  input_channels: ::std::os::raw::c_int,
                                  output_rate: ::std::os::raw::c_int,
                                  input_rate: ::std::os::raw::c_int,
                                  sample_fmt_out: AVSampleFormat,
                                  sample_fmt_in: AVSampleFormat,
                                  filter_length: ::std::os::raw::c_int,
                                  log2_phase_count: ::std::os::raw::c_int,
                                  linear: ::std::os::raw::c_int, cutoff: f64)
     -> *mut ReSampleContext;
}
extern "C" {
    pub fn audio_resample(s: *mut ReSampleContext,
                          output: *mut ::std::os::raw::c_short,
                          input: *mut ::std::os::raw::c_short,
                          nb_samples: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Free resample context.
 *
 * @param s a non-NULL pointer to a resample context previously
 *          created with av_audio_resample_init()
 */
    pub fn audio_resample_close(s: *mut ReSampleContext);
}
extern "C" {
    /**
 * Initialize an audio resampler.
 * Note, if either rate is not an integer then simply scale both rates up so they are.
 * @param filter_length length of each FIR filter in the filterbank relative to the cutoff freq
 * @param log2_phase_count log2 of the number of entries in the polyphase filterbank
 * @param linear If 1 then the used FIR filter will be linearly interpolated
                 between the 2 closest, if 0 the closest will be used
 * @param cutoff cutoff frequency, 1.0 corresponds to half the output sampling rate
 */
    pub fn av_resample_init(out_rate: ::std::os::raw::c_int,
                            in_rate: ::std::os::raw::c_int,
                            filter_length: ::std::os::raw::c_int,
                            log2_phase_count: ::std::os::raw::c_int,
                            linear: ::std::os::raw::c_int, cutoff: f64)
     -> *mut AVResampleContext;
}
extern "C" {
    /**
 * Resample an array of samples using a previously configured context.
 * @param src an array of unconsumed samples
 * @param consumed the number of samples of src which have been consumed are returned here
 * @param src_size the number of unconsumed samples available
 * @param dst_size the amount of space in samples available in dst
 * @param update_ctx If this is 0 then the context will not be modified, that way several channels can be resampled with the same context.
 * @return the number of samples written in dst or -1 if an error occurred
 */
    pub fn av_resample(c: *mut AVResampleContext,
                       dst: *mut ::std::os::raw::c_short,
                       src: *mut ::std::os::raw::c_short,
                       consumed: *mut ::std::os::raw::c_int,
                       src_size: ::std::os::raw::c_int,
                       dst_size: ::std::os::raw::c_int,
                       update_ctx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Compensate samplerate/timestamp drift. The compensation is done by changing
 * the resampler parameters, so no audible clicks or similar distortions occur
 * @param compensation_distance distance in output samples over which the compensation should be performed
 * @param sample_delta number of output samples which should be output less
 *
 * example: av_resample_compensate(c, 10, 500)
 * here instead of 510 samples only 500 samples would be output
 *
 * note, due to rounding the actual compensation might be slightly different,
 * especially if the compensation_distance is large and the in_rate used during init is small
 */
    pub fn av_resample_compensate(c: *mut AVResampleContext,
                                  sample_delta: ::std::os::raw::c_int,
                                  compensation_distance:
                                      ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_resample_close(c: *mut AVResampleContext);
}
extern "C" {
    /**
 * Allocate memory for the pixels of a picture and setup the AVPicture
 * fields for it.
 *
 * Call avpicture_free() to free it.
 *
 * @param picture            the picture structure to be filled in
 * @param pix_fmt            the pixel format of the picture
 * @param width              the width of the picture
 * @param height             the height of the picture
 * @return zero if successful, a negative error code otherwise
 *
 * @see av_image_alloc(), avpicture_fill()
 */
    pub fn avpicture_alloc(picture: *mut AVPicture, pix_fmt: AVPixelFormat,
                           width: ::std::os::raw::c_int,
                           height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Free a picture previously allocated by avpicture_alloc().
 * The data buffer used by the AVPicture is freed, but the AVPicture structure
 * itself is not.
 *
 * @param picture the AVPicture to be freed
 */
    pub fn avpicture_free(picture: *mut AVPicture);
}
extern "C" {
    /**
 * Setup the picture fields based on the specified image parameters
 * and the provided image data buffer.
 *
 * The picture fields are filled in by using the image data buffer
 * pointed to by ptr.
 *
 * If ptr is NULL, the function will fill only the picture linesize
 * array and return the required size for the image buffer.
 *
 * To allocate an image buffer and fill the picture data in one call,
 * use avpicture_alloc().
 *
 * @param picture       the picture to be filled in
 * @param ptr           buffer where the image data is stored, or NULL
 * @param pix_fmt       the pixel format of the image
 * @param width         the width of the image in pixels
 * @param height        the height of the image in pixels
 * @return the size in bytes required for src, a negative error code
 * in case of failure
 *
 * @see av_image_fill_arrays()
 */
    pub fn avpicture_fill(picture: *mut AVPicture, ptr: *const u8,
                          pix_fmt: AVPixelFormat,
                          width: ::std::os::raw::c_int,
                          height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy pixel data from an AVPicture into a buffer.
 *
 * avpicture_get_size() can be used to compute the required size for
 * the buffer to fill.
 *
 * @param src        source picture with filled data
 * @param pix_fmt    picture pixel format
 * @param width      picture width
 * @param height     picture height
 * @param dest       destination buffer
 * @param dest_size  destination buffer size in bytes
 * @return the number of bytes written to dest, or a negative value
 * (error code) on error, for example if the destination buffer is not
 * big enough
 *
 * @see av_image_copy_to_buffer()
 */
    pub fn avpicture_layout(src: *const AVPicture, pix_fmt: AVPixelFormat,
                            width: ::std::os::raw::c_int,
                            height: ::std::os::raw::c_int,
                            dest: *mut ::std::os::raw::c_uchar,
                            dest_size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Calculate the size in bytes that a picture of the given width and height
 * would occupy if stored in the given picture format.
 *
 * @param pix_fmt    picture pixel format
 * @param width      picture width
 * @param height     picture height
 * @return the computed picture buffer size or a negative error code
 * in case of error
 *
 * @see av_image_get_buffer_size().
 */
    pub fn avpicture_get_size(pix_fmt: AVPixelFormat,
                              width: ::std::os::raw::c_int,
                              height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 *  deinterlace - if not supported return -1
 *
 * @deprecated - use yadif (in libavfilter) instead
 */
    pub fn avpicture_deinterlace(dst: *mut AVPicture, src: *const AVPicture,
                                 pix_fmt: AVPixelFormat,
                                 width: ::std::os::raw::c_int,
                                 height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Copy image src to dst. Wraps av_image_copy().
 */
    pub fn av_picture_copy(dst: *mut AVPicture, src: *const AVPicture,
                           pix_fmt: AVPixelFormat,
                           width: ::std::os::raw::c_int,
                           height: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Crop image top and left side.
 */
    pub fn av_picture_crop(dst: *mut AVPicture, src: *const AVPicture,
                           pix_fmt: AVPixelFormat,
                           top_band: ::std::os::raw::c_int,
                           left_band: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Pad image.
 */
    pub fn av_picture_pad(dst: *mut AVPicture, src: *const AVPicture,
                          height: ::std::os::raw::c_int,
                          width: ::std::os::raw::c_int,
                          pix_fmt: AVPixelFormat,
                          padtop: ::std::os::raw::c_int,
                          padbottom: ::std::os::raw::c_int,
                          padleft: ::std::os::raw::c_int,
                          padright: ::std::os::raw::c_int,
                          color: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Utility function to access log2_chroma_w log2_chroma_h from
 * the pixel format AVPixFmtDescriptor.
 *
 * This function asserts that pix_fmt is valid. See av_pix_fmt_get_chroma_sub_sample
 * for one that returns a failure code and continues in case of invalid
 * pix_fmts.
 *
 * @param[in]  pix_fmt the pixel format
 * @param[out] h_shift store log2_chroma_w
 * @param[out] v_shift store log2_chroma_h
 *
 * @see av_pix_fmt_get_chroma_sub_sample
 */
    pub fn avcodec_get_chroma_sub_sample(pix_fmt: AVPixelFormat,
                                         h_shift: *mut ::std::os::raw::c_int,
                                         v_shift: *mut ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Return a value representing the fourCC code associated to the
 * pixel format pix_fmt, or 0 if no associated fourCC code can be
 * found.
 */
    pub fn avcodec_pix_fmt_to_codec_tag(pix_fmt: AVPixelFormat)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * @deprecated see av_get_pix_fmt_loss()
 */
    pub fn avcodec_get_pix_fmt_loss(dst_pix_fmt: AVPixelFormat,
                                    src_pix_fmt: AVPixelFormat,
                                    has_alpha: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Find the best pixel format to convert to given a certain source pixel
 * format.  When converting from one pixel format to another, information loss
 * may occur.  For example, when converting from RGB24 to GRAY, the color
 * information will be lost. Similarly, other losses occur when converting from
 * some formats to other formats. avcodec_find_best_pix_fmt_of_2() searches which of
 * the given pixel formats should be used to suffer the least amount of loss.
 * The pixel formats from which it chooses one, are determined by the
 * pix_fmt_list parameter.
 *
 *
 * @param[in] pix_fmt_list AV_PIX_FMT_NONE terminated array of pixel formats to choose from
 * @param[in] src_pix_fmt source pixel format
 * @param[in] has_alpha Whether the source pixel format alpha channel is used.
 * @param[out] loss_ptr Combination of flags informing you what kind of losses will occur.
 * @return The best pixel format to convert to or -1 if none was found.
 */
    pub fn avcodec_find_best_pix_fmt_of_list(pix_fmt_list:
                                                 *const AVPixelFormat,
                                             src_pix_fmt: AVPixelFormat,
                                             has_alpha: ::std::os::raw::c_int,
                                             loss_ptr:
                                                 *mut ::std::os::raw::c_int)
     -> AVPixelFormat;
}
extern "C" {
    /**
 * @deprecated see av_find_best_pix_fmt_of_2()
 */
    pub fn avcodec_find_best_pix_fmt_of_2(dst_pix_fmt1: AVPixelFormat,
                                          dst_pix_fmt2: AVPixelFormat,
                                          src_pix_fmt: AVPixelFormat,
                                          has_alpha: ::std::os::raw::c_int,
                                          loss_ptr:
                                              *mut ::std::os::raw::c_int)
     -> AVPixelFormat;
}
extern "C" {
    pub fn avcodec_find_best_pix_fmt2(dst_pix_fmt1: AVPixelFormat,
                                      dst_pix_fmt2: AVPixelFormat,
                                      src_pix_fmt: AVPixelFormat,
                                      has_alpha: ::std::os::raw::c_int,
                                      loss_ptr: *mut ::std::os::raw::c_int)
     -> AVPixelFormat;
}
extern "C" {
    pub fn avcodec_default_get_format(s: *mut AVFrame_AVCodecContext,
                                      fmt: *const AVPixelFormat)
     -> AVPixelFormat;
}
extern "C" {
    /**
 * @deprecated this function is not supposed to be used from outside of lavc
 */
    pub fn avcodec_set_dimensions(s: *mut AVCodecContext,
                                  width: ::std::os::raw::c_int,
                                  height: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Put a string representing the codec tag codec_tag in buf.
 *
 * @param buf       buffer to place codec tag in
 * @param buf_size size in bytes of buf
 * @param codec_tag codec tag to assign
 * @return the length of the string that would have been generated if
 * enough space had been available, excluding the trailing null
 */
    pub fn av_get_codec_tag_string(buf: *mut ::std::os::raw::c_char,
                                   buf_size: usize,
                                   codec_tag: ::std::os::raw::c_uint)
     -> usize;
}
extern "C" {
    pub fn avcodec_string(buf: *mut ::std::os::raw::c_char,
                          buf_size: ::std::os::raw::c_int,
                          enc: *mut AVCodecContext,
                          encode: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Return a name for the specified profile, if available.
 *
 * @param codec the codec that is searched for the given profile
 * @param profile the profile value for which a name is requested
 * @return A name for the profile if found, NULL otherwise.
 */
    pub fn av_get_profile_name(codec: *const AVCodec,
                               profile: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avcodec_default_execute(c: *mut AVCodecContext,
                                   func:
                                       ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                      *mut AVCodecContext,
                                                                                  arg2:
                                                                                      *mut ::std::os::raw::c_void)
                                                                 ->
                                                                     ::std::os::raw::c_int>,
                                   arg: *mut ::std::os::raw::c_void,
                                   ret: *mut ::std::os::raw::c_int,
                                   count: ::std::os::raw::c_int,
                                   size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_default_execute2(c: *mut AVCodecContext,
                                    func:
                                        ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                       *mut AVCodecContext,
                                                                                   arg2:
                                                                                       *mut ::std::os::raw::c_void,
                                                                                   arg1:
                                                                                       ::std::os::raw::c_int,
                                                                                   arg2:
                                                                                       ::std::os::raw::c_int)
                                                                  ->
                                                                      ::std::os::raw::c_int>,
                                    arg: *mut ::std::os::raw::c_void,
                                    ret: *mut ::std::os::raw::c_int,
                                    count: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Fill AVFrame audio data and linesize pointers.
 *
 * The buffer buf must be a preallocated buffer with a size big enough
 * to contain the specified samples amount. The filled AVFrame data
 * pointers will point to this buffer.
 *
 * AVFrame extended_data channel pointers are allocated if necessary for
 * planar audio.
 *
 * @param frame       the AVFrame
 *                    frame->nb_samples must be set prior to calling the
 *                    function. This function fills in frame->data,
 *                    frame->extended_data, frame->linesize[0].
 * @param nb_channels channel count
 * @param sample_fmt  sample format
 * @param buf         buffer to use for frame data
 * @param buf_size    size of buffer
 * @param align       plane size sample alignment (0 = default)
 * @return            >=0 on success, negative error code on failure
 * @todo return the size in bytes required to store the samples in
 * case of success, at the next libavutil bump
 */
    pub fn avcodec_fill_audio_frame(frame: *mut AVFrame,
                                    nb_channels: ::std::os::raw::c_int,
                                    sample_fmt: AVSampleFormat,
                                    buf: *const u8,
                                    buf_size: ::std::os::raw::c_int,
                                    align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Reset the internal decoder state / flush internal buffers. Should be called
 * e.g. when seeking or when switching to a different stream.
 *
 * @note when refcounted frames are not used (i.e. avctx->refcounted_frames is 0),
 * this invalidates the frames previously returned from the decoder. When
 * refcounted frames are used, the decoder just releases any references it might
 * keep internally, but the caller's reference remains valid.
 */
    pub fn avcodec_flush_buffers(avctx: *mut AVCodecContext);
}
extern "C" {
    /**
 * Return codec bits per sample.
 *
 * @param[in] codec_id the codec
 * @return Number of bits per sample or zero if unknown for the given codec.
 */
    pub fn av_get_bits_per_sample(codec_id: AVCodecID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return the PCM codec associated with a sample format.
 * @param be  endianness, 0 for little, 1 for big,
 *            -1 (or anything else) for native
 * @return  AV_CODEC_ID_PCM_* or AV_CODEC_ID_NONE
 */
    pub fn av_get_pcm_codec(fmt: AVSampleFormat, be: ::std::os::raw::c_int)
     -> AVCodecID;
}
extern "C" {
    /**
 * Return codec bits per sample.
 * Only return non-zero if the bits per sample is exactly correct, not an
 * approximation.
 *
 * @param[in] codec_id the codec
 * @return Number of bits per sample or zero if unknown for the given codec.
 */
    pub fn av_get_exact_bits_per_sample(codec_id: AVCodecID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return audio frame duration.
 *
 * @param avctx        codec context
 * @param frame_bytes  size of the frame, or 0 if unknown
 * @return             frame duration, in samples, if known. 0 if not able to
 *                     determine.
 */
    pub fn av_get_audio_frame_duration(avctx: *mut AVCodecContext,
                                       frame_bytes: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVBitStreamFilterContext {
    pub priv_data: *mut ::std::os::raw::c_void,
    pub filter: *mut AVBitStreamFilterContext_AVBitStreamFilter,
    pub parser: *mut AVCodecParserContext,
    pub next: *mut AVBitStreamFilterContext,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVBitStreamFilterContext_AVBitStreamFilter {
    pub name: *const ::std::os::raw::c_char,
    pub priv_data_size: ::std::os::raw::c_int,
    pub filter: ::std::option::Option<unsafe extern "C" fn(bsfc:
                                                               *mut AVBitStreamFilterContext,
                                                           avctx:
                                                               *mut AVCodecContext,
                                                           args:
                                                               *const ::std::os::raw::c_char,
                                                           poutbuf:
                                                               *mut *mut u8,
                                                           poutbuf_size:
                                                               *mut ::std::os::raw::c_int,
                                                           buf: *const u8,
                                                           buf_size:
                                                               ::std::os::raw::c_int,
                                                           keyframe:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub close: ::std::option::Option<unsafe extern "C" fn(bsfc:
                                                              *mut AVBitStreamFilterContext)>,
    pub next: *mut AVBitStreamFilterContext_AVBitStreamFilter,
}
#[test]
fn bindgen_test_layout_AVBitStreamFilterContext_AVBitStreamFilter() {
    assert_eq!(::std::mem::size_of::<AVBitStreamFilterContext_AVBitStreamFilter>()
               , 40usize);
    assert_eq!(::std::mem::align_of::<AVBitStreamFilterContext_AVBitStreamFilter>()
               , 8usize);
}
impl Clone for AVBitStreamFilterContext_AVBitStreamFilter {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_AVBitStreamFilterContext() {
    assert_eq!(::std::mem::size_of::<AVBitStreamFilterContext>() , 32usize);
    assert_eq!(::std::mem::align_of::<AVBitStreamFilterContext>() , 8usize);
}
impl Clone for AVBitStreamFilterContext {
    fn clone(&self) -> Self { *self }
}
pub type AVBitStreamFilter = AVBitStreamFilterContext_AVBitStreamFilter;
extern "C" {
    /**
 * Register a bitstream filter.
 *
 * The filter will be accessible to the application code through
 * av_bitstream_filter_next() or can be directly initialized with
 * av_bitstream_filter_init().
 *
 * @see avcodec_register_all()
 */
    pub fn av_register_bitstream_filter(bsf: *mut AVBitStreamFilter);
}
extern "C" {
    /**
 * Create and initialize a bitstream filter context given a bitstream
 * filter name.
 *
 * The returned context must be freed with av_bitstream_filter_close().
 *
 * @param name    the name of the bitstream filter
 * @return a bitstream filter context if a matching filter was found
 * and successfully initialized, NULL otherwise
 */
    pub fn av_bitstream_filter_init(name: *const ::std::os::raw::c_char)
     -> *mut AVBitStreamFilterContext;
}
extern "C" {
    /**
 * Filter bitstream.
 *
 * This function filters the buffer buf with size buf_size, and places the
 * filtered buffer in the buffer pointed to by poutbuf.
 *
 * The output buffer must be freed by the caller.
 *
 * @param bsfc            bitstream filter context created by av_bitstream_filter_init()
 * @param avctx           AVCodecContext accessed by the filter, may be NULL.
 *                        If specified, this must point to the encoder context of the
 *                        output stream the packet is sent to.
 * @param args            arguments which specify the filter configuration, may be NULL
 * @param poutbuf         pointer which is updated to point to the filtered buffer
 * @param poutbuf_size    pointer which is updated to the filtered buffer size in bytes
 * @param buf             buffer containing the data to filter
 * @param buf_size        size in bytes of buf
 * @param keyframe        set to non-zero if the buffer to filter corresponds to a key-frame packet data
 * @return >= 0 in case of success, or a negative error code in case of failure
 *
 * If the return value is positive, an output buffer is allocated and
 * is available in *poutbuf, and is distinct from the input buffer.
 *
 * If the return value is 0, the output buffer is not allocated and
 * should be considered identical to the input buffer, or in case
 * *poutbuf was set it points to the input buffer (not necessarily to
 * its starting address).
 */
    pub fn av_bitstream_filter_filter(bsfc: *mut AVBitStreamFilterContext,
                                      avctx: *mut AVCodecContext,
                                      args: *const ::std::os::raw::c_char,
                                      poutbuf: *mut *mut u8,
                                      poutbuf_size:
                                          *mut ::std::os::raw::c_int,
                                      buf: *const u8,
                                      buf_size: ::std::os::raw::c_int,
                                      keyframe: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Release bitstream filter context.
 *
 * @param bsf the bitstream filter context created with
 * av_bitstream_filter_init(), can be NULL
 */
    pub fn av_bitstream_filter_close(bsf: *mut AVBitStreamFilterContext);
}
extern "C" {
    /**
 * If f is NULL, return the first registered bitstream filter,
 * if f is non-NULL, return the next registered bitstream filter
 * after f, or NULL if f is the last one.
 *
 * This function can be used to iterate over all registered bitstream
 * filters.
 */
    pub fn av_bitstream_filter_next(f: *const AVBitStreamFilter)
     -> *mut AVBitStreamFilter;
}
extern "C" {
    /**
 * Same behaviour av_fast_malloc but the buffer has additional
 * AV_INPUT_BUFFER_PADDING_SIZE at the end which will always be 0.
 *
 * In addition the whole buffer will initially and after resizes
 * be 0-initialized so that no uninitialized data will ever appear.
 */
    pub fn av_fast_padded_malloc(ptr: *mut ::std::os::raw::c_void,
                                 size: *mut ::std::os::raw::c_uint,
                                 min_size: usize);
}
extern "C" {
    /**
 * Same behaviour av_fast_padded_malloc except that buffer will always
 * be 0-initialized after call.
 */
    pub fn av_fast_padded_mallocz(ptr: *mut ::std::os::raw::c_void,
                                  size: *mut ::std::os::raw::c_uint,
                                  min_size: usize);
}
extern "C" {
    /**
 * Encode extradata length to a buffer. Used by xiph codecs.
 *
 * @param s buffer to write to; must be at least (v/255+1) bytes long
 * @param v size of extradata in bytes
 * @return number of bytes written to the buffer.
 */
    pub fn av_xiphlacing(s: *mut ::std::os::raw::c_uchar,
                         v: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * Log a generic warning message about a missing feature. This function is
 * intended to be used internally by FFmpeg (libavcodec, libavformat, etc.)
 * only, and would normally not be used by applications.
 * @param[in] avc a pointer to an arbitrary struct of which the first field is
 * a pointer to an AVClass struct
 * @param[in] feature string containing the name of the missing feature
 * @param[in] want_sample indicates if samples are wanted which exhibit this feature.
 * If want_sample is non-zero, additional verbage will be added to the log
 * message which tells the user how to report samples to the development
 * mailing list.
 * @deprecated Use avpriv_report_missing_feature() instead.
 */
    pub fn av_log_missing_feature(avc: *mut ::std::os::raw::c_void,
                                  feature: *const ::std::os::raw::c_char,
                                  want_sample: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Log a generic warning message asking for a sample. This function is
 * intended to be used internally by FFmpeg (libavcodec, libavformat, etc.)
 * only, and would normally not be used by applications.
 * @param[in] avc a pointer to an arbitrary struct of which the first field is
 * a pointer to an AVClass struct
 * @param[in] msg string containing an optional message, or NULL if no message
 * @deprecated Use avpriv_request_sample() instead.
 */
    pub fn av_log_ask_for_sample(avc: *mut ::std::os::raw::c_void,
                                 msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    /**
 * Register the hardware accelerator hwaccel.
 */
    pub fn av_register_hwaccel(hwaccel: *mut AVHWAccel);
}
extern "C" {
    /**
 * If hwaccel is NULL, returns the first registered hardware accelerator,
 * if hwaccel is non-NULL, returns the next registered hardware accelerator
 * after hwaccel, or NULL if hwaccel is the last one.
 */
    pub fn av_hwaccel_next(hwaccel: *const AVHWAccel) -> *mut AVHWAccel;
}
#[repr(u32)]
/**
 * Lock operation used by lockmgr
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVLockOp {
    AV_LOCK_CREATE = 0,
    AV_LOCK_OBTAIN = 1,
    AV_LOCK_RELEASE = 2,
    AV_LOCK_DESTROY = 3,
}
extern "C" {
    /**
 * Register a user provided lock manager supporting the operations
 * specified by AVLockOp. The "mutex" argument to the function points
 * to a (void *) where the lockmgr should store/get a pointer to a user
 * allocated mutex. It is NULL upon AV_LOCK_CREATE and equal to the
 * value left by the last call for all other ops. If the lock manager is
 * unable to perform the op then it should leave the mutex in the same
 * state as when it was called and return a non-zero value. However,
 * when called with AV_LOCK_DESTROY the mutex will always be assumed to
 * have been successfully destroyed. If av_lockmgr_register succeeds
 * it will return a non-negative value, if it fails it will return a
 * negative value and destroy all mutex and unregister all callbacks.
 * av_lockmgr_register is not thread-safe, it must be called from a
 * single thread before any calls which make use of locking are used.
 *
 * @param cb User defined callback. av_lockmgr_register invokes calls
 *           to this callback and the previously registered callback.
 *           The callback will be used to create more than one mutex
 *           each of which must be backed by its own underlying locking
 *           mechanism (i.e. do not use a single static object to
 *           implement your lock manager). If cb is set to NULL the
 *           lockmgr will be unregistered.
 */
    pub fn av_lockmgr_register(cb:
                                   ::std::option::Option<unsafe extern "C" fn(mutex:
                                                                                  *mut *mut ::std::os::raw::c_void,
                                                                              op:
                                                                                  AVLockOp)
                                                             ->
                                                                 ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get the type of the given codec.
 */
    pub fn avcodec_get_type(codec_id: AVCodecID) -> AVMediaType;
}
extern "C" {
    /**
 * Get the name of a codec.
 * @return  a static string identifying the codec; never NULL
 */
    pub fn avcodec_get_name(id: AVCodecID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * @return a positive value if s is open (i.e. avcodec_open2() was called on it
 * with no corresponding avcodec_close()), 0 otherwise.
 */
    pub fn avcodec_is_open(s: *mut AVCodecContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @return a non-zero number if codec is an encoder, zero otherwise
 */
    pub fn av_codec_is_encoder(codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @return a non-zero number if codec is a decoder, zero otherwise
 */
    pub fn av_codec_is_decoder(codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @return descriptor for given codec ID or NULL if no descriptor exists.
 */
    pub fn avcodec_descriptor_get(id: AVCodecID) -> *const AVCodecDescriptor;
}
extern "C" {
    /**
 * Iterate over all codec descriptors known to libavcodec.
 *
 * @param prev previous descriptor. NULL to get the first descriptor.
 *
 * @return next descriptor or NULL after the last descriptor
 */
    pub fn avcodec_descriptor_next(prev: *const AVCodecDescriptor)
     -> *const AVCodecDescriptor;
}
extern "C" {
    /**
 * @return codec descriptor with the given name or NULL if no such descriptor
 *         exists.
 */
    pub fn avcodec_descriptor_get_by_name(name: *const ::std::os::raw::c_char)
     -> *const AVCodecDescriptor;
}
/**
 * Callback for checking whether to abort blocking functions.
 * AVERROR_EXIT is returned in this case by the interrupted
 * function. During blocking operations, callback is called with
 * opaque as parameter. If the callback returns 1, the
 * blocking operation will be aborted.
 *
 * No members can be added to this struct without a major bump, if
 * new elements have been added after this struct in AVFormatContext
 * or AVIOContext.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIOInterruptCB {
    pub callback: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut ::std::os::raw::c_void)
                                            -> ::std::os::raw::c_int>,
    pub opaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AVIOInterruptCB() {
    assert_eq!(::std::mem::size_of::<AVIOInterruptCB>() , 16usize);
    assert_eq!(::std::mem::align_of::<AVIOInterruptCB>() , 8usize);
}
impl Clone for AVIOInterruptCB {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
/**
 * Directory entry types.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVIODirEntryType {
    AVIO_ENTRY_UNKNOWN = 0,
    AVIO_ENTRY_BLOCK_DEVICE = 1,
    AVIO_ENTRY_CHARACTER_DEVICE = 2,
    AVIO_ENTRY_DIRECTORY = 3,
    AVIO_ENTRY_NAMED_PIPE = 4,
    AVIO_ENTRY_SYMBOLIC_LINK = 5,
    AVIO_ENTRY_SOCKET = 6,
    AVIO_ENTRY_FILE = 7,
    AVIO_ENTRY_SERVER = 8,
    AVIO_ENTRY_SHARE = 9,
    AVIO_ENTRY_WORKGROUP = 10,
}
/**
 * Describes single entry of the directory.
 *
 * Only name and type fields are guaranteed be set.
 * Rest of fields are protocol or/and platform dependent and might be unknown.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIODirEntry {
    /**< Filename */
    pub name: *mut ::std::os::raw::c_char,
    /**< Type of the entry */
    pub type_: ::std::os::raw::c_int,
    /**< Set to 1 when name is encoded with UTF-8, 0 otherwise.
                                               Name can be encoded with UTF-8 even though 0 is set. */
    pub utf8: ::std::os::raw::c_int,
    /**< File size in bytes, -1 if unknown. */
    pub size: i64,
    /**< Time of last modification in microseconds since unix
                                               epoch, -1 if unknown. */
    pub modification_timestamp: i64,
    /**< Time of last access in microseconds since unix epoch,
                                               -1 if unknown. */
    pub access_timestamp: i64,
    /**< Time of last status change in microseconds since unix
                                               epoch, -1 if unknown. */
    pub status_change_timestamp: i64,
    /**< User ID of owner, -1 if unknown. */
    pub user_id: i64,
    /**< Group ID of owner, -1 if unknown. */
    pub group_id: i64,
    /**< Unix file mode, -1 if unknown. */
    pub filemode: i64,
}
#[test]
fn bindgen_test_layout_AVIODirEntry() {
    assert_eq!(::std::mem::size_of::<AVIODirEntry>() , 72usize);
    assert_eq!(::std::mem::align_of::<AVIODirEntry>() , 8usize);
}
impl Clone for AVIODirEntry {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIODirContext {
    pub url_context: *mut AVIODirContext_URLContext,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVIODirContext_URLContext([u8; 0]);
#[test]
fn bindgen_test_layout_AVIODirContext() {
    assert_eq!(::std::mem::size_of::<AVIODirContext>() , 8usize);
    assert_eq!(::std::mem::align_of::<AVIODirContext>() , 8usize);
}
impl Clone for AVIODirContext {
    fn clone(&self) -> Self { *self }
}
/**
 * Bytestream IO Context.
 * New fields can be added to the end with minor version bumps.
 * Removal, reordering and changes to existing fields require a major
 * version bump.
 * sizeof(AVIOContext) must not be used outside libav*.
 *
 * @note None of the function pointers in AVIOContext should be called
 *       directly, they should only be set by the client application
 *       when implementing custom I/O. Normally these are set to the
 *       function pointers specified in avio_alloc_context()
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIOContext {
    /**
     * A class for private options.
     *
     * If this AVIOContext is created by avio_open2(), av_class is set and
     * passes the options down to protocols.
     *
     * If this AVIOContext is manually allocated, then av_class may be set by
     * the caller.
     *
     * warning -- this field can be NULL, be sure to not pass this AVIOContext
     * to any av_opt_* functions in that case.
     */
    pub av_class: *const AVClass,
    /**< Start of the buffer. */
    pub buffer: *mut ::std::os::raw::c_uchar,
    /**< Maximum buffer size */
    pub buffer_size: ::std::os::raw::c_int,
    /**< Current position in the buffer */
    pub buf_ptr: *mut ::std::os::raw::c_uchar,
    /**< End of the data, may be less than
                                 buffer+buffer_size if the read function returned
                                 less data than requested, e.g. for streams where
                                 no more data has been received yet. */
    pub buf_end: *mut ::std::os::raw::c_uchar,
    /**< A private pointer, passed to the read/write/seek/...
                                 functions. */
    pub opaque: *mut ::std::os::raw::c_void,
    pub read_packet: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                    *mut ::std::os::raw::c_void,
                                                                buf: *mut u8,
                                                                buf_size:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    pub write_packet: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                     *mut ::std::os::raw::c_void,
                                                                 buf: *mut u8,
                                                                 buf_size:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    pub seek: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                             *mut ::std::os::raw::c_void,
                                                         offset: i64,
                                                         whence:
                                                             ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_long>,
    /**< position in the file of the current buffer */
    pub pos: i64,
    /**< true if the next seek should flush */
    pub must_flush: ::std::os::raw::c_int,
    /**< true if eof reached */
    pub eof_reached: ::std::os::raw::c_int,
    /**< true if open for writing */
    pub write_flag: ::std::os::raw::c_int,
    pub max_packet_size: ::std::os::raw::c_int,
    pub checksum: ::std::os::raw::c_ulong,
    pub checksum_ptr: *mut ::std::os::raw::c_uchar,
    pub update_checksum: ::std::option::Option<unsafe extern "C" fn(checksum:
                                                                        ::std::os::raw::c_ulong,
                                                                    buf:
                                                                        *const u8,
                                                                    size:
                                                                        ::std::os::raw::c_uint)
                                                   ->
                                                       ::std::os::raw::c_ulong>,
    /**< contains the error code or 0 if no error happened */
    pub error: ::std::os::raw::c_int,
    /**
     * Pause or resume playback for network streaming protocols - e.g. MMS.
     */
    pub read_pause: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                   *mut ::std::os::raw::c_void,
                                                               pause:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    /**
     * Seek to a given timestamp in stream with the specified stream_index.
     * Needed for some network streaming protocols which don't support seeking
     * to byte position.
     */
    pub read_seek: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                  *mut ::std::os::raw::c_void,
                                                              stream_index:
                                                                  ::std::os::raw::c_int,
                                                              timestamp: i64,
                                                              flags:
                                                                  ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_long>,
    /**
     * A combination of AVIO_SEEKABLE_ flags or 0 when the stream is not seekable.
     */
    pub seekable: ::std::os::raw::c_int,
    /**
     * max filesize, used to limit allocations
     * This field is internal to libavformat and access from outside is not allowed.
     */
    pub maxsize: i64,
    /**
     * avio_read and avio_write should if possible be satisfied directly
     * instead of going through a buffer, and avio_seek will always
     * call the underlying seek function directly.
     */
    pub direct: ::std::os::raw::c_int,
    /**
     * Bytes read statistic
     * This field is internal to libavformat and access from outside is not allowed.
     */
    pub bytes_read: i64,
    /**
     * seek statistic
     * This field is internal to libavformat and access from outside is not allowed.
     */
    pub seek_count: ::std::os::raw::c_int,
    /**
     * writeout statistic
     * This field is internal to libavformat and access from outside is not allowed.
     */
    pub writeout_count: ::std::os::raw::c_int,
    /**
     * Original buffer size
     * used internally after probing and ensure seekback to reset the buffer size
     * This field is internal to libavformat and access from outside is not allowed.
     */
    pub orig_buffer_size: ::std::os::raw::c_int,
    /**
     * Threshold to favor readahead over seek.
     * This is current internal only, do not use from outside.
     */
    pub short_seek_threshold: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVIOContext() {
    assert_eq!(::std::mem::size_of::<AVIOContext>() , 192usize);
    assert_eq!(::std::mem::align_of::<AVIOContext>() , 8usize);
}
impl Clone for AVIOContext {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /**
 * Return the name of the protocol that will handle the passed URL.
 *
 * NULL is returned if no protocol could be found for the given URL.
 *
 * @return Name of the protocol or NULL.
 */
    pub fn avio_find_protocol_name(url: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Return AVIO_FLAG_* access flags corresponding to the access permissions
 * of the resource in url, or a negative value corresponding to an
 * AVERROR code in case of failure. The returned access flags are
 * masked by the value in flags.
 *
 * @note This function is intrinsically unsafe, in the sense that the
 * checked resource may change its existence or permission status from
 * one call to another. Thus you should not trust the returned value,
 * unless you are sure that no other processes are accessing the
 * checked resource.
 */
    pub fn avio_check(url: *const ::std::os::raw::c_char,
                      flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Move or rename a resource.
 *
 * @note url_src and url_dst should share the same protocol and authority.
 *
 * @param url_src url to resource to be moved
 * @param url_dst new url to resource if the operation succeeded
 * @return >=0 on success or negative on error.
 */
    pub fn avpriv_io_move(url_src: *const ::std::os::raw::c_char,
                          url_dst: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Delete a resource.
 *
 * @param url resource to be deleted.
 * @return >=0 on success or negative on error.
 */
    pub fn avpriv_io_delete(url: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Open directory for reading.
 *
 * @param s       directory read context. Pointer to a NULL pointer must be passed.
 * @param url     directory to be listed.
 * @param options A dictionary filled with protocol-private options. On return
 *                this parameter will be destroyed and replaced with a dictionary
 *                containing options that were not found. May be NULL.
 * @return >=0 on success or negative on error.
 */
    pub fn avio_open_dir(s: *mut *mut AVIODirContext,
                         url: *const ::std::os::raw::c_char,
                         options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get next directory entry.
 *
 * Returned entry must be freed with avio_free_directory_entry(). In particular
 * it may outlive AVIODirContext.
 *
 * @param s         directory read context.
 * @param[out] next next entry or NULL when no more entries.
 * @return >=0 on success or negative on error. End of list is not considered an
 *             error.
 */
    pub fn avio_read_dir(s: *mut AVIODirContext, next: *mut *mut AVIODirEntry)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Close directory.
 *
 * @note Entries created using avio_read_dir() are not deleted and must be
 * freeded with avio_free_directory_entry().
 *
 * @param s         directory read context.
 * @return >=0 on success or negative on error.
 */
    pub fn avio_close_dir(s: *mut *mut AVIODirContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Free entry allocated by avio_read_dir().
 *
 * @param entry entry to be freed.
 */
    pub fn avio_free_directory_entry(entry: *mut *mut AVIODirEntry);
}
extern "C" {
    /**
 * Allocate and initialize an AVIOContext for buffered I/O. It must be later
 * freed with av_free().
 *
 * @param buffer Memory block for input/output operations via AVIOContext.
 *        The buffer must be allocated with av_malloc() and friends.
 *        It may be freed and replaced with a new buffer by libavformat.
 *        AVIOContext.buffer holds the buffer currently in use,
 *        which must be later freed with av_free().
 * @param buffer_size The buffer size is very important for performance.
 *        For protocols with fixed blocksize it should be set to this blocksize.
 *        For others a typical size is a cache page, e.g. 4kb.
 * @param write_flag Set to 1 if the buffer should be writable, 0 otherwise.
 * @param opaque An opaque pointer to user-specific data.
 * @param read_packet  A function for refilling the buffer, may be NULL.
 * @param write_packet A function for writing the buffer contents, may be NULL.
 *        The function may not change the input buffers content.
 * @param seek A function for seeking to specified byte position, may be NULL.
 *
 * @return Allocated AVIOContext or NULL on failure.
 */
    pub fn avio_alloc_context(buffer: *mut ::std::os::raw::c_uchar,
                              buffer_size: ::std::os::raw::c_int,
                              write_flag: ::std::os::raw::c_int,
                              opaque: *mut ::std::os::raw::c_void,
                              read_packet:
                                  ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             buf:
                                                                                 *mut u8,
                                                                             buf_size:
                                                                                 ::std::os::raw::c_int)
                                                            ->
                                                                ::std::os::raw::c_int>,
                              write_packet:
                                  ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             buf:
                                                                                 *mut u8,
                                                                             buf_size:
                                                                                 ::std::os::raw::c_int)
                                                            ->
                                                                ::std::os::raw::c_int>,
                              seek:
                                  ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             offset:
                                                                                 i64,
                                                                             whence:
                                                                                 ::std::os::raw::c_int)
                                                            ->
                                                                ::std::os::raw::c_long>)
     -> *mut AVIOContext;
}
extern "C" {
    pub fn avio_w8(s: *mut AVIOContext, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn avio_write(s: *mut AVIOContext,
                      buf: *const ::std::os::raw::c_uchar,
                      size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn avio_wl64(s: *mut AVIOContext, val: u64);
}
extern "C" {
    pub fn avio_wb64(s: *mut AVIOContext, val: u64);
}
extern "C" {
    pub fn avio_wl32(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wb32(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wl24(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wb24(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wl16(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wb16(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    /**
 * Write a NULL-terminated string.
 * @return number of bytes written.
 */
    pub fn avio_put_str(s: *mut AVIOContext,
                        str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Convert an UTF-8 string to UTF-16LE and write it.
 * @param s the AVIOContext
 * @param str NULL-terminated UTF-8 string
 *
 * @return number of bytes written.
 */
    pub fn avio_put_str16le(s: *mut AVIOContext,
                            str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Convert an UTF-8 string to UTF-16BE and write it.
 * @param s the AVIOContext
 * @param str NULL-terminated UTF-8 string
 *
 * @return number of bytes written.
 */
    pub fn avio_put_str16be(s: *mut AVIOContext,
                            str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * fseek() equivalent for AVIOContext.
 * @return new position or AVERROR.
 */
    pub fn avio_seek(s: *mut AVIOContext, offset: i64,
                     whence: ::std::os::raw::c_int) -> i64;
}
extern "C" {
    /**
 * Skip given number of bytes forward
 * @return new position or AVERROR.
 */
    pub fn avio_skip(s: *mut AVIOContext, offset: i64) -> i64;
}
extern "C" {
    /**
 * Get the filesize.
 * @return filesize or AVERROR
 */
    pub fn avio_size(s: *mut AVIOContext) -> i64;
}
extern "C" {
    /**
 * feof() equivalent for AVIOContext.
 * @return non zero if and only if end of file
 */
    pub fn avio_feof(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @deprecated use avio_feof()
 */
    pub fn url_feof(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /** @warning currently size is limited */
    pub fn avio_printf(s: *mut AVIOContext,
                       fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Force flushing of buffered data.
 *
 * For write streams, force the buffered data to be immediately written to the output,
 * without to wait to fill the internal buffer.
 *
 * For read streams, discard all currently buffered data, and advance the
 * reported file position to that of the underlying stream. This does not
 * read new data, and does not perform any seeks.
 */
    pub fn avio_flush(s: *mut AVIOContext);
}
extern "C" {
    /**
 * Read size bytes from AVIOContext into buf.
 * @return number of bytes read or AVERROR
 */
    pub fn avio_read(s: *mut AVIOContext, buf: *mut ::std::os::raw::c_uchar,
                     size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @name Functions for reading from AVIOContext
 * @{
 *
 * @note return 0 if EOF, so you cannot use it if EOF handling is
 *       necessary
 */
    pub fn avio_r8(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_rl16(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rl24(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rl32(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rl64(s: *mut AVIOContext) -> u64;
}
extern "C" {
    pub fn avio_rb16(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rb24(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rb32(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rb64(s: *mut AVIOContext) -> u64;
}
extern "C" {
    /**
 * Read a string from pb into buf. The reading will terminate when either
 * a NULL character was encountered, maxlen bytes have been read, or nothing
 * more can be read from pb. The result is guaranteed to be NULL-terminated, it
 * will be truncated if buf is too small.
 * Note that the string is not interpreted or validated in any way, it
 * might get truncated in the middle of a sequence for multi-byte encodings.
 *
 * @return number of bytes read (is always <= maxlen).
 * If reading ends on EOF or error, the return value will be one more than
 * bytes actually read.
 */
    pub fn avio_get_str(pb: *mut AVIOContext, maxlen: ::std::os::raw::c_int,
                        buf: *mut ::std::os::raw::c_char,
                        buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Read a UTF-16 string from pb and convert it to UTF-8.
 * The reading will terminate when either a null or invalid character was
 * encountered or maxlen bytes have been read.
 * @return number of bytes read (is always <= maxlen)
 */
    pub fn avio_get_str16le(pb: *mut AVIOContext,
                            maxlen: ::std::os::raw::c_int,
                            buf: *mut ::std::os::raw::c_char,
                            buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_get_str16be(pb: *mut AVIOContext,
                            maxlen: ::std::os::raw::c_int,
                            buf: *mut ::std::os::raw::c_char,
                            buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Create and initialize a AVIOContext for accessing the
 * resource indicated by url.
 * @note When the resource indicated by url has been opened in
 * read+write mode, the AVIOContext can be used only for writing.
 *
 * @param s Used to return the pointer to the created AVIOContext.
 * In case of failure the pointed to value is set to NULL.
 * @param url resource to access
 * @param flags flags which control how the resource indicated by url
 * is to be opened
 * @return >= 0 in case of success, a negative value corresponding to an
 * AVERROR code in case of failure
 */
    pub fn avio_open(s: *mut *mut AVIOContext,
                     url: *const ::std::os::raw::c_char,
                     flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Create and initialize a AVIOContext for accessing the
 * resource indicated by url.
 * @note When the resource indicated by url has been opened in
 * read+write mode, the AVIOContext can be used only for writing.
 *
 * @param s Used to return the pointer to the created AVIOContext.
 * In case of failure the pointed to value is set to NULL.
 * @param url resource to access
 * @param flags flags which control how the resource indicated by url
 * is to be opened
 * @param int_cb an interrupt callback to be used at the protocols level
 * @param options  A dictionary filled with protocol-private options. On return
 * this parameter will be destroyed and replaced with a dict containing options
 * that were not found. May be NULL.
 * @return >= 0 in case of success, a negative value corresponding to an
 * AVERROR code in case of failure
 */
    pub fn avio_open2(s: *mut *mut AVIOContext,
                      url: *const ::std::os::raw::c_char,
                      flags: ::std::os::raw::c_int,
                      int_cb: *const AVIOInterruptCB,
                      options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Close the resource accessed by the AVIOContext s and free it.
 * This function can only be used if s was opened by avio_open().
 *
 * The internal buffer is automatically flushed before closing the
 * resource.
 *
 * @return 0 on success, an AVERROR < 0 on error.
 * @see avio_closep
 */
    pub fn avio_close(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Close the resource accessed by the AVIOContext *s, free it
 * and set the pointer pointing to it to NULL.
 * This function can only be used if s was opened by avio_open().
 *
 * The internal buffer is automatically flushed before closing the
 * resource.
 *
 * @return 0 on success, an AVERROR < 0 on error.
 * @see avio_close
 */
    pub fn avio_closep(s: *mut *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Open a write only memory stream.
 *
 * @param s new IO context
 * @return zero if no error.
 */
    pub fn avio_open_dyn_buf(s: *mut *mut AVIOContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return the written size and a pointer to the buffer. The buffer
 * must be freed with av_free().
 * Padding of AV_INPUT_BUFFER_PADDING_SIZE is added to the buffer.
 *
 * @param s IO context
 * @param pbuffer pointer to a byte buffer
 * @return the length of the byte buffer
 */
    pub fn avio_close_dyn_buf(s: *mut AVIOContext, pbuffer: *mut *mut u8)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Iterate through names of available protocols.
 *
 * @param opaque A private pointer representing current protocol.
 *        It must be a pointer to NULL on first iteration and will
 *        be updated by successive calls to avio_enum_protocols.
 * @param output If set to 1, iterate over output protocols,
 *               otherwise over input protocols.
 *
 * @return A static string containing the name of current protocol or NULL
 */
    pub fn avio_enum_protocols(opaque: *mut *mut ::std::os::raw::c_void,
                               output: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Pause and resume playing - only meaningful if using a network streaming
 * protocol (e.g. MMS).
 *
 * @param h     IO context from which to call the read_pause function pointer
 * @param pause 1 for pause, 0 for resume
 */
    pub fn avio_pause(h: *mut AVIOContext, pause: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Seek to a given timestamp relative to some component stream.
 * Only meaningful if using a network streaming protocol (e.g. MMS.).
 *
 * @param h IO context from which to call the seek function pointers
 * @param stream_index The stream index that the timestamp is relative to.
 *        If stream_index is (-1) the timestamp should be in AV_TIME_BASE
 *        units from the beginning of the presentation.
 *        If a stream_index >= 0 is used and the protocol does not support
 *        seeking based on component streams, the call will fail.
 * @param timestamp timestamp in AVStream.time_base units
 *        or if there is no stream specified then in AV_TIME_BASE units.
 * @param flags Optional combination of AVSEEK_FLAG_BACKWARD, AVSEEK_FLAG_BYTE
 *        and AVSEEK_FLAG_ANY. The protocol may silently ignore
 *        AVSEEK_FLAG_BACKWARD and AVSEEK_FLAG_ANY, but AVSEEK_FLAG_BYTE will
 *        fail if used and not supported.
 * @return >= 0 on success
 * @see AVInputFormat::read_seek
 */
    pub fn avio_seek_time(h: *mut AVIOContext,
                          stream_index: ::std::os::raw::c_int, timestamp: i64,
                          flags: ::std::os::raw::c_int) -> i64;
}
extern "C" {
    /**
 * Read contents of h into print buffer, up to max_size bytes, or up to EOF.
 *
 * @return 0 for success (max_size bytes read or EOF reached), negative error
 * code otherwise
 */
    pub fn avio_read_to_bprint(h: *mut AVIOContext, pb: *mut AVBPrint,
                               max_size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Accept and allocate a client context on a server context.
 * @param  s the server context
 * @param  c the client context, must be unallocated
 * @return   >= 0 on success or a negative value corresponding
 *           to an AVERROR on failure
 */
    pub fn avio_accept(s: *mut AVIOContext, c: *mut *mut AVIOContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Perform one step of the protocol handshake to accept a new client.
 * This function must be called on a client returned by avio_accept() before
 * using it as a read/write context.
 * It is separate from avio_accept() because it may block.
 * A step of the handshake is defined by places where the application may
 * decide to change the proceedings.
 * For example, on a protocol with a request header and a reply header, each
 * one can constitute a step because the application may use the parameters
 * from the request to change parameters in the reply; or each individual
 * chunk of the request can constitute a step.
 * If the handshake is already finished, avio_handshake() does nothing and
 * returns 0 immediately.
 *
 * @param  c the client context to perform the handshake on
 * @return   0   on a complete and successful handshake
 *           > 0 if the handshake progressed, but is not complete
 *           < 0 for an AVERROR code
 */
    pub fn avio_handshake(c: *mut AVIOContext) -> ::std::os::raw::c_int;
}
/**
 * Format I/O context.
 * New fields can be added to the end with minor version bumps.
 * Removal, reordering and changes to existing fields require a major
 * version bump.
 * sizeof(AVFormatContext) must not be used outside libav*, use
 * avformat_alloc_context() to create an AVFormatContext.
 */
#[repr(C)]
pub struct AVFormatContext {
    /**
     * A class for logging and @ref avoptions. Set by avformat_alloc_context().
     * Exports (de)muxer private options if they exist.
     */
    pub av_class: *const AVClass,
    /**
     * The input container format.
     *
     * Demuxing only, set by avformat_open_input().
     */
    pub iformat: *mut AVInputFormat,
    /**
     * The output container format.
     *
     * Muxing only, must be set by the caller before avformat_write_header().
     */
    pub oformat: *mut AVOutputFormat,
    /**
     * Format private data. This is an AVOptions-enabled struct
     * if and only if iformat/oformat.priv_class is not NULL.
     *
     * - muxing: set by avformat_write_header()
     * - demuxing: set by avformat_open_input()
     */
    pub priv_data: *mut ::std::os::raw::c_void,
    /**
     * I/O context.
     *
     * - demuxing: either set by the user before avformat_open_input() (then
     *             the user must close it manually) or set by avformat_open_input().
     * - muxing: set by the user before avformat_write_header(). The caller must
     *           take care of closing / freeing the IO context.
     *
     * Do NOT set this field if AVFMT_NOFILE flag is set in
     * iformat/oformat.flags. In such a case, the (de)muxer will handle
     * I/O in some other way and this field will be NULL.
     */
    pub pb: *mut AVIOContext,
    /**
     * Flags signalling stream properties. A combination of AVFMTCTX_*.
     * Set by libavformat.
     */
    pub ctx_flags: ::std::os::raw::c_int,
    /**
     * Number of elements in AVFormatContext.streams.
     *
     * Set by avformat_new_stream(), must not be modified by any other code.
     */
    pub nb_streams: ::std::os::raw::c_uint,
    /**
     * A list of all streams in the file. New streams are created with
     * avformat_new_stream().
     *
     * - demuxing: streams are created by libavformat in avformat_open_input().
     *             If AVFMTCTX_NOHEADER is set in ctx_flags, then new streams may also
     *             appear in av_read_frame().
     * - muxing: streams are created by the user before avformat_write_header().
     *
     * Freed by libavformat in avformat_free_context().
     */
    pub streams: *mut *mut AVStream,
    /**
     * input or output filename
     *
     * - demuxing: set by avformat_open_input()
     * - muxing: may be set by the caller before avformat_write_header()
     */
    pub filename: [::std::os::raw::c_char; 1024usize],
    /**
     * Position of the first frame of the component, in
     * AV_TIME_BASE fractional seconds. NEVER set this value directly:
     * It is deduced from the AVStream values.
     *
     * Demuxing only, set by libavformat.
     */
    pub start_time: i64,
    /**
     * Duration of the stream, in AV_TIME_BASE fractional
     * seconds. Only set this value if you know none of the individual stream
     * durations and also do not set any of them. This is deduced from the
     * AVStream values if not set.
     *
     * Demuxing only, set by libavformat.
     */
    pub duration: i64,
    /**
     * Total stream bitrate in bit/s, 0 if not
     * available. Never set it directly if the file_size and the
     * duration are known as FFmpeg can compute it automatically.
     */
    pub bit_rate: ::std::os::raw::c_int,
    pub packet_size: ::std::os::raw::c_uint,
    pub max_delay: ::std::os::raw::c_int,
    /**
     * Flags modifying the (de)muxer behaviour. A combination of AVFMT_FLAG_*.
     * Set by the user before avformat_open_input() / avformat_write_header().
     */
    pub flags: ::std::os::raw::c_int,
    /**
     * @deprecated deprecated in favor of probesize2
     */
    pub probesize: ::std::os::raw::c_uint,
    /**
     * @deprecated deprecated in favor of max_analyze_duration2
     */
    pub max_analyze_duration: ::std::os::raw::c_int,
    pub key: *const u8,
    pub keylen: ::std::os::raw::c_int,
    pub nb_programs: ::std::os::raw::c_uint,
    pub programs: *mut *mut AVProgram,
    /**
     * Forced video codec_id.
     * Demuxing: Set by user.
     */
    pub video_codec_id: AVCodecID,
    /**
     * Forced audio codec_id.
     * Demuxing: Set by user.
     */
    pub audio_codec_id: AVCodecID,
    /**
     * Forced subtitle codec_id.
     * Demuxing: Set by user.
     */
    pub subtitle_codec_id: AVCodecID,
    /**
     * Maximum amount of memory in bytes to use for the index of each stream.
     * If the index exceeds this size, entries will be discarded as
     * needed to maintain a smaller size. This can lead to slower or less
     * accurate seeking (depends on demuxer).
     * Demuxers for which a full in-memory index is mandatory will ignore
     * this.
     * - muxing: unused
     * - demuxing: set by user
     */
    pub max_index_size: ::std::os::raw::c_uint,
    /**
     * Maximum amount of memory in bytes to use for buffering frames
     * obtained from realtime capture devices.
     */
    pub max_picture_buffer: ::std::os::raw::c_uint,
    /**
     * Number of chapters in AVChapter array.
     * When muxing, chapters are normally written in the file header,
     * so nb_chapters should normally be initialized before write_header
     * is called. Some muxers (e.g. mov and mkv) can also write chapters
     * in the trailer.  To write chapters in the trailer, nb_chapters
     * must be zero when write_header is called and non-zero when
     * write_trailer is called.
     * - muxing: set by user
     * - demuxing: set by libavformat
     */
    pub nb_chapters: ::std::os::raw::c_uint,
    pub chapters: *mut *mut AVChapter,
    /**
     * Metadata that applies to the whole file.
     *
     * - demuxing: set by libavformat in avformat_open_input()
     * - muxing: may be set by the caller before avformat_write_header()
     *
     * Freed by libavformat in avformat_free_context().
     */
    pub metadata: *mut AVDictionary,
    /**
     * Start time of the stream in real world time, in microseconds
     * since the Unix epoch (00:00 1st January 1970). That is, pts=0 in the
     * stream was captured at this real world time.
     * - muxing: Set by the caller before avformat_write_header(). If set to
     *           either 0 or AV_NOPTS_VALUE, then the current wall-time will
     *           be used.
     * - demuxing: Set by libavformat. AV_NOPTS_VALUE if unknown. Note that
     *             the value may become known after some number of frames
     *             have been received.
     */
    pub start_time_realtime: i64,
    /**
     * The number of frames used for determining the framerate in
     * avformat_find_stream_info().
     * Demuxing only, set by the caller before avformat_find_stream_info().
     */
    pub fps_probe_size: ::std::os::raw::c_int,
    /**
     * Error recognition; higher values will detect more errors but may
     * misdetect some more or less valid parts as errors.
     * Demuxing only, set by the caller before avformat_open_input().
     */
    pub error_recognition: ::std::os::raw::c_int,
    /**
     * Custom interrupt callbacks for the I/O layer.
     *
     * demuxing: set by the user before avformat_open_input().
     * muxing: set by the user before avformat_write_header()
     * (mainly useful for AVFMT_NOFILE formats). The callback
     * should also be passed to avio_open2() if it's used to
     * open the file.
     */
    pub interrupt_callback: AVIOInterruptCB,
    /**
     * Flags to enable debugging.
     */
    pub debug: ::std::os::raw::c_int,
    /**
     * Maximum buffering duration for interleaving.
     *
     * To ensure all the streams are interleaved correctly,
     * av_interleaved_write_frame() will wait until it has at least one packet
     * for each stream before actually writing any packets to the output file.
     * When some streams are "sparse" (i.e. there are large gaps between
     * successive packets), this can result in excessive buffering.
     *
     * This field specifies the maximum difference between the timestamps of the
     * first and the last packet in the muxing queue, above which libavformat
     * will output a packet regardless of whether it has queued a packet for all
     * the streams.
     *
     * Muxing only, set by the caller before avformat_write_header().
     */
    pub max_interleave_delta: i64,
    /**
     * Allow non-standard and experimental extension
     * @see AVCodecContext.strict_std_compliance
     */
    pub strict_std_compliance: ::std::os::raw::c_int,
    /**
     * Flags for the user to detect events happening on the file. Flags must
     * be cleared by the user once the event has been handled.
     * A combination of AVFMT_EVENT_FLAG_*.
     */
    pub event_flags: ::std::os::raw::c_int,
    /**
     * Maximum number of packets to read while waiting for the first timestamp.
     * Decoding only.
     */
    pub max_ts_probe: ::std::os::raw::c_int,
    /**
     * Avoid negative timestamps during muxing.
     * Any value of the AVFMT_AVOID_NEG_TS_* constants.
     * Note, this only works when using av_interleaved_write_frame. (interleave_packet_per_dts is in use)
     * - muxing: Set by user
     * - demuxing: unused
     */
    pub avoid_negative_ts: ::std::os::raw::c_int,
    /**
     * Transport stream id.
     * This will be moved into demuxer private options. Thus no API/ABI compatibility
     */
    pub ts_id: ::std::os::raw::c_int,
    /**
     * Audio preload in microseconds.
     * Note, not all formats support this and unpredictable things may happen if it is used when not supported.
     * - encoding: Set by user via AVOptions (NO direct access)
     * - decoding: unused
     */
    pub audio_preload: ::std::os::raw::c_int,
    /**
     * Max chunk time in microseconds.
     * Note, not all formats support this and unpredictable things may happen if it is used when not supported.
     * - encoding: Set by user via AVOptions (NO direct access)
     * - decoding: unused
     */
    pub max_chunk_duration: ::std::os::raw::c_int,
    /**
     * Max chunk size in bytes
     * Note, not all formats support this and unpredictable things may happen if it is used when not supported.
     * - encoding: Set by user via AVOptions (NO direct access)
     * - decoding: unused
     */
    pub max_chunk_size: ::std::os::raw::c_int,
    /**
     * forces the use of wallclock timestamps as pts/dts of packets
     * This has undefined results in the presence of B frames.
     * - encoding: unused
     * - decoding: Set by user via AVOptions (NO direct access)
     */
    pub use_wallclock_as_timestamps: ::std::os::raw::c_int,
    /**
     * avio flags, used to force AVIO_FLAG_DIRECT.
     * - encoding: unused
     * - decoding: Set by user via AVOptions (NO direct access)
     */
    pub avio_flags: ::std::os::raw::c_int,
    /**
     * The duration field can be estimated through various ways, and this field can be used
     * to know how the duration was estimated.
     * - encoding: unused
     * - decoding: Read by user via AVOptions (NO direct access)
     */
    pub duration_estimation_method: AVDurationEstimationMethod,
    /**
     * Skip initial bytes when opening stream
     * - encoding: unused
     * - decoding: Set by user via AVOptions (NO direct access)
     */
    pub skip_initial_bytes: i64,
    /**
     * Correct single timestamp overflows
     * - encoding: unused
     * - decoding: Set by user via AVOptions (NO direct access)
     */
    pub correct_ts_overflow: ::std::os::raw::c_uint,
    /**
     * Force seeking to any (also non key) frames.
     * - encoding: unused
     * - decoding: Set by user via AVOptions (NO direct access)
     */
    pub seek2any: ::std::os::raw::c_int,
    /**
     * Flush the I/O context after each packet.
     * - encoding: Set by user via AVOptions (NO direct access)
     * - decoding: unused
     */
    pub flush_packets: ::std::os::raw::c_int,
    /**
     * format probing score.
     * The maximal score is AVPROBE_SCORE_MAX, its set when the demuxer probes
     * the format.
     * - encoding: unused
     * - decoding: set by avformat, read by user via av_format_get_probe_score() (NO direct access)
     */
    pub probe_score: ::std::os::raw::c_int,
    /**
     * number of bytes to read maximally to identify format.
     * - encoding: unused
     * - decoding: set by user through AVOPtions (NO direct access)
     */
    pub format_probesize: ::std::os::raw::c_int,
    /**
     * ',' separated list of allowed decoders.
     * If NULL then all are allowed
     * - encoding: unused
     * - decoding: set by user through AVOptions (NO direct access)
     */
    pub codec_whitelist: *mut ::std::os::raw::c_char,
    /**
     * ',' separated list of allowed demuxers.
     * If NULL then all are allowed
     * - encoding: unused
     * - decoding: set by user through AVOptions (NO direct access)
     */
    pub format_whitelist: *mut ::std::os::raw::c_char,
    /**
     * An opaque field for libavformat internal usage.
     * Must not be accessed in any way by callers.
     */
    pub internal: *mut AVFormatInternal,
    /**
     * IO repositioned flag.
     * This is set by avformat when the underlaying IO context read pointer
     * is repositioned, for example when doing byte based seeking.
     * Demuxers can use the flag to detect such changes.
     */
    pub io_repositioned: ::std::os::raw::c_int,
    /**
     * Forced video codec.
     * This allows forcing a specific decoder, even when there are multiple with
     * the same codec_id.
     * Demuxing: Set by user via av_format_set_video_codec (NO direct access).
     */
    pub video_codec: *mut AVCodec,
    /**
     * Forced audio codec.
     * This allows forcing a specific decoder, even when there are multiple with
     * the same codec_id.
     * Demuxing: Set by user via av_format_set_audio_codec (NO direct access).
     */
    pub audio_codec: *mut AVCodec,
    /**
     * Forced subtitle codec.
     * This allows forcing a specific decoder, even when there are multiple with
     * the same codec_id.
     * Demuxing: Set by user via av_format_set_subtitle_codec (NO direct access).
     */
    pub subtitle_codec: *mut AVCodec,
    /**
     * Forced data codec.
     * This allows forcing a specific decoder, even when there are multiple with
     * the same codec_id.
     * Demuxing: Set by user via av_format_set_data_codec (NO direct access).
     */
    pub data_codec: *mut AVCodec,
    /**
     * Number of bytes to be written as padding in a metadata header.
     * Demuxing: Unused.
     * Muxing: Set by user via av_format_set_metadata_header_padding.
     */
    pub metadata_header_padding: ::std::os::raw::c_int,
    /**
     * User data.
     * This is a place for some private data of the user.
     * Mostly usable with control_message_cb or any future callbacks in device's context.
     */
    pub opaque: *mut ::std::os::raw::c_void,
    /**
     * Callback used by devices to communicate with application.
     */
    pub control_message_cb: av_format_control_message,
    /**
     * Output timestamp offset, in microseconds.
     * Muxing: set by user via AVOptions (NO direct access)
     */
    pub output_ts_offset: i64,
    pub max_analyze_duration2: i64,
    pub probesize2: i64,
    /**
     * dump format separator.
     * can be ", " or "\n      " or anything else
     * Code outside libavformat should access this field using AVOptions
     * (NO direct access).
     * - muxing: Set by user.
     * - demuxing: Set by user.
     */
    pub dump_separator: *mut u8,
    /**
     * Forced Data codec_id.
     * Demuxing: Set by user.
     */
    pub data_codec_id: AVCodecID,
    /**
     * Called to open further IO contexts when needed for demuxing.
     *
     * This can be set by the user application to perform security checks on
     * the URLs before opening them.
     * The function should behave like avio_open2(), AVFormatContext is provided
     * as contextual information and to reach AVFormatContext.opaque.
     *
     * If NULL then some simple checks are used together with avio_open2().
     *
     * Must not be accessed directly from outside avformat.
     * @See av_format_set_open_cb()
     *
     * Demuxing: Set by user.
     */
    pub open_cb: ::std::option::Option<unsafe extern "C" fn(s:
                                                                *mut AVFormatContext,
                                                            p:
                                                                *mut *mut AVIOContext,
                                                            url:
                                                                *const ::std::os::raw::c_char,
                                                            flags:
                                                                ::std::os::raw::c_int,
                                                            int_cb:
                                                                *const AVIOInterruptCB,
                                                            options:
                                                                *mut *mut AVDictionary)
                                           -> ::std::os::raw::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDeviceInfoList([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDeviceCapabilitiesQuery([u8; 0]);
extern "C" {
    /**
 * Allocate and read the payload of a packet and initialize its
 * fields with default values.
 *
 * @param s    associated IO context
 * @param pkt packet
 * @param size desired payload size
 * @return >0 (read size) if OK, AVERROR_xxx otherwise
 */
    pub fn av_get_packet(s: *mut AVIOContext, pkt: *mut AVPacket,
                         size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Read data and append it to the current content of the AVPacket.
 * If pkt->size is 0 this is identical to av_get_packet.
 * Note that this uses av_grow_packet and thus involves a realloc
 * which is inefficient. Thus this function should only be used
 * when there is no reasonable way to know (an upper bound of)
 * the final size.
 *
 * @param s    associated IO context
 * @param pkt packet
 * @param size amount of data to read
 * @return >0 (read size) if OK, AVERROR_xxx otherwise, previous data
 *         will not be lost even if an error occurs.
 */
    pub fn av_append_packet(s: *mut AVIOContext, pkt: *mut AVPacket,
                            size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
/**
 * The exact value of the fractional number is: 'val + num / den'.
 * num is assumed to be 0 <= num < den.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrac {
    pub val: i64,
    pub num: i64,
    pub den: i64,
}
#[test]
fn bindgen_test_layout_AVFrac() {
    assert_eq!(::std::mem::size_of::<AVFrac>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVFrac>() , 8usize);
}
impl Clone for AVFrac {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecTag([u8; 0]);
/**
 * This structure contains the data a format has to probe a file.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVProbeData {
    pub filename: *const ::std::os::raw::c_char,
    /**< Buffer must have AVPROBE_PADDING_SIZE of extra allocated bytes filled with zero. */
    pub buf: *mut ::std::os::raw::c_uchar,
    /**< Size of buf except extra allocated bytes */
    pub buf_size: ::std::os::raw::c_int,
    /**< mime_type, when known. */
    pub mime_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVProbeData() {
    assert_eq!(::std::mem::size_of::<AVProbeData>() , 32usize);
    assert_eq!(::std::mem::align_of::<AVProbeData>() , 8usize);
}
impl Clone for AVProbeData {
    fn clone(&self) -> Self { *self }
}
/**
 * @addtogroup lavf_encoding
 * @{
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVOutputFormat {
    pub name: *const ::std::os::raw::c_char,
    /**
     * Descriptive name for the format, meant to be more human-readable
     * than name. You should use the NULL_IF_CONFIG_SMALL() macro
     * to define it.
     */
    pub long_name: *const ::std::os::raw::c_char,
    pub mime_type: *const ::std::os::raw::c_char,
    /**< comma-separated filename extensions */
    pub extensions: *const ::std::os::raw::c_char,
    /**< default audio codec */
    pub audio_codec: AVCodecID,
    /**< default video codec */
    pub video_codec: AVCodecID,
    /**< default subtitle codec */
    pub subtitle_codec: AVCodecID,
    /**
     * can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_RAWPICTURE,
     * AVFMT_GLOBALHEADER, AVFMT_NOTIMESTAMPS, AVFMT_VARIABLE_FPS,
     * AVFMT_NODIMENSIONS, AVFMT_NOSTREAMS, AVFMT_ALLOW_FLUSH,
     * AVFMT_TS_NONSTRICT
     */
    pub flags: ::std::os::raw::c_int,
    /**
     * List of supported codec_id-codec_tag pairs, ordered by "better
     * choice first". The arrays are all terminated by AV_CODEC_ID_NONE.
     */
    pub codec_tag: *const *const AVCodecTag,
    ///< AVClass for the private context
    pub priv_class: *const AVClass,
    /*****************************************************************
     * No fields below this line are part of the public API. They
     * may not be used outside of libavformat and can be changed and
     * removed at will.
     * New public fields should be added right above.
     *****************************************************************
     */
    pub next: *mut AVOutputFormat,
    /**
     * size of private data so that it can be allocated in the wrapper
     */
    pub priv_data_size: ::std::os::raw::c_int,
    pub write_header: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut AVFormatContext)
                                                -> ::std::os::raw::c_int>,
    /**
     * Write a packet. If AVFMT_ALLOW_FLUSH is set in flags,
     * pkt can be NULL in order to flush data buffered in the muxer.
     * When flushing, return 0 if there still is more data to flush,
     * or 1 if everything was flushed and there is no more buffered
     * data.
     */
    pub write_packet: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut AVFormatContext,
                                                                 pkt:
                                                                     *mut AVPacket)
                                                -> ::std::os::raw::c_int>,
    pub write_trailer: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut AVFormatContext)
                                                 -> ::std::os::raw::c_int>,
    /**
     * Currently only used to set pixel format if not YUV420P.
     */
    pub interleave_packet: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut AVFormatContext,
                                                                      out:
                                                                          *mut AVPacket,
                                                                      in_:
                                                                          *mut AVPacket,
                                                                      flush:
                                                                          ::std::os::raw::c_int)
                                                     ->
                                                         ::std::os::raw::c_int>,
    /**
     * Test if the given codec can be stored in this container.
     *
     * @return 1 if the codec is supported, 0 if it is not.
     *         A negative number if unknown.
     *         MKTAG('A', 'P', 'I', 'C') if the codec is only supported as AV_DISPOSITION_ATTACHED_PIC
     */
    pub query_codec: ::std::option::Option<unsafe extern "C" fn(id: AVCodecID,
                                                                std_compliance:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    pub get_output_timestamp: ::std::option::Option<unsafe extern "C" fn(s:
                                                                             *mut AVFormatContext,
                                                                         stream:
                                                                             ::std::os::raw::c_int,
                                                                         dts:
                                                                             *mut i64,
                                                                         wall:
                                                                             *mut i64)>,
    /**
     * Allows sending messages from application to device.
     */
    pub control_message: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVFormatContext,
                                                                    type_:
                                                                        ::std::os::raw::c_int,
                                                                    data:
                                                                        *mut ::std::os::raw::c_void,
                                                                    data_size:
                                                                        usize)
                                                   -> ::std::os::raw::c_int>,
    /**
     * Write an uncoded AVFrame.
     *
     * See av_write_uncoded_frame() for details.
     *
     * The library will free *frame afterwards, but the muxer can prevent it
     * by setting the pointer to NULL.
     */
    pub write_uncoded_frame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut AVFormatContext,
                                                                        stream_index:
                                                                            ::std::os::raw::c_int,
                                                                        frame:
                                                                            *mut *mut AVFrame,
                                                                        flags:
                                                                            ::std::os::raw::c_uint)
                                                       ->
                                                           ::std::os::raw::c_int>,
    /**
     * Returns device list with it properties.
     * @see avdevice_list_devices() for more details.
     */
    pub get_device_list: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVFormatContext,
                                                                    device_list:
                                                                        *mut AVDeviceInfoList)
                                                   -> ::std::os::raw::c_int>,
    /**
     * Initialize device capabilities submodule.
     * @see avdevice_capabilities_create() for more details.
     */
    pub create_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                   *mut AVFormatContext,
                                                                               caps:
                                                                                   *mut AVDeviceCapabilitiesQuery)
                                                              ->
                                                                  ::std::os::raw::c_int>,
    /**
     * Free device capabilities submodule.
     * @see avdevice_capabilities_free() for more details.
     */
    pub free_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                 *mut AVFormatContext,
                                                                             caps:
                                                                                 *mut AVDeviceCapabilitiesQuery)
                                                            ->
                                                                ::std::os::raw::c_int>,
    /**< default data codec */
    pub data_codec: AVCodecID,
}
#[test]
fn bindgen_test_layout_AVOutputFormat() {
    assert_eq!(::std::mem::size_of::<AVOutputFormat>() , 176usize);
    assert_eq!(::std::mem::align_of::<AVOutputFormat>() , 8usize);
}
impl Clone for AVOutputFormat {
    fn clone(&self) -> Self { *self }
}
/**
 * @addtogroup lavf_decoding
 * @{
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVInputFormat {
    /**
     * A comma separated list of short names for the format. New names
     * may be appended with a minor bump.
     */
    pub name: *const ::std::os::raw::c_char,
    /**
     * Descriptive name for the format, meant to be more human-readable
     * than name. You should use the NULL_IF_CONFIG_SMALL() macro
     * to define it.
     */
    pub long_name: *const ::std::os::raw::c_char,
    /**
     * Can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_SHOW_IDS,
     * AVFMT_GENERIC_INDEX, AVFMT_TS_DISCONT, AVFMT_NOBINSEARCH,
     * AVFMT_NOGENSEARCH, AVFMT_NO_BYTE_SEEK, AVFMT_SEEK_TO_PTS.
     */
    pub flags: ::std::os::raw::c_int,
    /**
     * If extensions are defined, then no probe is done. You should
     * usually not use extension format guessing because it is not
     * reliable enough
     */
    pub extensions: *const ::std::os::raw::c_char,
    pub codec_tag: *const *const AVCodecTag,
    ///< AVClass for the private context
    pub priv_class: *const AVClass,
    /**
     * Comma-separated list of mime types.
     * It is used check for matching mime types while probing.
     * @see av_probe_input_format2
     */
    pub mime_type: *const ::std::os::raw::c_char,
    /*****************************************************************
     * No fields below this line are part of the public API. They
     * may not be used outside of libavformat and can be changed and
     * removed at will.
     * New public fields should be added right above.
     *****************************************************************
     */
    pub next: *mut AVInputFormat,
    /**
     * Raw demuxers store their codec ID here.
     */
    pub raw_codec_id: ::std::os::raw::c_int,
    /**
     * Size of private data so that it can be allocated in the wrapper.
     */
    pub priv_data_size: ::std::os::raw::c_int,
    /**
     * Tell if a given file has a chance of being parsed as this format.
     * The buffer provided is guaranteed to be AVPROBE_PADDING_SIZE bytes
     * big so you do not have to check for that unless you need more.
     */
    pub read_probe: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVProbeData)
                                              -> ::std::os::raw::c_int>,
    /**
     * Read the format header and initialize the AVFormatContext
     * structure. Return 0 if OK. 'avformat_new_stream' should be
     * called to create new streams.
     */
    pub read_header: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut AVFormatContext)
                                               -> ::std::os::raw::c_int>,
    /**
     * Read one packet and put it in 'pkt'. pts and flags are also
     * set. 'avformat_new_stream' can be called only if the flag
     * AVFMTCTX_NOHEADER is used and only in the calling thread (not in a
     * background thread).
     * @return 0 on success, < 0 on error.
     *         When returning an error, pkt must not have been allocated
     *         or must be freed before returning
     */
    pub read_packet: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut AVFormatContext,
                                                                pkt:
                                                                    *mut AVPacket)
                                               -> ::std::os::raw::c_int>,
    /**
     * Close the stream. The AVFormatContext and AVStreams are not
     * freed by this function
     */
    pub read_close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVFormatContext)
                                              -> ::std::os::raw::c_int>,
    /**
     * Seek to a given timestamp relative to the frames in
     * stream component stream_index.
     * @param stream_index Must not be -1.
     * @param flags Selects which direction should be preferred if no exact
     *              match is available.
     * @return >= 0 on success (but not necessarily the new offset)
     */
    pub read_seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut AVFormatContext,
                                                              stream_index:
                                                                  ::std::os::raw::c_int,
                                                              timestamp: i64,
                                                              flags:
                                                                  ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_int>,
    /**
     * Get the next timestamp in stream[stream_index].time_base units.
     * @return the timestamp or AV_NOPTS_VALUE if an error occurred
     */
    pub read_timestamp: ::std::option::Option<unsafe extern "C" fn(s:
                                                                       *mut AVFormatContext,
                                                                   stream_index:
                                                                       ::std::os::raw::c_int,
                                                                   pos:
                                                                       *mut i64,
                                                                   pos_limit:
                                                                       i64)
                                                  -> ::std::os::raw::c_long>,
    /**
     * Start/resume playing - only meaningful if using a network-based format
     * (RTSP).
     */
    pub read_play: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut AVFormatContext)
                                             -> ::std::os::raw::c_int>,
    /**
     * Pause playing - only meaningful if using a network-based format
     * (RTSP).
     */
    pub read_pause: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVFormatContext)
                                              -> ::std::os::raw::c_int>,
    /**
     * Seek to timestamp ts.
     * Seeking will be done so that the point from which all active streams
     * can be presented successfully will be closest to ts and within min/max_ts.
     * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.
     */
    pub read_seek2: ::std::option::Option<unsafe extern "C" fn(s:
                                                                   *mut AVFormatContext,
                                                               stream_index:
                                                                   ::std::os::raw::c_int,
                                                               min_ts: i64,
                                                               ts: i64,
                                                               max_ts: i64,
                                                               flags:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    /**
     * Returns device list with it properties.
     * @see avdevice_list_devices() for more details.
     */
    pub get_device_list: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVFormatContext,
                                                                    device_list:
                                                                        *mut AVDeviceInfoList)
                                                   -> ::std::os::raw::c_int>,
    /**
     * Initialize device capabilities submodule.
     * @see avdevice_capabilities_create() for more details.
     */
    pub create_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                   *mut AVFormatContext,
                                                                               caps:
                                                                                   *mut AVDeviceCapabilitiesQuery)
                                                              ->
                                                                  ::std::os::raw::c_int>,
    /**
     * Free device capabilities submodule.
     * @see avdevice_capabilities_free() for more details.
     */
    pub free_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                 *mut AVFormatContext,
                                                                             caps:
                                                                                 *mut AVDeviceCapabilitiesQuery)
                                                            ->
                                                                ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_AVInputFormat() {
    assert_eq!(::std::mem::size_of::<AVInputFormat>() , 168usize);
    assert_eq!(::std::mem::align_of::<AVInputFormat>() , 8usize);
}
impl Clone for AVInputFormat {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
/**
 * @}
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVStreamParseType {
    AVSTREAM_PARSE_NONE = 0,
    AVSTREAM_PARSE_FULL = 1,
    AVSTREAM_PARSE_HEADERS = 2,
    AVSTREAM_PARSE_TIMESTAMPS = 3,
    AVSTREAM_PARSE_FULL_ONCE = 4,
    AVSTREAM_PARSE_FULL_RAW = 1463898624,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIndexEntry {
    pub pos: i64,
    /**<
                               * Timestamp in AVStream.time_base units, preferably the time from which on correctly decoded frames are available
                               * when seeking to this entry. That means preferable PTS on keyframe based formats.
                               * But demuxers can choose to store a different timestamp, if it is more convenient for the implementation or nothing better
                               * is known
                               */
    pub timestamp: i64,
    pub _bitfield_1: u32,
    /**< Minimum distance between this and the previous keyframe, used to avoid unneeded searching. */
    pub min_distance: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVIndexEntry() {
    assert_eq!(::std::mem::size_of::<AVIndexEntry>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVIndexEntry>() , 8usize);
}
impl Clone for AVIndexEntry {
    fn clone(&self) -> Self { *self }
}
impl AVIndexEntry {
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (3usize as u32)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_int) {
        self._bitfield_1 &= !(3usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 0u32) & (3usize as u32);
    }
    #[inline]
    pub fn size(&self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294967292usize as u32)) >> 2u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_size(&mut self, val: ::std::os::raw::c_int) {
        self._bitfield_1 &= !(4294967292usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 2u32) & (4294967292usize as u32);
    }
}
/**
 * Stream structure.
 * New fields can be added to the end with minor version bumps.
 * Removal, reordering and changes to existing fields require a major
 * version bump.
 * sizeof(AVStream) must not be used outside libav*.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVStream {
    /**< stream index in AVFormatContext */
    pub index: ::std::os::raw::c_int,
    /**
     * Format-specific stream ID.
     * decoding: set by libavformat
     * encoding: set by the user, replaced by libavformat if left unset
     */
    pub id: ::std::os::raw::c_int,
    /**
     * Codec context associated with this stream. Allocated and freed by
     * libavformat.
     *
     * - decoding: The demuxer exports codec information stored in the headers
     *             here.
     * - encoding: The user sets codec information, the muxer writes it to the
     *             output. Mandatory fields as specified in AVCodecContext
     *             documentation must be set even if this AVCodecContext is
     *             not actually used for encoding.
     */
    pub codec: *mut AVCodecContext,
    pub priv_data: *mut ::std::os::raw::c_void,
    /**
     * @deprecated this field is unused
     */
    pub pts: AVFrac,
    /**
     * This is the fundamental unit of time (in seconds) in terms
     * of which frame timestamps are represented.
     *
     * decoding: set by libavformat
     * encoding: May be set by the caller before avformat_write_header() to
     *           provide a hint to the muxer about the desired timebase. In
     *           avformat_write_header(), the muxer will overwrite this field
     *           with the timebase that will actually be used for the timestamps
     *           written into the file (which may or may not be related to the
     *           user-provided one, depending on the format).
     */
    pub time_base: AVRational,
    /**
     * Decoding: pts of the first frame of the stream in presentation order, in stream time base.
     * Only set this if you are absolutely 100% sure that the value you set
     * it to really is the pts of the first frame.
     * This may be undefined (AV_NOPTS_VALUE).
     * @note The ASF header does NOT contain a correct start_time the ASF
     * demuxer must NOT set this.
     */
    pub start_time: i64,
    /**
     * Decoding: duration of the stream, in stream time base.
     * If a source file does not specify a duration, but does specify
     * a bitrate, this value will be estimated from bitrate and file size.
     */
    pub duration: i64,
    ///< number of frames in this stream if known or 0
    pub nb_frames: i64,
    /**< AV_DISPOSITION_* bit field */
    pub disposition: ::std::os::raw::c_int,
    ///< Selects which packets can be discarded at will and do not need to be demuxed.
    pub discard: AVDiscard,
    /**
     * sample aspect ratio (0 if unknown)
     * - encoding: Set by user.
     * - decoding: Set by libavformat.
     */
    pub sample_aspect_ratio: AVRational,
    pub metadata: *mut AVDictionary,
    /**
     * Average framerate
     *
     * - demuxing: May be set by libavformat when creating the stream or in
     *             avformat_find_stream_info().
     * - muxing: May be set by the caller before avformat_write_header().
     */
    pub avg_frame_rate: AVRational,
    /**
     * For streams with AV_DISPOSITION_ATTACHED_PIC disposition, this packet
     * will contain the attached picture.
     *
     * decoding: set by libavformat, must not be modified by the caller.
     * encoding: unused
     */
    pub attached_pic: AVPacket,
    /**
     * An array of side data that applies to the whole stream (i.e. the
     * container does not allow it to change between packets).
     *
     * There may be no overlap between the side data in this array and side data
     * in the packets. I.e. a given side data is either exported by the muxer
     * (demuxing) / set by the caller (muxing) in this array, then it never
     * appears in the packets, or the side data is exported / sent through
     * the packets (always in the first packet where the value becomes known or
     * changes), then it does not appear in this array.
     *
     * - demuxing: Set by libavformat when the stream is created.
     * - muxing: May be set by the caller before avformat_write_header().
     *
     * Freed by libavformat in avformat_free_context().
     *
     * @see av_format_inject_global_side_data()
     */
    pub side_data: *mut AVPacketSideData,
    /**
     * The number of elements in the AVStream.side_data array.
     */
    pub nb_side_data: ::std::os::raw::c_int,
    /**
     * Flags for the user to detect events happening on the stream. Flags must
     * be cleared by the user once the event has been handled.
     * A combination of AVSTREAM_EVENT_FLAG_*.
     */
    pub event_flags: ::std::os::raw::c_int,
    pub info: *mut AVStream__bindgen_ty_1,
    /**< number of bits in pts (used for wrapping control) */
    pub pts_wrap_bits: ::std::os::raw::c_int,
    /**
     * Timestamp corresponding to the last dts sync point.
     *
     * Initialized when AVCodecParserContext.dts_sync_point >= 0 and
     * a DTS is received from the underlying container. Otherwise set to
     * AV_NOPTS_VALUE by default.
     */
    pub first_dts: i64,
    pub cur_dts: i64,
    pub last_IP_pts: i64,
    pub last_IP_duration: ::std::os::raw::c_int,
    /**
     * Number of packets to buffer for codec probing
     */
    pub probe_packets: ::std::os::raw::c_int,
    /**
     * Number of frames that have been demuxed during av_find_stream_info()
     */
    pub codec_info_nb_frames: ::std::os::raw::c_int,
    pub need_parsing: AVStreamParseType,
    pub parser: *mut AVCodecParserContext,
    /**
     * last packet in packet_buffer for this stream when muxing.
     */
    pub last_in_packet_buffer: *mut AVStream_AVPacketList,
    pub probe_data: AVProbeData,
    pub pts_buffer: [i64; 17usize],
    /**< Only used if the format does not
                                    support seeking natively. */
    pub index_entries: *mut AVIndexEntry,
    pub nb_index_entries: ::std::os::raw::c_int,
    pub index_entries_allocated_size: ::std::os::raw::c_uint,
    /**
     * Real base framerate of the stream.
     * This is the lowest framerate with which all timestamps can be
     * represented accurately (it is the least common multiple of all
     * framerates in the stream). Note, this value is just a guess!
     * For example, if the time base is 1/90000 and all frames have either
     * approximately 3600 or 1800 timer ticks, then r_frame_rate will be 50/1.
     *
     * Code outside avformat should access this field using:
     * av_stream_get/set_r_frame_rate(stream)
     */
    pub r_frame_rate: AVRational,
    /**
     * Stream Identifier
     * This is the MPEG-TS stream identifier +1
     * 0 means unknown
     */
    pub stream_identifier: ::std::os::raw::c_int,
    pub interleaver_chunk_size: i64,
    pub interleaver_chunk_duration: i64,
    /**
     * stream probing state
     * -1   -> probing finished
     *  0   -> no probing requested
     * rest -> perform probing with request_probe being the minimum score to accept.
     * NOT PART OF PUBLIC API
     */
    pub request_probe: ::std::os::raw::c_int,
    /**
     * Indicates that everything up to the next keyframe
     * should be discarded.
     */
    pub skip_to_keyframe: ::std::os::raw::c_int,
    /**
     * Number of samples to skip at the start of the frame decoded from the next packet.
     */
    pub skip_samples: ::std::os::raw::c_int,
    /**
     * If not 0, the number of samples that should be skipped from the start of
     * the stream (the samples are removed from packets with pts==0, which also
     * assumes negative timestamps do not happen).
     * Intended for use with formats such as mp3 with ad-hoc gapless audio
     * support.
     */
    pub start_skip_samples: i64,
    /**
     * If not 0, the first audio sample that should be discarded from the stream.
     * This is broken by design (needs global sample count), but can't be
     * avoided for broken by design formats such as mp3 with ad-hoc gapless
     * audio support.
     */
    pub first_discard_sample: i64,
    /**
     * The sample after last sample that is intended to be discarded after
     * first_discard_sample. Works on frame boundaries only. Used to prevent
     * early EOF if the gapless info is broken (considered concatenated mp3s).
     */
    pub last_discard_sample: i64,
    /**
     * Number of internally decoded frames, used internally in libavformat, do not access
     * its lifetime differs from info which is why it is not in that structure.
     */
    pub nb_decoded_frames: ::std::os::raw::c_int,
    /**
     * Timestamp offset added to timestamps before muxing
     * NOT PART OF PUBLIC API
     */
    pub mux_ts_offset: i64,
    /**
     * Internal data to check for wrapping of the time stamp
     */
    pub pts_wrap_reference: i64,
    /**
     * Options for behavior, when a wrap is detected.
     *
     * Defined by AV_PTS_WRAP_ values.
     *
     * If correction is enabled, there are two possibilities:
     * If the first time stamp is near the wrap point, the wrap offset
     * will be subtracted, which will create negative time stamps.
     * Otherwise the offset will be added.
     */
    pub pts_wrap_behavior: ::std::os::raw::c_int,
    /**
     * Internal data to prevent doing update_initial_durations() twice
     */
    pub update_initial_durations_done: ::std::os::raw::c_int,
    /**
     * Internal data to generate dts from pts
     */
    pub pts_reorder_error: [i64; 17usize],
    pub pts_reorder_error_count: [u8; 17usize],
    /**
     * Internal data to analyze DTS and detect faulty mpeg streams
     */
    pub last_dts_for_order_check: i64,
    pub dts_ordered: u8,
    pub dts_misordered: u8,
    /**
     * Internal data to inject global side data
     */
    pub inject_global_side_data: ::std::os::raw::c_int,
    /**
     * String containing paris of key and values describing recommended encoder configuration.
     * Paris are separated by ','.
     * Keys are separated from values by '='.
     */
    pub recommended_encoder_configuration: *mut ::std::os::raw::c_char,
    /**
     * display aspect ratio (0 if unknown)
     * - encoding: unused
     * - decoding: Set by libavformat to calculate sample_aspect_ratio internally
     */
    pub display_aspect_ratio: AVRational,
    pub priv_pts: *mut AVStream_FFFrac,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVStream__bindgen_ty_1 {
    pub last_dts: i64,
    pub duration_gcd: i64,
    pub duration_count: ::std::os::raw::c_int,
    pub rfps_duration_sum: i64,
    pub duration_error: *mut [[f64; 399usize]; 2usize],
    pub codec_info_duration: i64,
    pub codec_info_duration_fields: i64,
    /**
         * 0  -> decoder has not been searched for yet.
         * >0 -> decoder found
         * <0 -> decoder with codec_id == -found_decoder has not been found
         */
    pub found_decoder: ::std::os::raw::c_int,
    pub last_duration: i64,
    /**
         * Those are used for average framerate estimation.
         */
    pub fps_first_dts: i64,
    pub fps_first_dts_idx: ::std::os::raw::c_int,
    pub fps_last_dts: i64,
    pub fps_last_dts_idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVStream__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<AVStream__bindgen_ty_1>() , 104usize);
    assert_eq!(::std::mem::align_of::<AVStream__bindgen_ty_1>() , 8usize);
}
impl Clone for AVStream__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVStream_AVPacketList {
    pub pkt: AVPacket,
    pub next: *mut AVStream_AVPacketList,
}
#[test]
fn bindgen_test_layout_AVStream_AVPacketList() {
    assert_eq!(::std::mem::size_of::<AVStream_AVPacketList>() , 104usize);
    assert_eq!(::std::mem::align_of::<AVStream_AVPacketList>() , 8usize);
}
impl Clone for AVStream_AVPacketList {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVStream_FFFrac([u8; 0]);
impl Clone for AVStream {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_stream_get_r_frame_rate(s: *const AVStream) -> AVRational;
}
extern "C" {
    pub fn av_stream_set_r_frame_rate(s: *mut AVStream, r: AVRational);
}
extern "C" {
    pub fn av_stream_get_parser(s: *const AVStream)
     -> *mut AVCodecParserContext;
}
extern "C" {
    pub fn av_stream_get_recommended_encoder_configuration(s: *const AVStream)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_stream_set_recommended_encoder_configuration(s: *mut AVStream,
                                                           configuration:
                                                               *mut ::std::os::raw::c_char);
}
extern "C" {
    /**
 * Returns the pts of the last muxed packet + its duration
 *
 * the retuned value is undefined when used with a demuxer.
 */
    pub fn av_stream_get_end_pts(st: *const AVStream) -> i64;
}
/**
 * New fields can be added to the end with minor version bumps.
 * Removal, reordering and changes to existing fields require a major
 * version bump.
 * sizeof(AVProgram) must not be used outside libav*.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVProgram {
    pub id: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    ///< selects which program to discard and which to feed to the caller
    pub discard: AVDiscard,
    pub stream_index: *mut ::std::os::raw::c_uint,
    pub nb_stream_indexes: ::std::os::raw::c_uint,
    pub metadata: *mut AVDictionary,
    pub program_num: ::std::os::raw::c_int,
    pub pmt_pid: ::std::os::raw::c_int,
    pub pcr_pid: ::std::os::raw::c_int,
    /*****************************************************************
     * All fields below this line are not part of the public API. They
     * may not be used outside of libavformat and can be changed and
     * removed at will.
     * New public fields should be added right above.
     *****************************************************************
     */
    pub start_time: i64,
    pub end_time: i64,
    ///< reference dts for wrap detection
    pub pts_wrap_reference: i64,
    ///< behavior on wrap detection
    pub pts_wrap_behavior: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVProgram() {
    assert_eq!(::std::mem::size_of::<AVProgram>() , 88usize);
    assert_eq!(::std::mem::align_of::<AVProgram>() , 8usize);
}
impl Clone for AVProgram {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVChapter {
    ///< unique ID to identify the chapter
    pub id: ::std::os::raw::c_int,
    ///< time base in which the start/end timestamps are specified
    pub time_base: AVRational,
    ///< chapter start/end time in time_base units
    pub start: i64,
    ///< chapter start/end time in time_base units
    pub end: i64,
    pub metadata: *mut AVDictionary,
}
#[test]
fn bindgen_test_layout_AVChapter() {
    assert_eq!(::std::mem::size_of::<AVChapter>() , 40usize);
    assert_eq!(::std::mem::align_of::<AVChapter>() , 8usize);
}
impl Clone for AVChapter {
    fn clone(&self) -> Self { *self }
}
/**
 * Callback used by devices to communicate with application.
 */
pub type av_format_control_message =
    ::std::option::Option<unsafe extern "C" fn(s: *mut AVFormatContext,
                                               type_: ::std::os::raw::c_int,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               data_size: usize)
                              -> ::std::os::raw::c_int>;
pub type AVOpenCallback =
    ::std::option::Option<unsafe extern "C" fn(s: *mut AVFormatContext,
                                               pb: *mut *mut AVIOContext,
                                               url:
                                                   *const ::std::os::raw::c_char,
                                               flags: ::std::os::raw::c_int,
                                               int_cb: *const AVIOInterruptCB,
                                               options:
                                                   *mut *mut AVDictionary)
                              -> ::std::os::raw::c_int>;
#[repr(u32)]
/**
 * The duration of a video can be estimated through various ways, and this enum can be used
 * to know how the duration was estimated.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVDurationEstimationMethod {
    AVFMT_DURATION_FROM_PTS = 0,
    AVFMT_DURATION_FROM_STREAM = 1,
    AVFMT_DURATION_FROM_BITRATE = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVFormatInternal([u8; 0]);
extern "C" {
    pub fn av_format_get_probe_score(s: *const AVFormatContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_format_get_video_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_video_codec(s: *mut AVFormatContext,
                                     c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_audio_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_audio_codec(s: *mut AVFormatContext,
                                     c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_subtitle_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_subtitle_codec(s: *mut AVFormatContext,
                                        c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_data_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_data_codec(s: *mut AVFormatContext, c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_metadata_header_padding(s: *const AVFormatContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_format_set_metadata_header_padding(s: *mut AVFormatContext,
                                                 c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_format_get_opaque(s: *const AVFormatContext)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_format_set_opaque(s: *mut AVFormatContext,
                                opaque: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn av_format_get_control_message_cb(s: *const AVFormatContext)
     -> av_format_control_message;
}
extern "C" {
    pub fn av_format_set_control_message_cb(s: *mut AVFormatContext,
                                            callback:
                                                av_format_control_message);
}
extern "C" {
    pub fn av_format_get_open_cb(s: *const AVFormatContext) -> AVOpenCallback;
}
extern "C" {
    pub fn av_format_set_open_cb(s: *mut AVFormatContext,
                                 callback: AVOpenCallback);
}
extern "C" {
    /**
 * This function will cause global side data to be injected in the next packet
 * of each stream as well as after any subsequent seek.
 */
    pub fn av_format_inject_global_side_data(s: *mut AVFormatContext);
}
extern "C" {
    /**
 * Returns the method used to set ctx->duration.
 *
 * @return AVFMT_DURATION_FROM_PTS, AVFMT_DURATION_FROM_STREAM, or AVFMT_DURATION_FROM_BITRATE.
 */
    pub fn av_fmt_ctx_get_duration_estimation_method(ctx:
                                                         *const AVFormatContext)
     -> AVDurationEstimationMethod;
}
pub type AVPacketList = AVStream_AVPacketList;
extern "C" {
    /**
 * Return the LIBAVFORMAT_VERSION_INT constant.
 */
    pub fn avformat_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * Return the libavformat build-time configuration.
 */
    pub fn avformat_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Return the libavformat license.
 */
    pub fn avformat_license() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**
 * Initialize libavformat and register all the muxers, demuxers and
 * protocols. If you do not call this function, then you can select
 * exactly which formats you want to support.
 *
 * @see av_register_input_format()
 * @see av_register_output_format()
 */
    pub fn av_register_all();
}
extern "C" {
    pub fn av_register_input_format(format: *mut AVInputFormat);
}
extern "C" {
    pub fn av_register_output_format(format: *mut AVOutputFormat);
}
extern "C" {
    /**
 * Do global initialization of network components. This is optional,
 * but recommended, since it avoids the overhead of implicitly
 * doing the setup for each session.
 *
 * Calling this function will become mandatory if using network
 * protocols at some major version bump.
 */
    pub fn avformat_network_init() -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Undo the initialization done by avformat_network_init.
 */
    pub fn avformat_network_deinit() -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * If f is NULL, returns the first registered input format,
 * if f is non-NULL, returns the next registered input format after f
 * or NULL if f is the last one.
 */
    pub fn av_iformat_next(f: *const AVInputFormat) -> *mut AVInputFormat;
}
extern "C" {
    /**
 * If f is NULL, returns the first registered output format,
 * if f is non-NULL, returns the next registered output format after f
 * or NULL if f is the last one.
 */
    pub fn av_oformat_next(f: *const AVOutputFormat) -> *mut AVOutputFormat;
}
extern "C" {
    /**
 * Allocate an AVFormatContext.
 * avformat_free_context() can be used to free the context and everything
 * allocated by the framework within it.
 */
    pub fn avformat_alloc_context() -> *mut AVFormatContext;
}
extern "C" {
    /**
 * Free an AVFormatContext and all its streams.
 * @param s context to free
 */
    pub fn avformat_free_context(s: *mut AVFormatContext);
}
extern "C" {
    /**
 * Get the AVClass for AVFormatContext. It can be used in combination with
 * AV_OPT_SEARCH_FAKE_OBJ for examining options.
 *
 * @see av_opt_find().
 */
    pub fn avformat_get_class() -> *const AVClass;
}
extern "C" {
    /**
 * Add a new stream to a media file.
 *
 * When demuxing, it is called by the demuxer in read_header(). If the
 * flag AVFMTCTX_NOHEADER is set in s.ctx_flags, then it may also
 * be called in read_packet().
 *
 * When muxing, should be called by the user before avformat_write_header().
 *
 * User is required to call avcodec_close() and avformat_free_context() to
 * clean up the allocation by avformat_new_stream().
 *
 * @param s media file handle
 * @param c If non-NULL, the AVCodecContext corresponding to the new stream
 * will be initialized to use this codec. This is needed for e.g. codec-specific
 * defaults to be set, so codec should be provided if it is known.
 *
 * @return newly created stream or NULL on error.
 */
    pub fn avformat_new_stream(s: *mut AVFormatContext, c: *const AVCodec)
     -> *mut AVStream;
}
extern "C" {
    /**
 * Get side information from stream.
 *
 * @param stream stream
 * @param type desired side information type
 * @param size pointer for side information size to store (optional)
 * @return pointer to data if present or NULL otherwise
 */
    pub fn av_stream_get_side_data(stream: *mut AVStream,
                                   type_: AVPacketSideDataType,
                                   size: *mut ::std::os::raw::c_int)
     -> *mut u8;
}
extern "C" {
    pub fn av_new_program(s: *mut AVFormatContext, id: ::std::os::raw::c_int)
     -> *mut AVProgram;
}
extern "C" {
    /**
 * Allocate an AVFormatContext for an output format.
 * avformat_free_context() can be used to free the context and
 * everything allocated by the framework within it.
 *
 * @param *ctx is set to the created format context, or to NULL in
 * case of failure
 * @param oformat format to use for allocating the context, if NULL
 * format_name and filename are used instead
 * @param format_name the name of output format to use for allocating the
 * context, if NULL filename is used instead
 * @param filename the name of the filename to use for allocating the
 * context, may be NULL
 * @return >= 0 in case of success, a negative AVERROR code in case of
 * failure
 */
    pub fn avformat_alloc_output_context2(ctx: *mut *mut AVFormatContext,
                                          oformat: *mut AVOutputFormat,
                                          format_name:
                                              *const ::std::os::raw::c_char,
                                          filename:
                                              *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Find AVInputFormat based on the short name of the input format.
 */
    pub fn av_find_input_format(short_name: *const ::std::os::raw::c_char)
     -> *mut AVInputFormat;
}
extern "C" {
    /**
 * Guess the file format.
 *
 * @param pd        data to be probed
 * @param is_opened Whether the file is already opened; determines whether
 *                  demuxers with or without AVFMT_NOFILE are probed.
 */
    pub fn av_probe_input_format(pd: *mut AVProbeData,
                                 is_opened: ::std::os::raw::c_int)
     -> *mut AVInputFormat;
}
extern "C" {
    /**
 * Guess the file format.
 *
 * @param pd        data to be probed
 * @param is_opened Whether the file is already opened; determines whether
 *                  demuxers with or without AVFMT_NOFILE are probed.
 * @param score_max A probe score larger that this is required to accept a
 *                  detection, the variable is set to the actual detection
 *                  score afterwards.
 *                  If the score is <= AVPROBE_SCORE_MAX / 4 it is recommended
 *                  to retry with a larger probe buffer.
 */
    pub fn av_probe_input_format2(pd: *mut AVProbeData,
                                  is_opened: ::std::os::raw::c_int,
                                  score_max: *mut ::std::os::raw::c_int)
     -> *mut AVInputFormat;
}
extern "C" {
    /**
 * Guess the file format.
 *
 * @param is_opened Whether the file is already opened; determines whether
 *                  demuxers with or without AVFMT_NOFILE are probed.
 * @param score_ret The score of the best detection.
 */
    pub fn av_probe_input_format3(pd: *mut AVProbeData,
                                  is_opened: ::std::os::raw::c_int,
                                  score_ret: *mut ::std::os::raw::c_int)
     -> *mut AVInputFormat;
}
extern "C" {
    /**
 * Probe a bytestream to determine the input format. Each time a probe returns
 * with a score that is too low, the probe buffer size is increased and another
 * attempt is made. When the maximum probe size is reached, the input format
 * with the highest score is returned.
 *
 * @param pb the bytestream to probe
 * @param fmt the input format is put here
 * @param url the url of the stream
 * @param logctx the log context
 * @param offset the offset within the bytestream to probe from
 * @param max_probe_size the maximum probe buffer size (zero for default)
 * @return the score in case of success, a negative value corresponding to an
 *         the maximal score is AVPROBE_SCORE_MAX
 * AVERROR code otherwise
 */
    pub fn av_probe_input_buffer2(pb: *mut AVIOContext,
                                  fmt: *mut *mut AVInputFormat,
                                  url: *const ::std::os::raw::c_char,
                                  logctx: *mut ::std::os::raw::c_void,
                                  offset: ::std::os::raw::c_uint,
                                  max_probe_size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Like av_probe_input_buffer2() but returns 0 on success
 */
    pub fn av_probe_input_buffer(pb: *mut AVIOContext,
                                 fmt: *mut *mut AVInputFormat,
                                 url: *const ::std::os::raw::c_char,
                                 logctx: *mut ::std::os::raw::c_void,
                                 offset: ::std::os::raw::c_uint,
                                 max_probe_size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Open an input stream and read the header. The codecs are not opened.
 * The stream must be closed with avformat_close_input().
 *
 * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).
 *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this
 *           function and written into ps.
 *           Note that a user-supplied AVFormatContext will be freed on failure.
 * @param url URL of the stream to open.
 * @param fmt If non-NULL, this parameter forces a specific input format.
 *            Otherwise the format is autodetected.
 * @param options  A dictionary filled with AVFormatContext and demuxer-private options.
 *                 On return this parameter will be destroyed and replaced with a dict containing
 *                 options that were not found. May be NULL.
 *
 * @return 0 on success, a negative AVERROR on failure.
 *
 * @note If you want to use custom IO, preallocate the format context and set its pb field.
 */
    pub fn avformat_open_input(ps: *mut *mut AVFormatContext,
                               url: *const ::std::os::raw::c_char,
                               fmt: *mut AVInputFormat,
                               options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_demuxer_open(ic: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Read packets of a media file to get stream information. This
 * is useful for file formats with no headers such as MPEG. This
 * function also computes the real framerate in case of MPEG-2 repeat
 * frame mode.
 * The logical file position is not changed by this function;
 * examined packets may be buffered for later processing.
 *
 * @param ic media file handle
 * @param options  If non-NULL, an ic.nb_streams long array of pointers to
 *                 dictionaries, where i-th member contains options for
 *                 codec corresponding to i-th stream.
 *                 On return each dictionary will be filled with options that were not found.
 * @return >=0 if OK, AVERROR_xxx on error
 *
 * @note this function isn't guaranteed to open all the codecs, so
 *       options being non-empty at return is a perfectly normal behavior.
 *
 * @todo Let the user decide somehow what information is needed so that
 *       we do not waste time getting stuff the user does not need.
 */
    pub fn avformat_find_stream_info(ic: *mut AVFormatContext,
                                     options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Find the programs which belong to a given stream.
 *
 * @param ic    media file handle
 * @param last  the last found program, the search will start after this
 *              program, or from the beginning if it is NULL
 * @param s     stream index
 * @return the next program which belongs to s, NULL if no program is found or
 *         the last program is not among the programs of ic.
 */
    pub fn av_find_program_from_stream(ic: *mut AVFormatContext,
                                       last: *mut AVProgram,
                                       s: ::std::os::raw::c_int)
     -> *mut AVProgram;
}
extern "C" {
    /**
 * Find the "best" stream in the file.
 * The best stream is determined according to various heuristics as the most
 * likely to be what the user expects.
 * If the decoder parameter is non-NULL, av_find_best_stream will find the
 * default decoder for the stream's codec; streams for which no decoder can
 * be found are ignored.
 *
 * @param ic                media file handle
 * @param type              stream type: video, audio, subtitles, etc.
 * @param wanted_stream_nb  user-requested stream number,
 *                          or -1 for automatic selection
 * @param related_stream    try to find a stream related (eg. in the same
 *                          program) to this one, or -1 if none
 * @param decoder_ret       if non-NULL, returns the decoder for the
 *                          selected stream
 * @param flags             flags; none are currently defined
 * @return  the non-negative stream number in case of success,
 *          AVERROR_STREAM_NOT_FOUND if no stream with the requested type
 *          could be found,
 *          AVERROR_DECODER_NOT_FOUND if streams were found but no decoder
 * @note  If av_find_best_stream returns successfully and decoder_ret is not
 *        NULL, then *decoder_ret is guaranteed to be set to a valid AVCodec.
 */
    pub fn av_find_best_stream(ic: *mut AVFormatContext, type_: AVMediaType,
                               wanted_stream_nb: ::std::os::raw::c_int,
                               related_stream: ::std::os::raw::c_int,
                               decoder_ret: *mut *mut AVCodec,
                               flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return the next frame of a stream.
 * This function returns what is stored in the file, and does not validate
 * that what is there are valid frames for the decoder. It will split what is
 * stored in the file into frames and return one for each call. It will not
 * omit invalid data between valid frames so as to give the decoder the maximum
 * information possible for decoding.
 *
 * If pkt->buf is NULL, then the packet is valid until the next
 * av_read_frame() or until avformat_close_input(). Otherwise the packet
 * is valid indefinitely. In both cases the packet must be freed with
 * av_free_packet when it is no longer needed. For video, the packet contains
 * exactly one frame. For audio, it contains an integer number of frames if each
 * frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames
 * have a variable size (e.g. MPEG audio), then it contains one frame.
 *
 * pkt->pts, pkt->dts and pkt->duration are always set to correct
 * values in AVStream.time_base units (and guessed if the format cannot
 * provide them). pkt->pts can be AV_NOPTS_VALUE if the video format
 * has B-frames, so it is better to rely on pkt->dts if you do not
 * decompress the payload.
 *
 * @return 0 if OK, < 0 on error or end of file
 */
    pub fn av_read_frame(s: *mut AVFormatContext, pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Seek to the keyframe at timestamp.
 * 'timestamp' in 'stream_index'.
 *
 * @param s media file handle
 * @param stream_index If stream_index is (-1), a default
 * stream is selected, and timestamp is automatically converted
 * from AV_TIME_BASE units to the stream specific time_base.
 * @param timestamp Timestamp in AVStream.time_base units
 *        or, if no stream is specified, in AV_TIME_BASE units.
 * @param flags flags which select direction and seeking mode
 * @return >= 0 on success
 */
    pub fn av_seek_frame(s: *mut AVFormatContext,
                         stream_index: ::std::os::raw::c_int, timestamp: i64,
                         flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Seek to timestamp ts.
 * Seeking will be done so that the point from which all active streams
 * can be presented successfully will be closest to ts and within min/max_ts.
 * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.
 *
 * If flags contain AVSEEK_FLAG_BYTE, then all timestamps are in bytes and
 * are the file position (this may not be supported by all demuxers).
 * If flags contain AVSEEK_FLAG_FRAME, then all timestamps are in frames
 * in the stream with stream_index (this may not be supported by all demuxers).
 * Otherwise all timestamps are in units of the stream selected by stream_index
 * or if stream_index is -1, in AV_TIME_BASE units.
 * If flags contain AVSEEK_FLAG_ANY, then non-keyframes are treated as
 * keyframes (this may not be supported by all demuxers).
 * If flags contain AVSEEK_FLAG_BACKWARD, it is ignored.
 *
 * @param s media file handle
 * @param stream_index index of the stream which is used as time base reference
 * @param min_ts smallest acceptable timestamp
 * @param ts target timestamp
 * @param max_ts largest acceptable timestamp
 * @param flags flags
 * @return >=0 on success, error code otherwise
 *
 * @note This is part of the new seek API which is still under construction.
 *       Thus do not use this yet. It may change at any time, do not expect
 *       ABI compatibility yet!
 */
    pub fn avformat_seek_file(s: *mut AVFormatContext,
                              stream_index: ::std::os::raw::c_int,
                              min_ts: i64, ts: i64, max_ts: i64,
                              flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Discard all internally buffered data. This can be useful when dealing with
 * discontinuities in the byte stream. Generally works only with formats that
 * can resync. This includes headerless formats like MPEG-TS/TS but should also
 * work with NUT, Ogg and in a limited way AVI for example.
 *
 * The set of streams, the detected duration, stream parameters and codecs do
 * not change when calling this function. If you want a complete reset, it's
 * better to open a new AVFormatContext.
 *
 * This does not flush the AVIOContext (s->pb). If necessary, call
 * avio_flush(s->pb) before calling this function.
 *
 * @param s media file handle
 * @return >=0 on success, error code otherwise
 */
    pub fn avformat_flush(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Start playing a network-based stream (e.g. RTSP stream) at the
 * current position.
 */
    pub fn av_read_play(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Pause a network-based stream (e.g. RTSP stream).
 *
 * Use av_read_play() to resume it.
 */
    pub fn av_read_pause(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Close an opened input AVFormatContext. Free it and all its contents
 * and set *s to NULL.
 */
    pub fn avformat_close_input(s: *mut *mut AVFormatContext);
}
extern "C" {
    /**
 * @addtogroup lavf_encoding
 * @{
 */
/**
 * Allocate the stream private data and write the stream header to
 * an output media file.
 *
 * @param s Media file handle, must be allocated with avformat_alloc_context().
 *          Its oformat field must be set to the desired output format;
 *          Its pb field must be set to an already opened AVIOContext.
 * @param options  An AVDictionary filled with AVFormatContext and muxer-private options.
 *                 On return this parameter will be destroyed and replaced with a dict containing
 *                 options that were not found. May be NULL.
 *
 * @return 0 on success, negative AVERROR on failure.
 *
 * @see av_opt_find, av_dict_set, avio_open, av_oformat_next.
 */
    pub fn avformat_write_header(s: *mut AVFormatContext,
                                 options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Write a packet to an output media file.
 *
 * This function passes the packet directly to the muxer, without any buffering
 * or reordering. The caller is responsible for correctly interleaving the
 * packets if the format requires it. Callers that want libavformat to handle
 * the interleaving should call av_interleaved_write_frame() instead of this
 * function.
 *
 * @param s media file handle
 * @param pkt The packet containing the data to be written. Note that unlike
 *            av_interleaved_write_frame(), this function does not take
 *            ownership of the packet passed to it (though some muxers may make
 *            an internal reference to the input packet).
 *            <br>
 *            This parameter can be NULL (at any time, not just at the end), in
 *            order to immediately flush data buffered within the muxer, for
 *            muxers that buffer up data internally before writing it to the
 *            output.
 *            <br>
 *            Packet's @ref AVPacket.stream_index "stream_index" field must be
 *            set to the index of the corresponding stream in @ref
 *            AVFormatContext.streams "s->streams". It is very strongly
 *            recommended that timing information (@ref AVPacket.pts "pts", @ref
 *            AVPacket.dts "dts", @ref AVPacket.duration "duration") is set to
 *            correct values.
 * @return < 0 on error, = 0 if OK, 1 if flushed and there is no more data to flush
 *
 * @see av_interleaved_write_frame()
 */
    pub fn av_write_frame(s: *mut AVFormatContext, pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Write a packet to an output media file ensuring correct interleaving.
 *
 * This function will buffer the packets internally as needed to make sure the
 * packets in the output file are properly interleaved in the order of
 * increasing dts. Callers doing their own interleaving should call
 * av_write_frame() instead of this function.
 *
 * @param s media file handle
 * @param pkt The packet containing the data to be written.
 *            <br>
 *            If the packet is reference-counted, this function will take
 *            ownership of this reference and unreference it later when it sees
 *            fit.
 *            The caller must not access the data through this reference after
 *            this function returns. If the packet is not reference-counted,
 *            libavformat will make a copy.
 *            <br>
 *            This parameter can be NULL (at any time, not just at the end), to
 *            flush the interleaving queues.
 *            <br>
 *            Packet's @ref AVPacket.stream_index "stream_index" field must be
 *            set to the index of the corresponding stream in @ref
 *            AVFormatContext.streams "s->streams". It is very strongly
 *            recommended that timing information (@ref AVPacket.pts "pts", @ref
 *            AVPacket.dts "dts", @ref AVPacket.duration "duration") is set to
 *            correct values.
 *
 * @return 0 on success, a negative AVERROR on error. Libavformat will always
 *         take care of freeing the packet, even if this function fails.
 *
 * @see av_write_frame(), AVFormatContext.max_interleave_delta
 */
    pub fn av_interleaved_write_frame(s: *mut AVFormatContext,
                                      pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Write a uncoded frame to an output media file.
 *
 * The frame must be correctly interleaved according to the container
 * specification; if not, then av_interleaved_write_frame() must be used.
 *
 * See av_interleaved_write_frame() for details.
 */
    pub fn av_write_uncoded_frame(s: *mut AVFormatContext,
                                  stream_index: ::std::os::raw::c_int,
                                  frame: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Write a uncoded frame to an output media file.
 *
 * If the muxer supports it, this function makes it possible to write an AVFrame
 * structure directly, without encoding it into a packet.
 * It is mostly useful for devices and similar special muxers that use raw
 * video or PCM data and will not serialize it into a byte stream.
 *
 * To test whether it is possible to use it with a given muxer and stream,
 * use av_write_uncoded_frame_query().
 *
 * The caller gives up ownership of the frame and must not access it
 * afterwards.
 *
 * @return  >=0 for success, a negative code on error
 */
    pub fn av_interleaved_write_uncoded_frame(s: *mut AVFormatContext,
                                              stream_index:
                                                  ::std::os::raw::c_int,
                                              frame: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Test whether a muxer supports uncoded frame.
 *
 * @return  >=0 if an uncoded frame can be written to that muxer and stream,
 *          <0 if not
 */
    pub fn av_write_uncoded_frame_query(s: *mut AVFormatContext,
                                        stream_index: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Write the stream trailer to an output media file and free the
 * file private data.
 *
 * May only be called after a successful call to avformat_write_header.
 *
 * @param s media file handle
 * @return 0 if OK, AVERROR_xxx on error
 */
    pub fn av_write_trailer(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return the output format in the list of registered output formats
 * which best matches the provided parameters, or return NULL if
 * there is no match.
 *
 * @param short_name if non-NULL checks if short_name matches with the
 * names of the registered formats
 * @param filename if non-NULL checks if filename terminates with the
 * extensions of the registered formats
 * @param mime_type if non-NULL checks if mime_type matches with the
 * MIME type of the registered formats
 */
    pub fn av_guess_format(short_name: *const ::std::os::raw::c_char,
                           filename: *const ::std::os::raw::c_char,
                           mime_type: *const ::std::os::raw::c_char)
     -> *mut AVOutputFormat;
}
extern "C" {
    /**
 * Guess the codec ID based upon muxer and filename.
 */
    pub fn av_guess_codec(fmt: *mut AVOutputFormat,
                          short_name: *const ::std::os::raw::c_char,
                          filename: *const ::std::os::raw::c_char,
                          mime_type: *const ::std::os::raw::c_char,
                          type_: AVMediaType) -> AVCodecID;
}
extern "C" {
    /**
 * Get timing information for the data currently output.
 * The exact meaning of "currently output" depends on the format.
 * It is mostly relevant for devices that have an internal buffer and/or
 * work in real time.
 * @param s          media file handle
 * @param stream     stream in the media file
 * @param[out] dts   DTS of the last packet output for the stream, in stream
 *                   time_base units
 * @param[out] wall  absolute time when that packet whas output,
 *                   in microsecond
 * @return  0 if OK, AVERROR(ENOSYS) if the format does not support it
 * Note: some formats or devices may not allow to measure dts and wall
 * atomically.
 */
    pub fn av_get_output_timestamp(s: *mut AVFormatContext,
                                   stream: ::std::os::raw::c_int,
                                   dts: *mut i64, wall: *mut i64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Send a nice hexadecimal dump of a buffer to the specified file stream.
 *
 * @param f The file stream pointer where the dump should be sent to.
 * @param buf buffer
 * @param size buffer size
 *
 * @see av_hex_dump_log, av_pkt_dump2, av_pkt_dump_log2
 */
    pub fn av_hex_dump(f: *mut FILE, buf: *const u8,
                       size: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Send a nice hexadecimal dump of a buffer to the log.
 *
 * @param avcl A pointer to an arbitrary struct of which the first field is a
 * pointer to an AVClass struct.
 * @param level The importance level of the message, lower values signifying
 * higher importance.
 * @param buf buffer
 * @param size buffer size
 *
 * @see av_hex_dump, av_pkt_dump2, av_pkt_dump_log2
 */
    pub fn av_hex_dump_log(avcl: *mut ::std::os::raw::c_void,
                           level: ::std::os::raw::c_int, buf: *const u8,
                           size: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Send a nice dump of a packet to the specified file stream.
 *
 * @param f The file stream pointer where the dump should be sent to.
 * @param pkt packet to dump
 * @param dump_payload True if the payload must be displayed, too.
 * @param st AVStream that the packet belongs to
 */
    pub fn av_pkt_dump2(f: *mut FILE, pkt: *const AVPacket,
                        dump_payload: ::std::os::raw::c_int,
                        st: *const AVStream);
}
extern "C" {
    /**
 * Send a nice dump of a packet to the log.
 *
 * @param avcl A pointer to an arbitrary struct of which the first field is a
 * pointer to an AVClass struct.
 * @param level The importance level of the message, lower values signifying
 * higher importance.
 * @param pkt packet to dump
 * @param dump_payload True if the payload must be displayed, too.
 * @param st AVStream that the packet belongs to
 */
    pub fn av_pkt_dump_log2(avcl: *mut ::std::os::raw::c_void,
                            level: ::std::os::raw::c_int,
                            pkt: *const AVPacket,
                            dump_payload: ::std::os::raw::c_int,
                            st: *const AVStream);
}
extern "C" {
    /**
 * Get the AVCodecID for the given codec tag tag.
 * If no codec id is found returns AV_CODEC_ID_NONE.
 *
 * @param tags list of supported codec_id-codec_tag pairs, as stored
 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag
 * @param tag  codec tag to match to a codec ID
 */
    pub fn av_codec_get_id(tags: *const *const AVCodecTag,
                           tag: ::std::os::raw::c_uint) -> AVCodecID;
}
extern "C" {
    /**
 * Get the codec tag for the given codec id id.
 * If no codec tag is found returns 0.
 *
 * @param tags list of supported codec_id-codec_tag pairs, as stored
 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag
 * @param id   codec ID to match to a codec tag
 */
    pub fn av_codec_get_tag(tags: *const *const AVCodecTag, id: AVCodecID)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * Get the codec tag for the given codec id.
 *
 * @param tags list of supported codec_id - codec_tag pairs, as stored
 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag
 * @param id codec id that should be searched for in the list
 * @param tag A pointer to the found tag
 * @return 0 if id was not found in tags, > 0 if it was found
 */
    pub fn av_codec_get_tag2(tags: *const *const AVCodecTag, id: AVCodecID,
                             tag: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_find_default_stream_index(s: *mut AVFormatContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Get the index for a specific timestamp.
 *
 * @param st        stream that the timestamp belongs to
 * @param timestamp timestamp to retrieve the index for
 * @param flags if AVSEEK_FLAG_BACKWARD then the returned index will correspond
 *                 to the timestamp which is <= the requested one, if backward
 *                 is 0, then it will be >=
 *              if AVSEEK_FLAG_ANY seek to any frame, only keyframes otherwise
 * @return < 0 if no such timestamp could be found
 */
    pub fn av_index_search_timestamp(st: *mut AVStream, timestamp: i64,
                                     flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Add an index entry into a sorted list. Update the entry if the list
 * already contains it.
 *
 * @param timestamp timestamp in the time base of the given stream
 */
    pub fn av_add_index_entry(st: *mut AVStream, pos: i64, timestamp: i64,
                              size: ::std::os::raw::c_int,
                              distance: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Split a URL string into components.
 *
 * The pointers to buffers for storing individual components may be null,
 * in order to ignore that component. Buffers for components not found are
 * set to empty strings. If the port is not found, it is set to a negative
 * value.
 *
 * @param proto the buffer for the protocol
 * @param proto_size the size of the proto buffer
 * @param authorization the buffer for the authorization
 * @param authorization_size the size of the authorization buffer
 * @param hostname the buffer for the host name
 * @param hostname_size the size of the hostname buffer
 * @param port_ptr a pointer to store the port number in
 * @param path the buffer for the path
 * @param path_size the size of the path buffer
 * @param url the URL to split
 */
    pub fn av_url_split(proto: *mut ::std::os::raw::c_char,
                        proto_size: ::std::os::raw::c_int,
                        authorization: *mut ::std::os::raw::c_char,
                        authorization_size: ::std::os::raw::c_int,
                        hostname: *mut ::std::os::raw::c_char,
                        hostname_size: ::std::os::raw::c_int,
                        port_ptr: *mut ::std::os::raw::c_int,
                        path: *mut ::std::os::raw::c_char,
                        path_size: ::std::os::raw::c_int,
                        url: *const ::std::os::raw::c_char);
}
extern "C" {
    /**
 * Print detailed information about the input or output format, such as
 * duration, bitrate, streams, container, programs, metadata, side data,
 * codec and time base.
 *
 * @param ic        the context to analyze
 * @param index     index of the stream to dump information about
 * @param url       the URL to print, such as source or destination file
 * @param is_output Select whether the specified context is an input(0) or output(1)
 */
    pub fn av_dump_format(ic: *mut AVFormatContext,
                          index: ::std::os::raw::c_int,
                          url: *const ::std::os::raw::c_char,
                          is_output: ::std::os::raw::c_int);
}
extern "C" {
    /**
 * Return in 'buf' the path with '%d' replaced by a number.
 *
 * Also handles the '%0nd' format where 'n' is the total number
 * of digits and '%%'.
 *
 * @param buf destination buffer
 * @param buf_size destination buffer size
 * @param path numbered sequence string
 * @param number frame number
 * @return 0 if OK, -1 on format error
 */
    pub fn av_get_frame_filename(buf: *mut ::std::os::raw::c_char,
                                 buf_size: ::std::os::raw::c_int,
                                 path: *const ::std::os::raw::c_char,
                                 number: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Check whether filename actually is a numbered sequence generator.
 *
 * @param filename possible numbered sequence string
 * @return 1 if a valid numbered sequence string, 0 otherwise
 */
    pub fn av_filename_number_test(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Generate an SDP for an RTP session.
 *
 * Note, this overwrites the id values of AVStreams in the muxer contexts
 * for getting unique dynamic payload types.
 *
 * @param ac array of AVFormatContexts describing the RTP streams. If the
 *           array is composed by only one context, such context can contain
 *           multiple AVStreams (one AVStream per RTP stream). Otherwise,
 *           all the contexts in the array (an AVCodecContext per RTP stream)
 *           must contain only one AVStream.
 * @param n_files number of AVCodecContexts contained in ac
 * @param buf buffer where the SDP will be stored (must be allocated by
 *            the caller)
 * @param size the size of the buffer
 * @return 0 if OK, AVERROR_xxx on error
 */
    pub fn av_sdp_create(ac: *mut *mut AVFormatContext,
                         n_files: ::std::os::raw::c_int,
                         buf: *mut ::std::os::raw::c_char,
                         size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Return a positive value if the given filename has one of the given
 * extensions, 0 otherwise.
 *
 * @param filename   file name to check against the given extensions
 * @param extensions a comma-separated list of filename extensions
 */
    pub fn av_match_ext(filename: *const ::std::os::raw::c_char,
                        extensions: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * Test if the given container can store a codec.
 *
 * @param ofmt           container to check for compatibility
 * @param codec_id       codec to potentially store in container
 * @param std_compliance standards compliance level, one of FF_COMPLIANCE_*
 *
 * @return 1 if codec with ID codec_id can be stored in ofmt, 0 if it cannot.
 *         A negative number if this information is not available.
 */
    pub fn avformat_query_codec(ofmt: *const AVOutputFormat,
                                codec_id: AVCodecID,
                                std_compliance: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /**
 * @defgroup riff_fourcc RIFF FourCCs
 * @{
 * Get the tables mapping RIFF FourCCs to libavcodec AVCodecIDs. The tables are
 * meant to be passed to av_codec_get_id()/av_codec_get_tag() as in the
 * following code:
 * @code
 * uint32_t tag = MKTAG('H', '2', '6', '4');
 * const struct AVCodecTag *table[] = { avformat_get_riff_video_tags(), 0 };
 * enum AVCodecID id = av_codec_get_id(table, tag);
 * @endcode
 */
/**
 * @return the table mapping RIFF FourCCs for video to libavcodec AVCodecID.
 */
    pub fn avformat_get_riff_video_tags() -> *const AVCodecTag;
}
extern "C" {
    /**
 * @return the table mapping RIFF FourCCs for audio to AVCodecID.
 */
    pub fn avformat_get_riff_audio_tags() -> *const AVCodecTag;
}
extern "C" {
    /**
 * @return the table mapping MOV FourCCs for video to libavcodec AVCodecID.
 */
    pub fn avformat_get_mov_video_tags() -> *const AVCodecTag;
}
extern "C" {
    /**
 * @return the table mapping MOV FourCCs for audio to AVCodecID.
 */
    pub fn avformat_get_mov_audio_tags() -> *const AVCodecTag;
}
extern "C" {
    /**
 * Guess the sample aspect ratio of a frame, based on both the stream and the
 * frame aspect ratio.
 *
 * Since the frame aspect ratio is set by the codec but the stream aspect ratio
 * is set by the demuxer, these two may not be equal. This function tries to
 * return the value that you should use if you would like to display the frame.
 *
 * Basic logic is to use the stream aspect ratio if it is set to something sane
 * otherwise use the frame aspect ratio. This way a container setting, which is
 * usually easy to modify can override the coded value in the frames.
 *
 * @param format the format context which the stream is part of
 * @param stream the stream which the frame is part of
 * @param frame the frame with the aspect ratio to be determined
 * @return the guessed (valid) sample_aspect_ratio, 0/1 if no idea
 */
    pub fn av_guess_sample_aspect_ratio(format: *mut AVFormatContext,
                                        stream: *mut AVStream,
                                        frame: *mut AVFrame) -> AVRational;
}
extern "C" {
    /**
 * Guess the frame rate, based on both the container and codec information.
 *
 * @param ctx the format context which the stream is part of
 * @param stream the stream which the frame is part of
 * @param frame the frame for which the frame rate should be determined, may be NULL
 * @return the guessed (valid) frame rate, 0/1 if no idea
 */
    pub fn av_guess_frame_rate(ctx: *mut AVFormatContext,
                               stream: *mut AVStream, frame: *mut AVFrame)
     -> AVRational;
}
extern "C" {
    /**
 * Check if the stream st contained in s is matched by the stream specifier
 * spec.
 *
 * See the "stream specifiers" chapter in the documentation for the syntax
 * of spec.
 *
 * @return  >0 if st is matched by spec;
 *          0  if st is not matched by spec;
 *          AVERROR code if spec is invalid
 *
 * @note  A stream specifier can match several streams in the format.
 */
    pub fn avformat_match_stream_specifier(s: *mut AVFormatContext,
                                           st: *mut AVStream,
                                           spec:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_queue_attached_pictures(s: *mut AVFormatContext)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
